<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classthread__join_22" kind="class" language="Prolog" prot="public">
    <compoundname>thread_join/2</compoundname>
    <briefdescription>
<para><bold>thread_join</bold>(+ <emphasis>Id</emphasis>, - <emphasis>Status</emphasis>) </para>
    </briefdescription>
    <detaileddescription>
<para>Wait for the termination of thread with given <emphasis>Id</emphasis> Then unify the result-status of the thread with <emphasis>Status</emphasis> After this call, <emphasis>Id</emphasis> becomes invalid and all resources associated with the thread are reclaimed Note that threads with the attribute <computeroutput>detached</computeroutput> <computeroutput>true</computeroutput> cannot be joined See also <ref refid="classcurrent__thread_22" kindref="compound">current_thread/2</ref></para>
<para>A thread that has been completed without <ref refid="classthread__join_22" kindref="compound">thread_join/2</ref> being called on it is partly reclaimed: the Prolog stacks are released and the C-thread is destroyed A small data-structure representing the exit-status of the thread is retained until <ref refid="classthread__join_22" kindref="compound">thread_join/2</ref> is called on the thread Defined values for <emphasis>Status</emphasis> are:</para>
<para><itemizedlist>
<listitem><para>true The goal has been proven successfully</para>
</listitem><listitem><para>false The goal has failed</para>
</listitem><listitem><para>exception( <emphasis>Term</emphasis>) The thread is terminated on an exception See <ref refid="classprint__message_22" kindref="compound">print_message/2</ref> to turn system exceptions into readable messages</para>
</listitem><listitem><para>exited( <emphasis>Term</emphasis>) The thread is terminated on <ref refid="classthread__exit_21" kindref="compound">thread_exit/1</ref> using the argument <emphasis>Term</emphasis></para>
</listitem><listitem><para>thread_detach(+ <emphasis>Id</emphasis>)</para>
</listitem></itemizedlist>
</para>
<para>Switch thread into detached-state (see <computeroutput>detached</computeroutput> option at <ref refid="classthread__create_23" kindref="compound">thread_create/3</ref> at runtime <emphasis>Id</emphasis> is the identifier of the thread placed in detached state</para>
<para>One of the possible applications is to simplify debugging Threads that are created as <computeroutput>detached</computeroutput> leave no traces if they crash For not-detached threads the status can be inspected using <ref refid="classcurrent__thread_22" kindref="compound">current_thread/2</ref> Threads nobody is waiting for may be created normally and detach themselves just before completion This way they leave no traces on normal completion and their reason for failure can be inspected </para>
    </detaileddescription>
    <location file="/home/vsc/github/yap/pl/threads.yap" line="1" column="1" bodyfile="/home/vsc/github/yap/pl/threads.yap" bodystart="1" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
