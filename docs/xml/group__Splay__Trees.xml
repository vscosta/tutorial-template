<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="group__Splay__Trees" kind="group">
    <compoundname>Splay_Trees</compoundname>
    <title>Splay Trees</title>
    <innerclass refid="classsplay__del_23" prot="public">splay_del/3</innerclass>
    <innerclass refid="classsplay__insert_24" prot="public">splay_insert/4</innerclass>
    <innerclass refid="classsplay__join_23" prot="public">splay_join/3</innerclass>
    <innerclass refid="classsplay__split_25" prot="public">splay_split/5</innerclass>
    <innerclass refid="classsplay__init_21" prot="public">splay_init/1</innerclass>
    <briefdescription>
<para>Splay trees are explained in the paper &quot;Self-adjusting Binary Search
Trees&quot;, by D.D. </para>
    </briefdescription>
    <detaileddescription>
<para>Sleator and R.E Tarjan, JACM, vol 32, No.3, July 1985, p 668 They are designed to support fast insertions, deletions and removals in binary search trees without the complexity of traditional balanced trees The key idea is to allow the tree to become unbalanced To make up for this, whenever we \ find a node, we move it up to the top We use code by Vijay Saraswat originally posted to the Prolog mailing-list</para>
<para>Date: Sun 22 Mar 87 03:40:22-EST &gt;From: vijay <ulink url="mailto:Vijay.Saraswat@C.CS.CMU.EDU">Vijay.Saraswat@C.CS.CMU.EDU</ulink> Subject: Splay trees in LP languages</para>
<para>There have hardly been any interesting programs in this Digest for a long while now Here is something which may stir the slothful among you! I present Prolog programs for implementing self-adjusting binary search trees, using splaying These programs should be among the most efficient Prolog programs for maintaining binary search trees, with dynamic insertion and deletion</para>
<para>The algorithm is taken from: &quot;Self-adjusting Binary Search Trees&quot;, D.D Sleator and R.E Tarjan, JACM, vol 32, No.3, July 1985, p 668 (See Tarjan&apos;s Turing Award lecture in this month&apos;s CACM for a more </para>
<sect2 id="group__Splay__Trees_1autotoc_md30">
<title>informal introduction).</title>
<para>The operations provided by the program are:</para>
<para><orderedlist>
<listitem><para>access(i,t): (implemented by the call access(V, I, T, New)) &quot;If item i is in tree t, return a pointer to its location;
  otherwise return a pointer to the null node&quot; In our implementation, in the call access(V, I, T, New), V is unifies with <lsquo/>null<rsquo/> if the item is not there, else with <lsquo/>true<rsquo/> if it is there, in which case I is also unified with that item</para>
</listitem><listitem><para>insert(i,t): (implemented by the call insert(I, T, New)) &quot;Insert item i in tree t, assuming that it is not there already.&quot; (In our implementation, i is not inserted if it is already there: rather it is unified with the item already in the tree.)</para>
</listitem><listitem><para>delete(i,t): (implemented by the call del(I, T, New)) &quot;Delete item i from tree t, assuming that it is present.&quot; (In our implementation, the call fails if the item is not in the tree.)</para>
</listitem><listitem><para>join(t1,t2): (Implemented by the call join(T1, T2, New)) &quot;Combine trees t1 and t2 into a single tree containing
    all items from both trees, and return the resulting
    tree This operation assumes that all items in t1 are
    less than all those in t2 and destroys both t1 and t2&quot;</para>
</listitem><listitem><para>split(i,t): (implemented by the call split(I, T, Left, Right)) &quot;Construct and return two trees t1 and t2, where t1
    contains all items in t less than i, and t2 contains all
    items in t greater than i This operations destroys t&quot;</para>
</listitem></orderedlist>
</para>
<para>The basic workhorse is the routine bst(Op, Item, Tree, NewTree), which returns in NewTree a binary search tree obtained by searching for Item in&lt; Tree and splaying OP controls what must happen if Item is not found in the Tree If Op = access(V), then V is unified with null if the item is not found in the tree, and with true if it is; in the latter case Item is also unified with the item found in the tree In the first case, splaying is done at the node at which the discovery was made that Item was not in the tree, and in the second case splaying is done at the node at which Item is found If Op=insert, then Item is inserted in the tree if it is not found, and splaying is done at the new node; if the item is found, then splaying is done at the node at which it is found</para>
<para>A node is simply an n/3 structure: n(NodeValue, LeftSon, RightSon) NodeValue could be as simple as an integer, or it could be a (Key, Value) pair</para>
<para>A node is simply an n/3 structure: n(NodeValue, LeftSon, RightSon) NodeValue could be as simple as an integer, or it could be a (Key, Value) pair</para>
<para>Here are the top-level axioms The algorithm for del/3 is the first algorithm mentioned in the JACM paper: namely, first access the element to be deleted, thus bringing it to the root, and then join its sons (join/4 is discussed later.)</para>
</sect2>
    </detaileddescription>
  </compounddef>
</doxygen>
