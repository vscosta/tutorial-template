<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="group__MALLOC__Wrapper" kind="group">
    <compoundname>MALLOC_Wrapper</compoundname>
    <title>Stack allocated objects</title>
    <innerclass refid="structmblock" prot="public">mblock</innerclass>
    <innerclass refid="structTextBuffer__manager" prot="public">TextBuffer_manager</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__MALLOC__Wrapper_1gad1a8232c7415fa2c6a73fb7dba593b49" prot="public" static="no">
        <type>struct <ref refid="structTextBuffer__manager" kindref="compound">TextBuffer_manager</ref></type>
        <definition>typedef struct TextBuffer_manager text_buffer_t</definition>
        <argsstring></argsstring>
        <name>text_buffer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1687" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga2daf441172e3c48ffc8966ac53bb2286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AllocLevel</definition>
        <argsstring>(void)</argsstring>
        <name>AllocLevel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1689" column="5" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1689" bodyend="1692"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga5cd1537627405f352ee917d9a2561eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insert_block</definition>
        <argsstring>(struct mblock *o)</argsstring>
        <name>insert_block</name>
        <param>
          <type>struct <ref refid="structmblock" kindref="compound">mblock</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1694" column="6" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1694" bodyend="1707"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1gae3f07fe44b7578cda3a0411a55c31d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void release_block</definition>
        <argsstring>(struct mblock *o)</argsstring>
        <name>release_block</name>
        <param>
          <type>struct <ref refid="structmblock" kindref="compound">mblock</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1709" column="7" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1709" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga647f214774a472ab85b854d1016d816a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_text_stack__</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>push_text_stack__</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1726" column="5" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1726" bodyend="1731"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga28b2354dfaabbe427acd05684d30fc6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_text_stack__</definition>
        <argsstring>(int i USES_REGS)</argsstring>
        <name>pop_text_stack__</name>
        <param>
          <type>int i</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1733" column="5" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1733" bodyend="1748"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1gaf5abbc847c818aef7df20d6c9aa1ab2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * pop_output_text_stack__</definition>
        <argsstring>(int i, const void *export USES_REGS)</argsstring>
        <name>pop_output_text_stack__</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *export</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1750" column="6" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1750" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1gaa3e0fce0b33c94fb8aec19cb56098276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * __Malloc</definition>
        <argsstring>(size_t sz USES_REGS)</argsstring>
        <name>__Malloc</name>
        <param>
          <type>size_t sz</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1789" column="6" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1789" bodyend="1803"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1gadbef206ffcbc3f45f07dd59ec6fe5dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * __MallocAtLevel</definition>
        <argsstring>(size_t sz, int atL USES_REGS)</argsstring>
        <name>__MallocAtLevel</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>int atL</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1805" column="6" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1805" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga443c418e6b8e6a3df1dac3d8fa47dbea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * __Realloc</definition>
        <argsstring>(void *pt, size_t sz USES_REGS)</argsstring>
        <name>__Realloc</name>
        <param>
          <type>void *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>size_t sz</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1827" column="6" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1827" bodyend="1847"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga26cf8acde7e1183469ad8a5f4bc87938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * __MallocExportAsRO</definition>
        <argsstring>(const void *pt USES_REGS)</argsstring>
        <name>__MallocExportAsRO</name>
        <param>
          <type>const void *pt</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
<para>Export a local memory object as a RO object to the outside world, that is, recovering as much storage as one can. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1855" column="12" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1855" bodyend="1863"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga0fac695aaa7eeaef250c33174339ade5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __Free</definition>
        <argsstring>(void *pt USES_REGS)</argsstring>
        <name>__Free</name>
        <param>
          <type>void *pt</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1865" column="6" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1865" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga4812eb9e3c8899f20f13a21d68ace2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * Yap_InitTextAllocator</definition>
        <argsstring>(void)</argsstring>
        <name>Yap_InitTextAllocator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1872" column="6" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1872" bodyend="1875"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__MALLOC__Wrapper_1gaa4e5ca47d52a8be522912705c27e0d1c" prot="public" static="no">
        <name>MAX_PATHNAME</name>
        <initializer>2048</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/C/alloc.c" line="1673" column="9" bodyfile="/home/vsc/github/yap/C/alloc.c" bodystart="1673" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The purpose of this wrapper is to be able to release heap data automatically when a function segment terminates. </para>
    </briefdescription>
    <detaileddescription>
<para>API for wrapper:<orderedlist>
<listitem><para><computeroutput>int push_text_stack(): start a new level 1</computeroutput>int pop_text_stack(int lvl)<computeroutput>: release all heap object at level</computeroutput>lvl<computeroutput> 1</computeroutput>int pop_output_text_stack(int lvl, const void *export)<computeroutput>: same as before, but</computeroutput>export` is stil avaliable</para>
</listitem></orderedlist>
<orderedlist>
<listitem><para>void *Malloc(size_t sz)</para>
</listitem><listitem><para>Realloc(ptr, sz)</para>
</listitem><listitem><para>Free(sz)</para>
</listitem></orderedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
