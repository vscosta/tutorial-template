<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classalarm_23" kind="class" language="Prolog" prot="public">
    <compoundname>alarm/3</compoundname>
    <briefdescription>
<para><bold>alarm</bold>(+ <emphasis>Seconds</emphasis>,+ <emphasis>Callable</emphasis>,+ <emphasis>OldAlarm</emphasis>) </para>
    </briefdescription>
    <detaileddescription>
<para>Arranges for YAP to be interrupted in <emphasis>Seconds</emphasis> seconds, or in [ <emphasis>Seconds</emphasis>| <emphasis>MicroSeconds</emphasis>] When interrupted, YAP will execute <emphasis>Callable</emphasis> and then return to the previous execution If <emphasis>Seconds</emphasis> is <computeroutput>0</computeroutput>, no new alarm is scheduled In any event, any previously set alarm is canceled</para>
<para>The variable <emphasis>OldAlarm</emphasis> unifies with the number of seconds remaining until any previously scheduled alarm was due to be delivered, or with <computeroutput>0</computeroutput> if there was no previously scheduled alarm</para>
<para>Note that execution of <emphasis>Callable</emphasis> will wait if YAP is executing built-in predicates, such as Input/Output operations</para>
<para>The next example shows how <emphasis><ref refid="classalarm_23" kindref="compound">alarm/3</ref> </emphasis> can be used to implement a simple clock:</para>
<para><programlisting><codeline><highlight class="stringliteral"></highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">:-</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">.</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="stringliteral"></highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">:-</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">write(</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">write,</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight><highlight class="normal">get_value(tick,<sp/>yes),</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight><highlight class="normal">alarm(</highlight><highlight class="vhldigit">1</highlight><highlight class="normal">,ticker,</highlight><highlight class="charliteral">_</highlight><highlight class="normal">).</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">:-<sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">set_value(tick,<sp/>yes),<sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">alarm(</highlight><highlight class="vhldigit">1</highlight><highlight class="normal">,ticker,</highlight><highlight class="charliteral">_</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">alarm</highlight><highlight class="keyword">.</highlight></codeline>
</programlisting></para>
<para>The clock, <computeroutput>ticker</computeroutput>, writes a dot and then checks the flag <computeroutput>tick</computeroutput> to see whether it can continue ticking If so, it calls itself again Note that there is no guarantee that the each dot corresponds a second: for instance, if the YAP is waiting for user input, <computeroutput>ticker</computeroutput> will wait until the user types the entry in</para>
<para>The next example shows how <ref refid="classalarm_23" kindref="compound">alarm/3</ref> can be used to guarantee that a certain procedure does not take longer than a certain amount of time:</para>
<para><programlisting><codeline><highlight class="stringliteral"></highlight><highlight class="normal">alarm<sp/></highlight><highlight class="keyword">:-</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">alarm.</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">:-<sp/><sp/><sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">catch((alarm(</highlight><highlight class="vhldigit">10</highlight><highlight class="normal">,<sp/>throw(ball),<sp/></highlight><highlight class="charliteral">_</highlight><highlight class="normal">),loop),</highlight></codeline>
<codeline><highlight class="normal">ball,</highlight></codeline>
<codeline><highlight class="normal">format(</highlight><highlight class="stringliteral">&apos;Quota<sp/>exhausted.~n&apos;</highlight><highlight class="normal">,[]))</highlight><highlight class="keyword">.</highlight></codeline>
</programlisting> In this case after <computeroutput>10</computeroutput> seconds our <computeroutput>loop</computeroutput> is interrupted, <computeroutput>ball</computeroutput> is thrown, and the handler writes <computeroutput>Quota exhausted</computeroutput> Execution then continues from the handler</para>
<para>Note that in this case <computeroutput>loop/0 </computeroutput> always executes until the alarm is sent Often, the code you are executing succeeds or fails before the alarm is actually delivered In this case, you probably want to disable the alarm when you leave the procedure The next procedure does exactly so:</para>
<para><programlisting><codeline><highlight class="stringliteral"></highlight><highlight class="normal">once_with_alarm(</highlight><highlight class="charliteral">Time</highlight><highlight class="normal">,</highlight><highlight class="charliteral">Goal</highlight><highlight class="normal">,</highlight><highlight class="charliteral">DoOnAlarm</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">:-</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight><highlight class="normal">catch(execute_once_with_alarm(</highlight><highlight class="charliteral">Time</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">Goal</highlight><highlight class="normal">),<sp/>alarm,<sp/></highlight><highlight class="charliteral">DoOnAlarm</highlight><highlight class="normal">).</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="stringliteral"></highlight><highlight class="normal">execute_once_with_alarm(</highlight><highlight class="charliteral">Time</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">Goal</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">:-</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight><highlight class="normal">alarm(</highlight><highlight class="charliteral">Time</highlight><highlight class="normal">,<sp/>alarm,<sp/></highlight><highlight class="charliteral">_</highlight><highlight class="normal">),</highlight></codeline>
<codeline><highlight class="normal">(<sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">call(</highlight><highlight class="charliteral">Goal</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">-&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">alarm(</highlight><highlight class="vhldigit">0</highlight><highlight class="normal">,<sp/>alarm,<sp/></highlight><highlight class="charliteral">_</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">alarm(</highlight><highlight class="vhldigit">0</highlight><highlight class="normal">,<sp/>alarm,<sp/></highlight><highlight class="charliteral">_</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">alarm)</highlight><highlight class="keyword">.</highlight></codeline>
</programlisting></para>
<para>The procedure <computeroutput>once_with_alarm/3 </computeroutput> has three arguments: the <emphasis>Time</emphasis> to wait before the alarm is sent; the <emphasis>Goal</emphasis> to execute; and the goal <emphasis>DoOnAlarm</emphasis> to execute if the alarm is sent It uses catch/3 to handle the case the <computeroutput>alarm</computeroutput> is sent Then it starts the alarm, calls the goal <emphasis>Goal</emphasis>, and disables the alarm on success or failure </para>
    </detaileddescription>
    <location file="/home/vsc/github/yap/pl/signals.yap" line="1" column="1" bodyfile="/home/vsc/github/yap/pl/signals.yap" bodystart="1" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
