<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="conceptassert_21" kind="concept">
    <compoundname>assert/1</compoundname>
    <initializer>template&lt;&gt;
concept assert/1 =     </initializer>
    <briefdescription>
<para><bold>assert</bold>(+ <emphasis>C</emphasis>) </para>
    </briefdescription>
    <detaileddescription>
<para>Same as <ref refid="classassertz_21" kindref="compound">assertz/1</ref> Adds clause <emphasis>C</emphasis> to the program If the predicate is undefined, declare it as dynamic New code should use <ref refid="classassertz_21" kindref="compound">assertz/1</ref> for better portability</para>
<para>Most Prolog systems only allow asserting clauses for dynamic predicates This is also as specified in the ISO standard YAP allows asserting clauses for static predicates, as long as the predicate is not in use and the language flag is <computeroutput>cprolog</computeroutput> Note that this feature is deprecated, if you want to assert clauses for static procedures you should use <ref refid="classassert__static_21" kindref="compound">assert_static/1</ref> </para>
    </detaileddescription>
    <location file="pl/preddyns.yap" line="1" column="1"/>
  </compounddef>
</doxygen>
