<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classassertz_21" kind="class" language="Prolog" prot="public">
    <compoundname>assertz/1</compoundname>
    <briefdescription>
<para><bold>assertz</bold>(+ <emphasis>C</emphasis>) </para>
    </briefdescription>
    <detaileddescription>
<para>defined in the <emphasis>ISO</emphasis> standard</para>
<para>Adds clause <emphasis>C</emphasis> to the end of the program If the predicate is undefined, it is declared dynamic (see <ref refid="classdynamic_21" kindref="compound">dynamic/1</ref> )</para>
<para>Most Prolog systems only allow asserting clauses for dynamic predicates This is also as specified in the ISO standard YAP also allows asserting clauses for static predicates, under the restriction that the static predicate may not be live in the stacks </para>
    </detaileddescription>
    <location file="/home/vsc/github/yap/pl/preddyns.yap" line="1" column="1" bodyfile="/home/vsc/github/yap/pl/preddyns.yap" bodystart="1" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
