<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="group__CohYroutining" kind="group">
    <compoundname>CohYroutining</compoundname>
    <title>Co-Routining</title>
    <innerclass refid="classfreeze_22" prot="public">freeze/2</innerclass>
    <innerclass refid="classdif_22" prot="public">dif/2</innerclass>
    <innerclass refid="classwhen_22" prot="public">when/2</innerclass>
    <innerclass refid="classwait_21" prot="public">wait/1</innerclass>
    <innerclass refid="classfrozen_22" prot="public">frozen/2</innerclass>
    <briefdescription>
<para>Prolog uses a simple left-to-right flow of control. </para>
    </briefdescription>
    <detaileddescription>
<para>It is sometimes convenient to change this control so that goals will only execute when sufficiently instantiated This may result in a more &quot;data-driven&quot; execution, or may be necessary to correctly implement extensions such as negation by failure</para>
<para>Initially, YAP used a separate mechanism for co-routining Nowadays, YAP uses attributed variables to implement co-routining</para>
    </detaileddescription>
  </compounddef>
</doxygen>
