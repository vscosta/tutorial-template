<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classlist__to__heap_22" kind="class" language="Prolog" prot="public">
    <compoundname>list_to_heap/2</compoundname>
    <briefdescription>
<para><bold>list_to_heap</bold>(+ <emphasis>List</emphasis>, - <emphasis>Heap</emphasis>) </para>
    </briefdescription>
    <detaileddescription>
<para>% takes a list of Key-Datum pairs (such as keysort could be used to sort) and forms them into a heap We could do that a wee bit faster by keysorting the list and building the tree directly, but this algorithm makes it obvious that the result is a heap, and could be adapted for use when the ordering predicate is not <computeroutput>@&lt;</computeroutput> and hence <ref refid="classkeysort_22" kindref="compound">keysort/2</ref> is inapplicable </para>
    </detaileddescription>
    <location file="/home/vsc/github/yap/library/heaps.yap" line="1" column="1" bodyfile="/home/vsc/github/yap/library/heaps.yap" bodystart="1" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
