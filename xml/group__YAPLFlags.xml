<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="group__YAPLFlags" kind="group">
    <compoundname>YAPLFlags</compoundname>
    <title>YAP Thread-local flags</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__YAPLFlags_1gaf2513e62a1448cf370d64e6396abd828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(ALLOW_VARIABLE_NAME_AS_FUNCTOR_FLAG, &quot;allow_variable_name_as_functor&quot;, true, booleanFlag, &quot;false&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>ALLOW_VARIABLE_NAME_AS_FUNCTOR_FLAG</type>
        </param>
        <param>
          <type>&quot;allow_variable_name_as_functor&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>booleanFlag</type>
        </param>
        <param>
          <type>&quot;false&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; Allow constructs such as &apos;Functor( V )&apos; </para>
        </briefdescription>
        <detaileddescription>
<para>Functor is parsed as an atom The token <computeroutput>V</computeroutput> is still understood as a variable</para>
<para>Originally a SWI-Prolog flag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="39" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga8e5c60b69cc5e241353df2feaf878d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(AUTOLOAD_FLAG, &quot;autoload&quot;, true, booleanFlag, &quot;false&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>AUTOLOAD_FLAG</type>
        </param>
        <param>
          <type>&quot;autoload&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>booleanFlag</type>
        </param>
        <param>
          <type>&quot;false&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; set the system to look for undefined procedures </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="43" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga57fc4586b3a757b05efa36acfdf09f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(BREAK_LEVEL_FLAG, &quot;break_level&quot;, true, nat, &quot;0&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>BREAK_LEVEL_FLAG</type>
        </param>
        <param>
          <type>&quot;break_level&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>nat</type>
        </param>
        <param>
          <type>&quot;0&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; read-only flag, that tells if Prolog is in an inner top-level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="48" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1gacdd985e380082cd56626bf97fb8a3228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(COMPILER_TOP_LEVEL_FLAG, &quot;compiler_top_level&quot;, true, filler, &quot;[]&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>COMPILER_TOP_LEVEL_FLAG</type>
        </param>
        <param>
          <type>&quot;compiler_top_level&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>filler</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; read-write flag, that allows changing the compiler top_level if Prolog is in an inner top-level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga2c69cc07dcbabbade6eb2b99b1c75c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(CALL_COUNTING_FLAG, &quot;call_counting&quot;, true, booleanFlag, &quot;true&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>CALL_COUNTING_FLAG</type>
        </param>
        <param>
          <type>&quot;call_counting&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>booleanFlag</type>
        </param>
        <param>
          <type>&quot;true&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; Predicates compiled with this flag set maintain a counter on the numbers of proceduree calls and of retries </para>
        </briefdescription>
        <detaileddescription>
<para>These counters are decreasing counters, and they can be used as timers Three counters are available:</para>
<para>calls: number of predicate calls since execution started or since system was reset; retries: number of retries for predicates called since execution started or since counters were reset;</para>
<para>calls_and_retries: count both on predicate calls and retries These counters can be used to find out how many calls a certain goal takes to execute They can also be force the computation to stop </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1gaeb831b134c2e91c80198c8d7510d73c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(COMPILING_FLAG, &quot;compiling&quot;, false, compiling,&quot;false&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>COMPILING_FLAG</type>
        </param>
        <param>
          <type>&quot;compiling&quot;</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>compiling</type>
        </param>
        <param>
          <type>&quot;false&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; Indicates YAP is running within the compiler </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="78" column="2"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga0dd69eb6ce6cd76ff245aa3e7351460e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(DEBUG_FLAG, &quot;debug&quot;, true, booleanFlag, &quot;false&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>DEBUG_FLAG</type>
        </param>
        <param>
          <type>&quot;debug&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>booleanFlag</type>
        </param>
        <param>
          <type>&quot;false&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; </para>
        </briefdescription>
        <detaileddescription>
<para>whether debugging is <computeroutput>true</computeroutput> or <computeroutput>false</computeroutput></para>
<para>If <emphasis>Value</emphasis> is bound to <computeroutput>true</computeroutput> enable debugging, and if it is bound to <computeroutput>false</computeroutput> disable debugging </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="87" column="3"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1gabb07d4ccaa8656af985a0a428b01f26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(ENCODING_FLAG, &quot;encoding&quot;, true, isatom, &quot;utf8&quot;, getenc)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>ENCODING_FLAG</type>
        </param>
        <param>
          <type>&quot;encoding&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>isatom</type>
        </param>
        <param>
          <type>&quot;utf8&quot;</type>
        </param>
        <param>
          <type>getenc</type>
        </param>
        <briefdescription>
<para>&lt; support for coding systens, YAP relies on UTF-8 internally </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="94" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1gaccc01b0eaebf1e72ead4028d1d9afcc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(FILE_ERRORS_FLAG, &quot;file_errors&quot;, true, febooleanFlag, &quot;fail&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>FILE_ERRORS_FLAG</type>
        </param>
        <param>
          <type>&quot;file_errors&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>febooleanFlag</type>
        </param>
        <param>
          <type>&quot;fail&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; <computeroutput>exit</computeroutput> if failing to open a fail generates an excption; or <computeroutput>fail</computeroutput> otherwise </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="102" column="3"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1gaa7040776b932fca00b7da4259d739091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(LANGUAGE_MODE_FLAG, &quot;language_mode&quot;, true, isatom, &quot;yap&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>LANGUAGE_MODE_FLAG</type>
        </param>
        <param>
          <type>&quot;language_mode&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>isatom</type>
        </param>
        <param>
          <type>&quot;yap&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; </para>
        </briefdescription>
        <detaileddescription>
<para>whether native mode or trying to emulate a different Prolog </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="111" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga1404a068129eb86eca7f097e26022b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(EXPAND_FILE_NAME_FLAG, &quot;expand_file_name&quot;, true, booleanFlag, &quot;true&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>EXPAND_FILE_NAME_FLAG</type>
        </param>
        <param>
          <type>&quot;expand_file_name&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>booleanFlag</type>
        </param>
        <param>
          <type>&quot;true&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; obtain the absol ute file name before loading a file </para>
        </briefdescription>
        <detaileddescription>
<para><orderedlist>
<listitem></listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="118" column="4"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga5722633cbddcc8f34a68605bf8ae9a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(STACK_DUMP_ON_ERROR_FLAG, &quot;stack_dump_on_error&quot;, true, booleanFlag, &quot;true&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>STACK_DUMP_ON_ERROR_FLAG</type>
        </param>
        <param>
          <type>&quot;stack_dump_on_error&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>booleanFlag</type>
        </param>
        <param>
          <type>&quot;true&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; error handler should generate a report on stack status </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="122" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1gaf68fd77d5b152e93f5ebb0d1f85696ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(STREAM_TYPE_CHECK_FLAG, &quot;stream_type_check&quot;, true, isatom, &quot;loose&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>STREAM_TYPE_CHECK_FLAG</type>
        </param>
        <param>
          <type>&quot;stream_type_check&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>isatom</type>
        </param>
        <param>
          <type>&quot;loose&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; If <computeroutput>true</computeroutput> show a stack dump when YAP finds an error </para>
        </briefdescription>
        <detaileddescription>
<para>The default is <computeroutput>off</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="128" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1gad2916a29ad42e574de8c113eabb3dd28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(SYNTAX_ERRORS_FLAG, &quot;syntax_errors&quot;, true, synerr, &quot;error&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>SYNTAX_ERRORS_FLAG</type>
        </param>
        <param>
          <type>&quot;syntax_errors&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>synerr</type>
        </param>
        <param>
          <type>&quot;error&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; </para>
        </briefdescription>
        <detaileddescription>
<para>Control action to be taken after syntax errors when executing <ref refid="classread_21" kindref="compound">read/1</ref> , <computeroutput><ref refid="classread_22" kindref="compound">read/2</ref> </computeroutput>, or <computeroutput><ref refid="classread__term_23" kindref="compound">read_term/3</ref> </computeroutput>:<itemizedlist>
<listitem><para><computeroutput>dec10</computeroutput> Report the syntax error and retry reading the term</para>
</listitem><listitem><para><computeroutput>fail</computeroutput> Report the syntax error and fail</para>
</listitem><listitem><para><computeroutput>error</computeroutput> Report the syntax error and generate an error (default)</para>
</listitem><listitem><para><computeroutput>quiet</computeroutput> Just fail </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="139" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga339e2153fdbad38cb01668aba687b134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(TYPEIN_MODULE_FLAG, &quot;typein_module&quot;, true, isatom, &quot;user&quot;, typein)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>TYPEIN_MODULE_FLAG</type>
        </param>
        <param>
          <type>&quot;typein_module&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>isatom</type>
        </param>
        <param>
          <type>&quot;user&quot;</type>
        </param>
        <param>
          <type>typein</type>
        </param>
        <briefdescription>
<para>&lt; </para>
        </briefdescription>
        <detaileddescription>
<para>If bound, set the current working or type-in module to the argument, which must be an atom If unbound, unify the argument with the current type-in module, that is, with the module YAP will execute goals by default </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="148" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga2531dee3e2898c6a6ab32fd5ef767cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(VERBOSE_FLAG, &quot;verbose&quot;, true, isatom, &quot;normal&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>VERBOSE_FLAG</type>
        </param>
        <param>
          <type>&quot;verbose&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>isatom</type>
        </param>
        <param>
          <type>&quot;normal&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>normal</computeroutput> allow printing of informational and banner messages, such as the ones that are printed when consulting If <computeroutput>silent</computeroutput> disable printing these messages It is <computeroutput>normal</computeroutput> by default 1except if YAP is booted with the <computeroutput>-q</computeroutput> or <computeroutput>-L</computeroutput> flag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="160" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga6465c5d299ce5ebb69ff27fb9aa48d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(VERBOSE_FILE_SEARCH_FLAG, &quot;verbose_file_search&quot;, true, booleanFlag, &quot;false&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>VERBOSE_FILE_SEARCH_FLAG</type>
        </param>
        <param>
          <type>&quot;verbose_file_search&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>booleanFlag</type>
        </param>
        <param>
          <type>&quot;false&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>If `true` allow printing of informational messages when
searching for file names. If `false` disable printing these
messages. It is `false` by default.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="169" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga4002a25573f914e9b82050e32ceb63df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(VERBOSE_LOAD_FLAG, &quot;verbose_load&quot;, true, booleanFlag, &quot;true&quot;, NULL)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>VERBOSE_LOAD_FLAG</type>
        </param>
        <param>
          <type>&quot;verbose_load&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>booleanFlag</type>
        </param>
        <param>
          <type>&quot;true&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
<para>&lt; </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim> If `true` allow printing of informational messages when
 consulting files. If `false` disable printing these messages. It
 is `true` by default except if YAP is booted with the `-L` or `L`
 flags.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="180" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1gae5a9b74fa7de375eeb651430340fe52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(USER_ERROR_FLAG, &quot;user_error&quot;, true, stream, &quot;user_error&quot;, set_error_stream)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>USER_ERROR_FLAG</type>
        </param>
        <param>
          <type>&quot;user_error&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>stream</type>
        </param>
        <param>
          <type>&quot;user_error&quot;</type>
        </param>
        <param>
          <type>set_error_stream</type>
        </param>
        <briefdescription>
<para>&lt; </para>
        </briefdescription>
        <detaileddescription>
<para>If the second argument is bound to a stream, set user_error to this stream If the second argument is unbound, unify the argument with the current user_error stream By default, the user_error stream is set to a stream corresponding to the Unix <computeroutput>stderr</computeroutput> stream The next example shows how to use this flag:</para>
<para><programlisting><codeline><highlight class="normal">?-<sp/>open(<sp/>&apos;/dev/null&apos;,<sp/>append,<sp/>Error,</highlight></codeline>
<codeline><highlight class="normal">[alias(mauri_tripa)]<sp/>).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Error<sp/>=<sp/>&apos;$stream&apos;(3)<sp/>?<sp/>;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">no</highlight></codeline>
<codeline><highlight class="normal">?-<sp/>set_prolog_flag(user_error,<sp/>mauri_tripa).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">close(mauri_tripa).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">yes</highlight></codeline>
<codeline><highlight class="normal">?-</highlight></codeline>
</programlisting> We execute three commands First, we open a stream in write mode and give it an alias, in this case <computeroutput>mauri_tripa</computeroutput> Next, we set user_error to the stream via the alias Note that after we did so prompts from the system were redirected to the stream <computeroutput>mauri_tripa</computeroutput> Last, we close the stream At this point, YAP automatically redirects the user_error alias to the original <computeroutput>stderr</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="213" column="5"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga519198679174f6b1b77ee7681f5112c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(USER_INPUT_FLAG, &quot;user_input&quot;, true, stream, &quot;user_input&quot;, set_input_stream)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>USER_INPUT_FLAG</type>
        </param>
        <param>
          <type>&quot;user_input&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>stream</type>
        </param>
        <param>
          <type>&quot;user_input&quot;</type>
        </param>
        <param>
          <type>set_input_stream</type>
        </param>
        <briefdescription>
<para>&lt; If the second argument is bound to a stream, set user_input to this stream </para>
        </briefdescription>
        <detaileddescription>
<para>If the second argument is unbound, unify the argument with the current user_input stream See the user_error_flag for more details </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="221" column="7"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPLFlags_1ga6c2d3e19437321c35e7f603d52064878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAP_FLAG</definition>
        <argsstring>(USER_OUTPUT_FLAG, &quot;user_output&quot;, true, stream, &quot;user_output&quot;, set_output_stream)</argsstring>
        <name>YAP_FLAG</name>
        <param>
          <type>USER_OUTPUT_FLAG</type>
        </param>
        <param>
          <type>&quot;user_output&quot;</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>stream</type>
        </param>
        <param>
          <type>&quot;user_output&quot;</type>
        </param>
        <param>
          <type>set_output_stream</type>
        </param>
        <briefdescription>
<para>&lt; If the second argument is bound to a stream, set user_output to this stream </para>
        </briefdescription>
        <detaileddescription>
<para>If the second argument is unbound, unify the argument with the current user_output stream </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="H/YapLFlagInfo.h" line="229" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Prolog flags that can take different values in different threads and/or modules. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
