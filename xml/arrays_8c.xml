<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="arrays_8c" kind="file" language="C++">
    <compoundname>arrays.c</compoundname>
    <includes refid="Yap_8h" local="yes">Yap.h</includes>
    <includes refid="YapCompoundTerm_8h" local="yes">YapCompoundTerm.h</includes>
    <includes refid="Yatom_8h" local="yes">Yatom.h</includes>
    <includes refid="clause_8h" local="yes">clause.h</includes>
    <includes refid="YapEval_8h" local="yes">YapEval.h</includes>
    <includes refid="heapgc_8h" local="yes">heapgc.h</includes>
    <incdepgraph>
      <node id="1">
        <label>C/arrays.c</label>
        <link refid="arrays_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Atoms.h</label>
        <link refid="Atoms_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Regs.h</label>
        <link refid="Regs_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ScannerTypes.h</label>
        <link refid="ScannerTypes_8h_source"/>
      </node>
      <node id="27">
        <label>TermExt.h</label>
        <link refid="TermExt_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Yap.h</label>
        <link refid="Yap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>YapArenas.h</label>
        <link refid="YapArenas_8h_source"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>YapCompoundTerm.h</label>
        <link refid="YapCompoundTerm_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>YapEval.h</label>
        <link refid="YapEval_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>YapFlags.h</label>
        <link refid="YapFlags_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>YapGFlagInfo.h</label>
        <link refid="YapGFlagInfo_8h"/>
      </node>
      <node id="36">
        <label>YapHandles.h</label>
        <link refid="YapHandles_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>YapHeap.h</label>
        <link refid="YapHeap_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>YapLFlagInfo.h</label>
        <link refid="YapLFlagInfo_8h"/>
      </node>
      <node id="26">
        <label>YapOpcodes.h</label>
        <link refid="YapOpcodes_8h_source"/>
      </node>
      <node id="35">
        <label>YapSignals.h</label>
        <link refid="YapSignals_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>YapTags.h</label>
        <link refid="YapTags_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>YapText.h</label>
        <link refid="YapText_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Yapproto.h</label>
        <link refid="Yapproto_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>Yatom.h</label>
        <link refid="Yatom_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>alloc.h</label>
        <link refid="alloc_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>amidefs.h</label>
        <link refid="amidefs_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>amiops.h</label>
        <link refid="amiops_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>arrays.h</label>
        <link refid="arrays_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>clause.h</label>
        <link refid="clause_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>corout.h</label>
        <link refid="corout_8h_source"/>
      </node>
      <node id="42">
        <label>generated/h0globals.h</label>
        <link refid="h0globals_8h_source"/>
      </node>
      <node id="41">
        <label>generated/h0struct.h</label>
        <link refid="h0struct_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>generated/hlocals.h</label>
        <link refid="hlocals_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>generated/tatoms.h</label>
        <link refid="tatoms_8h_source"/>
      </node>
      <node id="34">
        <label>gprof.h</label>
        <link refid="gprof_8h_source"/>
      </node>
      <node id="57">
        <label>heapgc.h</label>
        <link refid="heapgc_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>inline-only.h</label>
        <link refid="inline-only_8h_source"/>
      </node>
      <node id="44">
        <label>locals.h</label>
        <link refid="locals_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>nolocks.h</label>
        <link refid="nolocks_8h_source"/>
      </node>
      <node id="54">
        <label>terms.h</label>
        <link refid="terms_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>threads.h</label>
        <link refid="threads_8h_source"/>
      </node>
      <node id="49">
        <label>GitSHA1.h</label>
        <link refid="GitSHA1_8h_source"/>
      </node>
      <node id="6">
        <label>YapDefs.h</label>
        <link refid="YapDefs_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>YapError.h</label>
        <link refid="YapError_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>YapErrors.h</label>
        <link refid="YapErrors_8h"/>
      </node>
      <node id="18">
        <label>YapFormat.h</label>
        <link refid="YapFormat_8h_source"/>
      </node>
      <node id="20">
        <label>YapInit.h</label>
        <link refid="YapInit_8h"/>
      </node>
      <node id="9">
        <label>YapTerm.h</label>
        <link refid="YapTerm_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>YapUTF8.h</label>
        <link refid="YapUTF8_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>../os/encoding.h</label>
        <link refid="encoding_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>YapConfig.h</label>
      </node>
      <node id="13">
        <label>YapIOConfig.h</label>
      </node>
      <node id="10">
        <label>YapTermConfig.h</label>
      </node>
      <node id="11">
        <label>config.h</label>
      </node>
      <node id="45">
        <label>dlocals.h</label>
      </node>
      <node id="28">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>string.h</label>
      </node>
      <node id="52">
        <label>utf8proc.h</label>
      </node>
      <node id="22">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="arrays_8c_1ad65a8842cc674e3ddf69355898c0ecbf" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int errno</definition>
        <argsstring></argsstring>
        <name>errno</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="120" column="12" declfile="C/arrays.c" declline="120" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a347ec017012d90fbe7bc7ab859c357f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int compile_array_refs</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>compile_array_refs</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="2406" column="12" bodyfile="C/arrays.c" bodystart="2406" bodyend="2409" declfile="C/arrays.c" declline="132" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a1825967392df27554b5543641e3e11d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int array_refs_compiled</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>array_refs_compiled</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="2411" column="12" bodyfile="C/arrays.c" bodystart="2411" bodyend="2411" declfile="C/arrays.c" declline="133" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a79aa1add0042dc3bc381d50f49c1212e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int sync_mmapped_arrays</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>sync_mmapped_arrays</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="2413" column="12" bodyfile="C/arrays.c" bodystart="2413" bodyend="2422" declfile="C/arrays.c" declline="134" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a3edaecd02103501f3fc5b23a32992961" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int create_array</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>create_array</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
<para>This file works together with <ref refid="arrays_8yap" kindref="compound">pl/arrays.yap</ref> and <ref refid="arrays_8h_source" kindref="compound">arrays.h</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>YAP supports a very simple notion of arrays Arrays may be allocated dynamically or statically:</para>
<para>o anonymous arrays are created during execution and allocated in the heap They have the lifetime of any other other heap object Any term can be an argument to a dynamic array</para>
<para>Dynamic arrays are named as a free variable and are initialized with free variables</para>
<para>o named arrays are created during execution but allocated in the code space They have the lifetime of an heap object Any term can be an argument to a dynamic array</para>
<para>Named arrays are named with atoms and are initialized with free variables</para>
<para><itemizedlist>
<listitem><para>static arrays are allocated in the heap Their space is never recovered unless explicitly said so by the program Arguments to these arrays must have fixed size, and can only be atomic (at least for now)</para>
</listitem></itemizedlist>
</para>
<para>Static arrays can be named through an atom They are initialized with []</para>
<para>Users create arrays by a declaration X array Arity If X is an atom A, then this it is a static array and A&apos;s the array name, otherwise X refers to a dynamic array</para>
<para>As in C, arrays start counting from 0</para>
<para>Users access arrays by a token X[I] or a[I], this token can appear anywhere within the computation, so a[2] = X[3*4] means that the second element of global array a should unify with the 12th element of array X The mechanism used to implement this is the same mechanism used to implement suspension variables</para>
<para>==== Representation:</para>
<para>Dynamic Arrays are represented as a compound term of arity N, where N is the size of the array Even so, I will not include array bound checking for now</para>
<para><programlisting><codeline><highlight class="normal">|--------------------------------------------------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>$ARRAY/N|....</highlight></codeline>
<codeline><highlight class="normal">|______________________________________________________________</highlight></codeline>
</programlisting></para>
<para>Unbound Var is used as a place to point to</para>
<para>Static Arrays are represented as a special property for an atom, with field size and</para>
<para>A term of the form X[I] is represented as a Reference pointing to the compound term:</para>
<para>[]([I],X) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="951" column="12" bodyfile="C/arrays.c" bodystart="951" bodyend="1064" declfile="C/arrays.c" declline="201" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1ad8860562580811a50c31fc582b42c2ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int create_mmapped_array</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>create_mmapped_array</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1445" column="12" bodyfile="C/arrays.c" bodystart="1445" bodyend="1585" declfile="C/arrays.c" declline="202" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a97dfabafd0485b7ffa2c69dd94b23955" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int array_references</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>array_references</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1727" column="12" bodyfile="C/arrays.c" bodystart="1727" bodyend="1733" declfile="C/arrays.c" declline="203" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a70a1e3db7a29f84eb2d57572904b7884" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int static_array</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>static_array</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1079" column="1" bodyfile="C/arrays.c" bodystart="1079" bodyend="1204" declfile="C/arrays.c" declline="204" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1ad1ab8c3837ae030e8dbe1cd6d2cf343a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int resize_static_array</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>resize_static_array</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1287" column="12" bodyfile="C/arrays.c" bodystart="1287" bodyend="1338" declfile="C/arrays.c" declline="205" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a59604dab48ca875015d870bff0a8420f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int close_static_array</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>close_static_array</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1385" column="12" bodyfile="C/arrays.c" bodystart="1385" bodyend="1430" declfile="C/arrays.c" declline="206" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1ad287854363e4ddb3720779bd0e05e80a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int access_array</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>access_array</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="207" column="12" declfile="C/arrays.c" declline="207" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1acde5560b59720f3982a1a392f9725c1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int assign_static</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>assign_static</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1751" column="12" bodyfile="C/arrays.c" bodystart="1751" bodyend="2061" declfile="C/arrays.c" declline="208" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1accd6af6259e4615c9a50dc0ad74dd5f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int assign_dynamic</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>assign_dynamic</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="2063" column="12" bodyfile="C/arrays.c" bodystart="2063" bodyend="2198" declfile="C/arrays.c" declline="209" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1af5b282765b6c06aaad060dd6b7ff8b63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>static Term GetTermFromArray</definition>
        <argsstring>(DBTerm *ref USES_REGS)</argsstring>
        <name>GetTermFromArray</name>
        <param>
          <type><ref refid="structDB__TERM" kindref="compound">DBTerm</ref> *ref</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="318" column="13" bodyfile="C/arrays.c" bodystart="318" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1adf9d0cc17090f85947e09d6a3bfaa5a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>static Term GetNBTerm</definition>
        <argsstring>(live_term *ar, Int indx USES_REGS)</argsstring>
        <name>GetNBTerm</name>
        <param>
          <type><ref refid="structlive__term" kindref="compound">live_term</ref> *</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>Int indx</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="335" column="13" bodyfile="C/arrays.c" bodystart="335" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a3b8c88d2b46dcf5a128f64ac73a94dad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *</type>
        <definition>static ArrayEntry * GetArrayEntry</definition>
        <argsstring>(Atom at, int owner)</argsstring>
        <name>GetArrayEntry</name>
        <param>
          <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
          <declname>at</declname>
        </param>
        <param>
          <type>int</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="368" column="19" bodyfile="C/arrays.c" bodystart="368" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a842377938ba888db8015067e1a51c61f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>static Term AccessNamedArray</definition>
        <argsstring>(Atom a, Int indx USES_REGS)</argsstring>
        <name>AccessNamedArray</name>
        <param>
          <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>Int indx</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="385" column="13" bodyfile="C/arrays.c" bodystart="385" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a8eeb247c7ab7999300e7f746ce3be29a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int array_arg</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>array_arg</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="555" column="12" bodyfile="C/arrays.c" bodystart="555" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a2c47ba24ddf40de82e397fcb7c788f78" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InitNamedArray</definition>
        <argsstring>(ArrayEntry *p, size_t ndims, size_t dims[] USES_REGS)</argsstring>
        <name>InitNamedArray</name>
        <param>
          <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>size_t dims[]</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="590" column="13" bodyfile="C/arrays.c" bodystart="590" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a8cc2bd4c1337222562e2c62f254e9ce7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CreateNamedArray</definition>
        <argsstring>(PropEntry *pp, size_t ndims, size_t dims[], AtomEntry *ae USES_REGS)</argsstring>
        <name>CreateNamedArray</name>
        <param>
          <type><ref refid="structPropEntryStruct" kindref="compound">PropEntry</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dims</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="Atoms_8h_1a080f5b2e897dec7704f0ea6f6855f3b7" kindref="member">AtomEntry</ref> *ae</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="616" column="13" bodyfile="C/arrays.c" bodystart="616" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a65d8c52105ba929c80539a7b7d5ca223" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AllocateStaticArraySpace</definition>
        <argsstring>(ArrayEntry *p, size_t asize, static_array_types atype, void *old USES_REGS)</argsstring>
        <name>AllocateStaticArraySpace</name>
        <param>
          <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>asize</declname>
        </param>
        <param>
          <type>static_array_types</type>
          <declname>atype</declname>
        </param>
        <param>
          <type>void *old</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="635" column="13" bodyfile="C/arrays.c" bodystart="635" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1abf6fef6bd5c58a0965487ba10c5336d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int update_all</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>update_all</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="687" column="12" bodyfile="C/arrays.c" bodystart="687" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a7e42e76563c7129f4ab62c558d4d2ff8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *</type>
        <definition>static ArrayEntry * CreateStaticArray</definition>
        <argsstring>(AtomEntry *ae, size_t ndims, size_t *dims, size_t sz, static_array_types type, CODEADDR start_addr, ArrayEntry *p USES_REGS)</argsstring>
        <name>CreateStaticArray</name>
        <param>
          <type><ref refid="Atoms_8h_1a080f5b2e897dec7704f0ea6f6855f3b7" kindref="member">AtomEntry</ref> *</type>
          <declname>ae</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>static_array_types</type>
          <declname>type</declname>
        </param>
        <param>
          <type>CODEADDR</type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *p</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="778" column="19" bodyfile="C/arrays.c" bodystart="778" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a2c365baad46c2bd1541bfe3936919b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *</type>
        <definition>ArrayEntry * Yap_StaticArray</definition>
        <argsstring>(Atom na, static_array_types type, size_t sz, size_t ndims, size_t *dims, CODEADDR start_addr, ArrayEntry *p)</argsstring>
        <name>Yap_StaticArray</name>
        <param>
          <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
          <declname>na</declname>
        </param>
        <param>
          <type>static_array_types</type>
          <declname>type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>CODEADDR</type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="821" column="12" bodyfile="C/arrays.c" bodystart="821" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a9b6d2ce897bd8ce3e662b2234500a301" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ResizeStaticArray</definition>
        <argsstring>(ArrayEntry *pp, size_t ndims, size_t *dims, size_t size USES_REGS)</argsstring>
        <name>ResizeStaticArray</name>
        <param>
          <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>size_t size</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="835" column="13" bodyfile="C/arrays.c" bodystart="835" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a76ba974019c73cb5fb74700a57145df6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ClearStaticArray</definition>
        <argsstring>(ArrayEntry *pp)</argsstring>
        <name>ClearStaticArray</name>
        <param>
          <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="859" column="13" bodyfile="C/arrays.c" bodystart="859" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1ada4487cc362200b2311e421ac5b30253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarray__entry" kindref="compound">ArrayEntry</ref> *</type>
        <definition>ArrayEntry * Yap_StaticVector</definition>
        <argsstring>(Atom Name, size_t size, static_array_types props)</argsstring>
        <name>Yap_StaticVector</name>
        <param>
          <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
          <declname>Name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>static_array_types</type>
          <declname>props</declname>
        </param>
        <briefdescription>
<para>create a new vectir in a given name Name </para>
        </briefdescription>
        <detaileddescription>
<para>If one exists, destroy prrexisting onr </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1208" column="14" bodyfile="C/arrays.c" bodystart="1208" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a2160f6d35740ba1df3992821d617bdad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int static_array_properties</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>static_array_properties</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1236" column="12" bodyfile="C/arrays.c" bodystart="1236" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a21a58d6ecafc0543011de802b5205d17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int clear_static_array</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>clear_static_array</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1349" column="12" bodyfile="C/arrays.c" bodystart="1349" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a9935cf68c22327a16a538e1293812b1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void replace_array_references_complex</definition>
        <argsstring>(register CELL *pt0, register CELL *pt0_end, register CELL *ptn, Term Var USES_REGS)</argsstring>
        <name>replace_array_references_complex</name>
        <param>
          <type>register CELL *</type>
          <declname>pt0</declname>
        </param>
        <param>
          <type>register CELL *</type>
          <declname>pt0_end</declname>
        </param>
        <param>
          <type>register CELL *</type>
          <declname>ptn</declname>
        </param>
        <param>
          <type>Term Var</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1588" column="13" bodyfile="C/arrays.c" bodystart="1588" bodyend="1687"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1abf9e1609eee478b69eae12432f573247" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>static Term replace_array_references</definition>
        <argsstring>(Term t0 USES_REGS)</argsstring>
        <name>replace_array_references</name>
        <param>
          <type>Term t0</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="1696" column="13" bodyfile="C/arrays.c" bodystart="1696" bodyend="1725"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1acb2f62b23a73e018d53e29d08f4bbccf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int add_to_array_element</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>add_to_array_element</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="2223" column="12" bodyfile="C/arrays.c" bodystart="2223" bodyend="2404"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a960490dc6aa714b13d1459043d3e4521" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int static_array_to_term</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>static_array_to_term</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="2435" column="12" bodyfile="C/arrays.c" bodystart="2435" bodyend="2582"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1a3c0cd2ff7b85c5dbb9df8ecdfc600f9d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int static_array_location</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>static_array_location</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="2590" column="12" bodyfile="C/arrays.c" bodystart="2590" bodyend="2614"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8c_1aab6ddbc5380b85af6237caed747acc3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_InitArrayPreds</definition>
        <argsstring>(void)</argsstring>
        <name>Yap_InitArrayPreds</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/arrays.c" line="2616" column="7" bodyfile="C/arrays.c" bodystart="2616" bodyend="2639"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>old array implementation </para>
    </briefdescription>
    <detaileddescription>
<para>Use the <ref refid="matrix_8yap" kindref="compound">library/matrix.yap</ref> library for a higher level implementation</para>
<para><verbatim>@defgroup YAPArrays Named Arrays
@ingroup YapExtensions
</verbatim></para>
<para>The YAP system includes experimental support for arrays The support is enabled with the option <computeroutput>YAP_ARRAYS</computeroutput> xf There are two very distinct forms of arrays in YAP The <emphasis>dynamic arrays</emphasis> are a different way to access compound terms created during the execution Like any other terms, any bindings to these terms and eventually the terms themselves will be destroyed during backtracking Our goal in supporting dynamic arrays is twofold First, they provide an alternative to the standard <ref refid="classarg_23" kindref="compound">arg/3</ref> built-in Second, because dynamic arrays may have name that are globally visible, a dynamic array can be visible from any point in the program In more detail, the clause</para>
<para><programlisting><codeline><highlight class="normal">g(X)<sp/>:-<sp/>array_element(a,2,X).</highlight></codeline>
</programlisting> will succeed as long as the programmer has used the built-in <computeroutput><ref refid="classarray_22" kindref="compound">array/2</ref> </computeroutput> to create an array term with at least 3 elements in the current environment, and the array was associated with the name <computeroutput>a</computeroutput> The element <computeroutput>X</computeroutput> is a Prolog term, so one can bind it and any such bindings will be undone when backtracking Note that dynamic arrays do not have a type: each element may be any Prolog term</para>
<para>The <emphasis>static arrays</emphasis> are an extension of the database They provide a compact way for manipulating data-structures formed by characters, integers, or floats imperatively They can also be used to provide two-way communication between YAP and external programs through shared memory</para>
<para>In order to efficiently manage space elements in a static array must have a type Currently, elements of static arrays in YAP should have one of the following predefined types:</para>
<para><itemizedlist>
<listitem><para><computeroutput>byte</computeroutput>: an 8-bit signed character</para>
</listitem><listitem><para><computeroutput>unsigned_byte</computeroutput>: an 8-bit unsigned character</para>
</listitem><listitem><para><computeroutput>int</computeroutput>: Prolog integers Size would be the natural size for the machine&apos;s architecture</para>
</listitem><listitem><para><computeroutput>float</computeroutput>: Prolog floating point number Size would be equivalent to a double in <computeroutput>C</computeroutput></para>
</listitem><listitem><para><computeroutput>atom</computeroutput>: a Prolog atom</para>
</listitem><listitem><para><computeroutput>dbref</computeroutput>: an internal database reference</para>
</listitem><listitem><para><computeroutput>term</computeroutput>: a generic Prolog term Note that this will term will not be stored in the array itself, but instead will be stored in the Prolog internal database</para>
</listitem></itemizedlist>
</para>
<para>Arrays may be <emphasis>named</emphasis> or <emphasis>anonymous</emphasis> Most arrays will be <emphasis>named</emphasis>, that is associated with an atom that will be used to find the array Anonymous arrays do not have a name, and they are only of interest if the <computeroutput>TERM_EXTENSIONS</computeroutput> compilation flag is enabled In this case, the unification and parser are extended to replace occurrences of Prolog terms of the form <computeroutput>X[I]</computeroutput> by run-time calls to <ref refid="classarray__element_23" kindref="compound">array_element/3</ref> , so that one can use array references instead of extra calls to <ref refid="classarg_23" kindref="compound">arg/3</ref> As an example:</para>
<para><programlisting><codeline><highlight class="normal">g(X,Y,Z,I,J)<sp/>:-</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>X[I]<sp/>is<sp/>Y[J]+Z[I].</highlight></codeline>
</programlisting> should give the same results as:</para>
<para><programlisting><codeline><highlight class="normal">G(X,Y,Z,I,J)<sp/>:-</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_element(X,I,E1),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_element(Y,J,E2),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_element(Z,I,E3),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E1<sp/>is<sp/>E2+E3.</highlight></codeline>
</programlisting></para>
<para>Note that the only limitation on array size are the stack size for dynamic arrays; and, the heap size for static (not memory mapped) arrays Memory mapped arrays are limited by available space in the file system and in the virtual memory space</para>
<para>The following predicates manipulate arrays:</para>
<para>[toc]</para>
    </detaileddescription>
    <location file="C/arrays.c"/>
  </compounddef>
</doxygen>
