<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="group__Indexing" kind="group">
    <compoundname>Indexing</compoundname>
    <title>Indexing</title>
    <briefdescription>
<para>The indexation mechanism restricts the set of clauses to be tried in a procedure by using information about the status of the instantiated arguments of the goal. </para>
    </briefdescription>
    <detaileddescription>
<para>These arguments are then used as a key, selecting a restricted set of a clauses from all the clauses forming the procedure</para>
<para>As an example, the two clauses for concatenate:</para>
<para><programlisting><codeline><highlight class="normal">concatenate([],L,L).</highlight></codeline>
<codeline><highlight class="normal">concatenate([H|<ref refid="classT" kindref="compound">T</ref>],A,[H|NT])<sp/>:-<sp/>concatenate(<ref refid="classT" kindref="compound">T</ref>,A,NT).</highlight></codeline>
</programlisting></para>
<para>If the first argument for the goal is a list, then only the second clause is of interest If the first argument is the nil atom, the system needs to look only for the first clause The indexation generates instructions that test the value of the first argument, and then proceed to a selected clause, or group of clauses</para>
<para>Note that if the first argument was a free variable, then both clauses should be tried In general, indexation will not be useful if the first argument is a free variable</para>
<para>When activating a predicate, a Prolog system needs to store state information This information, stored in a structure known as choice point or fail point, is necessary when backtracking to other clauses for the predicate The operations of creating and using a choice point are very expensive, both in the terms of space used and time spent Creating a choice point is not necessary if there is only a clause for the predicate as there are no clauses to backtrack to With indexation, this situation is extended: in the example, if the first argument was the atom nil, then only one clause would really be of interest, and it is pointless to create a choice point This feature is even more useful if the first argument is a list: without indexation, execution would try the first clause, creating a choice point The clause would fail, the choice point would then be used to restore the previous state of the computation and the second clause would be tried The code generated by the indexation mechanism would behave much more efficiently: it would test the first argument and see whether it is a list, and then proceed directly to the second clause</para>
<para>An important side effect concerns the use of &quot;cut&quot; In the above example, some programmers would use a &quot;cut&quot; in the first clause just to inform the system that the predicate is not backtrackable and force the removal the choice point just created As a result, less space is needed but with a great loss in expressive power: the &quot;cut&quot; would prevent some uses of the procedure, like generating lists through backtracking Of course, with indexation the &quot;cut&quot; becomes useless: the choice point is not even created</para>
<para>Indexation is also very important for predicates with a large number of clauses that are used like tables:</para>
<para><programlisting><codeline><highlight class="normal">logician(aristoteles,greek).</highlight></codeline>
<codeline><highlight class="normal">logician(frege,german).</highlight></codeline>
<codeline><highlight class="normal">logician(russel,english).</highlight></codeline>
<codeline><highlight class="normal">logician(godel,german).</highlight></codeline>
<codeline><highlight class="normal">logician(whitehead,english).</highlight></codeline>
</programlisting></para>
<para>An interpreter like C-Prolog, trying to answer the query:</para>
<para><programlisting><codeline><highlight class="normal">?-<sp/>logician(godel,X).</highlight></codeline>
</programlisting></para>
<para>would blindly follow the standard Prolog strategy, trying first the first clause, then the second, the third and finally finding the relevant clause Also, as there are some more clauses after the important one, a choice point has to be created, even if we know the next clauses will certainly fail A &quot;cut&quot; would be needed to prevent some possible uses for the procedure, like generating all logicians In this situation, the indexing mechanism generates instructions that implement a search table In this table, the value of the first argument would be used as a key for fast search of possibly matching clauses For the query of the last example, the result of the search would be just the fourth clause, and again there would be no need for a choice point</para>
<para>If the first argument is a complex term, indexation will select clauses just by testing its main functor However, there is an important exception: if the first argument of a clause is a list, the algorithm also uses the list&apos;s head if not a variable For instance, with the following clauses,</para>
<para><programlisting><codeline><highlight class="normal">rules([],B,B).</highlight></codeline>
<codeline><highlight class="normal">rules([n(N)|<ref refid="classT" kindref="compound">T</ref>],I,O)<sp/>:-<sp/>rules_for_noun(N,I,N),<sp/>rules(<ref refid="classT" kindref="compound">T</ref>,N,O).</highlight></codeline>
<codeline><highlight class="normal">rules([v(V)|<ref refid="classT" kindref="compound">T</ref>],I,O)<sp/>:-<sp/>rules_for_verb(V,I,N),<sp/>rules(<ref refid="classT" kindref="compound">T</ref>,N,O).</highlight></codeline>
<codeline><highlight class="normal">rules([q(Q)|<ref refid="classT" kindref="compound">T</ref>],I,O)<sp/>:-<sp/>rules_for_qualifier(Q,I,N),<sp/>rules(<ref refid="classT" kindref="compound">T</ref>,N,O).</highlight></codeline>
</programlisting> if the first argument of the goal is a list, its head will be tested, and only the clauses matching it will be tried during execution</para>
<para>Some advice on how to take a good advantage of this mechanism:</para>
<para><itemizedlist>
<listitem><para>Try to make the first argument an input argument</para>
</listitem><listitem><para>Try to keep together all clauses whose first argument is not a variable, that will decrease the number of tests since the other clauses are always tried</para>
</listitem><listitem><para>Try to avoid predicates having a lot of clauses with the same key For instance, the procedure:</para>
</listitem></itemizedlist>
</para>
<para><programlisting><codeline><highlight class="normal">type(n(mary),person).</highlight></codeline>
<codeline><highlight class="normal">type(n(john),<sp/>person).</highlight></codeline>
<codeline><highlight class="normal">type(n(chair),</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">).</highlight></codeline>
<codeline><highlight class="normal">type(v(eat),active).</highlight></codeline>
<codeline><highlight class="normal">type(v(rest),passive).</highlight></codeline>
</programlisting></para>
<para>becomes more efficient with:</para>
<para><programlisting><codeline><highlight class="normal">type(n(N),<ref refid="classT" kindref="compound">T</ref>)<sp/>:-<sp/>type_of_noun(N,<ref refid="classT" kindref="compound">T</ref>).</highlight></codeline>
<codeline><highlight class="normal">type(v(V),<ref refid="classT" kindref="compound">T</ref>)<sp/>:-<sp/>type_of_verb(V,<ref refid="classT" kindref="compound">T</ref>).</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">type_of_noun(mary,person).</highlight></codeline>
<codeline><highlight class="normal">type_of_noun(john,person).</highlight></codeline>
<codeline><highlight class="normal">type_of_noun(chair,object).</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">type_of_verb(eat,active).</highlight></codeline>
<codeline><highlight class="normal">type_of_verb(rest,passive).</highlight></codeline>
</programlisting></para>
    </detaileddescription>
  </compounddef>
</doxygen>
