<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="group__Operators" kind="group">
    <compoundname>Operators</compoundname>
    <title>Summary of YAP Predefined Operators</title>
    <innerclass refid="structOPSTRUCT" prot="public">OPSTRUCT</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__Operators_1ga8f0ff3cdec36807ba3c4bd51bf297b47" prot="public" static="no">
        <type>struct <ref refid="structOPSTRUCT" kindref="compound">OPSTRUCT</ref></type>
        <definition>typedef struct OPSTRUCT Opdef</definition>
        <argsstring></argsstring>
        <name>Opdef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="351" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__Operators_1gadb87daacfdff68bc09a77475895ea65d" prot="public" static="yes" mutable="no">
        <type><ref refid="structOPSTRUCT" kindref="compound">Opdef</ref></type>
        <definition>Opdef Ops[]</definition>
        <argsstring>[]</argsstring>
        <name>Ops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="353" column="14" bodyfile="C/init.c" bodystart="353" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Operators_1gaa405d47654d8fe9b3033ba4eae5bee4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Yap_IsOpType</definition>
        <argsstring>(char *type)</argsstring>
        <name>Yap_IsOpType</name>
        <param>
          <type>char *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="198" column="5" bodyfile="C/init.c" bodystart="198" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__Operators_1ga03898dfb064bb6f1a69407fa66204ad3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int OpDec</definition>
        <argsstring>(int p, const char *type, Atom a, Term m)</argsstring>
        <name>OpDec</name>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="208" column="12" bodyfile="C/init.c" bodystart="208" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="group__Operators_1ga67c2cf24a65ec6962194339adad77f0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Yap_OpDec</definition>
        <argsstring>(int p, char *type, Atom a, Term m)</argsstring>
        <name>Yap_OpDec</name>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="291" column="5" bodyfile="C/init.c" bodystart="291" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="group__Operators_1ga3930cf43d618ee1e1bfc6b6fdbcadb08" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetOp</definition>
        <argsstring>(int, int, char *, Term)</argsstring>
        <name>SetOp</name>
        <param>
          <type>int</type>
          <defname>p</defname>
        </param>
        <param>
          <type>int</type>
          <defname>type</defname>
        </param>
        <param>
          <type>char *</type>
          <defname>at</defname>
        </param>
        <param>
          <type>Term</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="295" column="13" bodyfile="C/init.c" bodystart="295" bodyend="301" declfile="C/init.c" declline="78" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__Operators_1ga37b54f4cc78b256c42f1a48ea6777542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_dup_op</definition>
        <argsstring>(OpEntry *op, ModEntry *she)</argsstring>
        <name>Yap_dup_op</name>
        <param>
          <type><ref refid="structoperator__entry" kindref="compound">OpEntry</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="structmod__entry" kindref="compound">ModEntry</ref> *</type>
          <declname>she</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="303" column="6" bodyfile="C/init.c" bodystart="303" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="group__Operators_1gadaa915632b9b11363bcab57770646a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
        <definition>Atom Yap_GetOp</definition>
        <argsstring>(OpEntry *pp, int *prio, int fix)</argsstring>
        <name>Yap_GetOp</name>
        <param>
          <type><ref refid="structoperator__entry" kindref="compound">OpEntry</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>prio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="318" column="6" bodyfile="C/init.c" bodystart="318" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="group__Operators_1gad5cd620399f0592f29612c0b0f9b0a7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InitOps</definition>
        <argsstring>(void)</argsstring>
        <name>InitOps</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="430" column="13" bodyfile="C/init.c" bodystart="430" bodyend="434" declfile="C/init.c" declline="79" declcolumn="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__Operators_1ga1389d67cc667f85023edcded9e962b01" prot="public" static="no">
        <name>xfx</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="190" column="9" bodyfile="C/init.c" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Operators_1ga2a2e3fc8dcaeeb271f47d1c4bc81ee2f" prot="public" static="no">
        <name>xfy</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="191" column="9" bodyfile="C/init.c" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Operators_1gafb07535327ab83eef6d88cbb667c0740" prot="public" static="no">
        <name>yfx</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="192" column="9" bodyfile="C/init.c" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Operators_1ga632f8e33d2cccb50a9dbe9339bb14f1c" prot="public" static="no">
        <name>xf</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="193" column="9" bodyfile="C/init.c" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Operators_1gaae8d300fc0d0fbdf09ace914fc886a46" prot="public" static="no">
        <name>yf</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="194" column="9" bodyfile="C/init.c" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Operators_1gad2e4727a6cf0085d054c56ac03891665" prot="public" static="no">
        <name>fx</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="195" column="9" bodyfile="C/init.c" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Operators_1gaa945d72ec8a9d6422679186c0ce9b21e" prot="public" static="no">
        <name>fy</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/init.c" line="196" column="9" bodyfile="C/init.c" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The Prolog syntax caters for operators of three main kinds: </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>prefix;</para>
</listitem><listitem><para>infix;</para>
</listitem><listitem><para>postfix</para>
</listitem></itemizedlist>
</para>
<para>Each operator has precedence in the range 1 to 1200, and this precedence is used to disambiguate expressions where the structure of the term denoted is not made explicit using brackets The operator of higher precedence is the main functor</para>
<para>If there are two operators with the highest precedence, the ambiguity is solved analyzing the types of the operators The possible infix types are: <emphasis>xfx</emphasis>, <emphasis>xfy</emphasis>, and <emphasis>yfx</emphasis></para>
<para>With an operator of type <emphasis>xfx</emphasis> both sub-expressions must have lower precedence than the operator itself, unless they are bracketed (which assigns to them zero precedence) With an operator type <emphasis>xfy</emphasis> only the left-hand sub-expression must have lower precedence The opposite happens for <emphasis>yfx</emphasis> type</para>
<para>A prefix operator can be of type <emphasis>fx</emphasis> or <emphasis>fy</emphasis> A postfix operator can be of type <emphasis>xf</emphasis> or <emphasis>yf</emphasis> The meaning of the notation is analogous to the above</para>
<para><programlisting><codeline><highlight class="normal">a<sp/>+<sp/>b<sp/>*<sp/>c</highlight></codeline>
</programlisting> means</para>
<para><programlisting><codeline><highlight class="normal">a<sp/>+<sp/>(b<sp/>*<sp/>c)</highlight></codeline>
</programlisting> as + and * have the following types and precedences:</para>
<para><programlisting><codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(500,yfx,</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(400,yfx,</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">).</highlight></codeline>
</programlisting></para>
<para>Now defining</para>
<para><programlisting><codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(700,xfy,</highlight><highlight class="stringliteral">&apos;++&apos;</highlight><highlight class="normal">).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(700,xfx,</highlight><highlight class="stringliteral">&apos;=:=&apos;</highlight><highlight class="normal">).</highlight></codeline>
<codeline><highlight class="normal">a<sp/>++<sp/>b<sp/>=:=<sp/>c</highlight></codeline>
</programlisting> means</para>
<para><programlisting><codeline><highlight class="normal">a<sp/>++<sp/>(b<sp/>=:=<sp/>c)</highlight></codeline>
</programlisting></para>
<para>The following is the list of the declarations of the predefined operators: <programlisting><codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(1200,fx,[</highlight><highlight class="stringliteral">&apos;?-&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;:-&apos;</highlight><highlight class="normal">]).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(1200,xfx,[</highlight><highlight class="stringliteral">&apos;:-&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;--&gt;&apos;</highlight><highlight class="normal">]).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(1150,fx,[block,dynamic,mode,</highlight><highlight class="keyword">public</highlight><highlight class="normal">,multifile,meta_predicate,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequential,table,initialization]).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(1100,xfy,[</highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">]).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(1050,xfy,-&gt;).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(1000,xfy,</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(999,xfy,</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(900,fy,[</highlight><highlight class="charliteral">&apos;\+&apos;</highlight><highlight class="normal">,<sp/>not]).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(900,fx,[nospy,<sp/>spy]).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(700,xfx,[@&gt;=,@=&lt;,@&lt;,@&gt;,&lt;,=,&gt;,=:=,=\=,\==,&gt;=,=&lt;,==g\=,=..,is]).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(500,yfx,[</highlight><highlight class="charliteral">&apos;\/&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;/\&apos;,&apos;</highlight><highlight class="normal">+</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">-</highlight><highlight class="stringliteral">&apos;]).</highlight></codeline>
<codeline><highlight class="stringliteral">:-op(500,fx,[&apos;</highlight><highlight class="normal">+</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">-</highlight><highlight class="stringliteral">&apos;]).</highlight></codeline>
<codeline><highlight class="stringliteral">:-op(400,yfx,[&apos;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">&gt;&gt;</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="comment">//&apos;,&apos;*&apos;,&apos;/&apos;]).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(300,xfx,mod).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(200,xfy,[</highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;**&apos;</highlight><highlight class="normal">]).</highlight></codeline>
<codeline><highlight class="normal">:-<ref refid="conceptop" kindref="compound">op</ref>(50,xfx,same).</highlight></codeline>
</programlisting></para>
    </detaileddescription>
  </compounddef>
</doxygen>
