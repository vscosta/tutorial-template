<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classYAPFunctor" kind="class" language="C++" prot="public">
    <compoundname>YAPFunctor</compoundname>
    <basecompoundref refid="classYAPProp" prot="public" virt="non-virtual">YAPProp</basecompoundref>
    <includes refid="tmp_2yapa_8hh" local="no">yapa.hh</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classYAPFunctor_1a5c605af04dea50a0a9ba581213eadb33" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPApplTerm</definition>
        <argsstring></argsstring>
        <name>YAPApplTerm</name>
        <qualifiedname>YAPFunctor::YAPApplTerm</qualifiedname>
        <param>
          <type><ref refid="classYAPApplTerm" kindref="compound">YAPApplTerm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="126" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPFunctor_1afc97fd5868ee65aac8b220ec43f2bf0d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPTerm</definition>
        <argsstring></argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPFunctor::YAPTerm</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="127" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPFunctor_1a42b13f860a0c8d74ff5c9f3fb9cb5240" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPPredicate</definition>
        <argsstring></argsstring>
        <name>YAPPredicate</name>
        <qualifiedname>YAPFunctor::YAPPredicate</qualifiedname>
        <param>
          <type><ref refid="classYAPPredicate" kindref="compound">YAPPredicate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="128" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPFunctor_1abce547a0e7fe87f57877644b72180813" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPQuery</definition>
        <argsstring></argsstring>
        <name>YAPQuery</name>
        <qualifiedname>YAPFunctor::YAPQuery</qualifiedname>
        <param>
          <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="129" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classYAPFunctor_1a19971b0d82debe16066b69ea38777a0f" prot="private" static="no" mutable="no">
        <type><ref refid="structFunctorEntryStruct" kindref="compound">Functor</ref></type>
        <definition>Functor f</definition>
        <argsstring></argsstring>
        <name>f</name>
        <qualifiedname>YAPFunctor::f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="130" column="11" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classYAPFunctor_1a3f1b73eff8fcc200a26a31a701ba5d01" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPFunctor</definition>
        <argsstring>(Functor ff)</argsstring>
        <name>YAPFunctor</name>
        <qualifiedname>YAPFunctor::YAPFunctor</qualifiedname>
        <param>
          <type><ref refid="structFunctorEntryStruct" kindref="compound">Functor</ref></type>
          <declname>ff</declname>
        </param>
        <briefdescription>
<para>Constructor: receives Prolog functor and casts it to <ref refid="classYAPFunctor" kindref="compound">YAPFunctor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Notice that this is designed for internal use only </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="134" column="10" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1a3f1b73eff8fcc200a26a31a701ba5d01" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPFunctor</definition>
        <argsstring>(Functor ff)</argsstring>
        <name>YAPFunctor</name>
        <qualifiedname>YAPFunctor::YAPFunctor</qualifiedname>
        <param>
          <type><ref refid="structFunctorEntryStruct" kindref="compound">Functor</ref></type>
          <declname>ff</declname>
        </param>
        <briefdescription>
<para>Constructor: receives Prolog functor and casts it to <ref refid="classYAPFunctor" kindref="compound">YAPFunctor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Notice that this is designed for internal use only </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapa.hh" line="134" column="10" bodyfile="/home/vsc/github/yap/CXX/yapa.hh" bodystart="134" bodyend="134"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classYAPFunctor_1a54afd1ad475ca5f4ea640ac3b2968734" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPFunctor</definition>
        <argsstring>(YAPAtom at, uintptr_t arity)</argsstring>
        <name>YAPFunctor</name>
        <qualifiedname>YAPFunctor::YAPFunctor</qualifiedname>
        <param>
          <type><ref refid="classYAPAtom" kindref="compound">YAPAtom</ref></type>
          <declname>at</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arity</declname>
        </param>
        <briefdescription>
<para>Constructor: receives name as an atom, plus arity. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the default method, and the most popular </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="140" column="3" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1af284dbc29930edcd95b9d53f58c4c7e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPFunctor</definition>
        <argsstring>(const char *s, uintptr_t arity, bool isutf8=true)</argsstring>
        <name>YAPFunctor</name>
        <qualifiedname>YAPFunctor::YAPFunctor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arity</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isutf8</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructor: receives name as a string plus arity. </para>
        </briefdescription>
        <detaileddescription>
<para>Notice that this is designed for ISO-LATIN-1 right now Note: Python confuses the 3 constructors, use YAPFunctorFromString </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="147" column="4" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1ab02430bfa37792ecb2759863b8d5a278" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPFunctor</definition>
        <argsstring>(const wchar_t *s, uintptr_t arity)</argsstring>
        <name>YAPFunctor</name>
        <qualifiedname>YAPFunctor::YAPFunctor</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arity</declname>
        </param>
        <briefdescription>
<para>Constructor: receives name as a wide string plus arity. </para>
        </briefdescription>
        <detaileddescription>
<para>Notice that this is designed for UNICODE right now</para>
<para>Note: Python confuses the 3 constructors, use YAPFunctorFromWideString </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="156" column="10" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1aa81cc38dff90358b272f46b7f442b96f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPAtom" kindref="compound">YAPAtom</ref></type>
        <definition>YAPAtom name</definition>
        <argsstring>()</argsstring>
        <name>name</name>
        <qualifiedname>YAPFunctor::name</qualifiedname>
        <briefdescription>
<para>Getter: extract name of functor as an atom. </para>
        </briefdescription>
        <detaileddescription>
<para>this is for external usage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="162" column="19" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1a1a6c0ed3b23d695428b3cc2659036e30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arity_t</type>
        <definition>arity_t arity</definition>
        <argsstring>()</argsstring>
        <name>arity</name>
        <qualifiedname>YAPFunctor::arity</qualifiedname>
        <briefdescription>
<para>Getter: extract arity of functor as an unsigned integer. </para>
        </briefdescription>
        <detaileddescription>
<para>this is for external usage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="167" column="18" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1a489c90ee1acb21c2291cd3c2c521a76e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structFunctorEntryStruct" kindref="compound">Functor</ref></type>
        <definition>Functor fun</definition>
        <argsstring>()</argsstring>
        <name>fun</name>
        <qualifiedname>YAPFunctor::fun</qualifiedname>
        <briefdescription>
<para>Getter: extract the C functor. </para>
        </briefdescription>
        <detaileddescription>
<para>this is for external usage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="172" column="18" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1a54afd1ad475ca5f4ea640ac3b2968734" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPFunctor</definition>
        <argsstring>(YAPAtom at, uintptr_t arity)</argsstring>
        <name>YAPFunctor</name>
        <qualifiedname>YAPFunctor::YAPFunctor</qualifiedname>
        <param>
          <type><ref refid="classYAPAtom" kindref="compound">YAPAtom</ref></type>
          <declname>at</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arity</declname>
        </param>
        <briefdescription>
<para>Constructor: receives name as an atom, plus arity. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the default method, and the most popular </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapa.hh" line="140" column="3" bodyfile="/home/vsc/github/yap/CXX/yapa.hh" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1af284dbc29930edcd95b9d53f58c4c7e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPFunctor</definition>
        <argsstring>(const char *s, uintptr_t arity, bool isutf8=true)</argsstring>
        <name>YAPFunctor</name>
        <qualifiedname>YAPFunctor::YAPFunctor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arity</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isutf8</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructor: receives name as a string plus arity. </para>
        </briefdescription>
        <detaileddescription>
<para>Notice that this is designed for ISO-LATIN-1 right now Note: Python confuses the 3 constructors, use YAPFunctorFromString </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapa.hh" line="147" column="4" bodyfile="/home/vsc/github/yap/CXX/yapa.hh" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1ab02430bfa37792ecb2759863b8d5a278" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPFunctor</definition>
        <argsstring>(const wchar_t *s, uintptr_t arity)</argsstring>
        <name>YAPFunctor</name>
        <qualifiedname>YAPFunctor::YAPFunctor</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arity</declname>
        </param>
        <briefdescription>
<para>Constructor: receives name as a wide string plus arity. </para>
        </briefdescription>
        <detaileddescription>
<para>Notice that this is designed for UNICODE right now</para>
<para>Note: Python confuses the 3 constructors, use YAPFunctorFromWideString </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapa.hh" line="156" column="10" bodyfile="/home/vsc/github/yap/CXX/yapa.hh" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1aa81cc38dff90358b272f46b7f442b96f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPAtom" kindref="compound">YAPAtom</ref></type>
        <definition>YAPAtom name</definition>
        <argsstring>()</argsstring>
        <name>name</name>
        <qualifiedname>YAPFunctor::name</qualifiedname>
        <briefdescription>
<para>Getter: extract name of functor as an atom. </para>
        </briefdescription>
        <detaileddescription>
<para>this is for external usage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapa.hh" line="162" column="19" bodyfile="/home/vsc/github/yap/CXX/yapa.hh" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1a1a6c0ed3b23d695428b3cc2659036e30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arity_t</type>
        <definition>arity_t arity</definition>
        <argsstring>()</argsstring>
        <name>arity</name>
        <qualifiedname>YAPFunctor::arity</qualifiedname>
        <briefdescription>
<para>Getter: extract arity of functor as an unsigned integer. </para>
        </briefdescription>
        <detaileddescription>
<para>this is for external usage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapa.hh" line="167" column="18" bodyfile="/home/vsc/github/yap/CXX/yapa.hh" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classYAPFunctor_1a489c90ee1acb21c2291cd3c2c521a76e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structFunctorEntryStruct" kindref="compound">Functor</ref></type>
        <definition>Functor fun</definition>
        <argsstring>()</argsstring>
        <name>fun</name>
        <qualifiedname>YAPFunctor::fun</qualifiedname>
        <briefdescription>
<para>Getter: extract the C functor. </para>
        </briefdescription>
        <detaileddescription>
<para>this is for external usage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapa.hh" line="172" column="18" bodyfile="/home/vsc/github/yap/CXX/yapa.hh" bodystart="172" bodyend="172"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classYAPFunctor" kindref="compound">YAPFunctor</ref> represents Prolog functors Name/Arity. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>YAPFunctor</label>
        <link refid="classYAPFunctor"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>YAPProp</label>
        <link refid="classYAPProp"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>YAPFunctor</label>
        <link refid="classYAPFunctor"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>YAPProp</label>
        <link refid="classYAPProp"/>
      </node>
    </collaborationgraph>
    <location file="/home/vsc/github/yap/CXX/tmp/yapa.hh" line="125" column="1" bodyfile="/home/vsc/github/yap/CXX/tmp/yapa.hh" bodystart="125" bodyend="173"/>
    <listofallmembers>
      <member refid="classYAPFunctor_1a1a6c0ed3b23d695428b3cc2659036e30" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>arity</name></member>
      <member refid="classYAPFunctor_1a1a6c0ed3b23d695428b3cc2659036e30" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>arity</name></member>
      <member refid="classYAPFunctor_1a19971b0d82debe16066b69ea38777a0f" prot="private" virt="non-virtual"><scope>YAPFunctor</scope><name>f</name></member>
      <member refid="classYAPFunctor_1a489c90ee1acb21c2291cd3c2c521a76e" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>fun</name></member>
      <member refid="classYAPFunctor_1a489c90ee1acb21c2291cd3c2c521a76e" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>fun</name></member>
      <member refid="classYAPFunctor_1aa81cc38dff90358b272f46b7f442b96f" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>name</name></member>
      <member refid="classYAPFunctor_1aa81cc38dff90358b272f46b7f442b96f" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>name</name></member>
      <member refid="classYAPFunctor_1a5c605af04dea50a0a9ba581213eadb33" prot="private" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPApplTerm</name></member>
      <member refid="classYAPFunctor_1a3f1b73eff8fcc200a26a31a701ba5d01" prot="private" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPFunctor</name></member>
      <member refid="classYAPFunctor_1a54afd1ad475ca5f4ea640ac3b2968734" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPFunctor</name></member>
      <member refid="classYAPFunctor_1af284dbc29930edcd95b9d53f58c4c7e7" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPFunctor</name></member>
      <member refid="classYAPFunctor_1ab02430bfa37792ecb2759863b8d5a278" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPFunctor</name></member>
      <member refid="classYAPFunctor_1a3f1b73eff8fcc200a26a31a701ba5d01" prot="private" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPFunctor</name></member>
      <member refid="classYAPFunctor_1a54afd1ad475ca5f4ea640ac3b2968734" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPFunctor</name></member>
      <member refid="classYAPFunctor_1af284dbc29930edcd95b9d53f58c4c7e7" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPFunctor</name></member>
      <member refid="classYAPFunctor_1ab02430bfa37792ecb2759863b8d5a278" prot="public" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPFunctor</name></member>
      <member refid="classYAPFunctor_1a42b13f860a0c8d74ff5c9f3fb9cb5240" prot="private" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPPredicate</name></member>
      <member refid="classYAPFunctor_1abce547a0e7fe87f57877644b72180813" prot="private" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPQuery</name></member>
      <member refid="classYAPFunctor_1afc97fd5868ee65aac8b220ec43f2bf0d" prot="private" virt="non-virtual"><scope>YAPFunctor</scope><name>YAPTerm</name></member>
      <member refid="classYAPProp_1a5c6ec2f85493ee40cd1d06d51e56d90d" prot="public" virt="virtual"><scope>YAPFunctor</scope><name>~YAPProp</name></member>
      <member refid="classYAPProp_1a5c6ec2f85493ee40cd1d06d51e56d90d" prot="public" virt="virtual"><scope>YAPFunctor</scope><name>~YAPProp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
