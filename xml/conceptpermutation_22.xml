<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="conceptpermutation_22" kind="concept">
    <compoundname>permutation/2</compoundname>
    <initializer>template&lt;&gt;
concept permutation/2 =     </initializer>
    <briefdescription>
<para><bold>permutation</bold>(+ <emphasis>List</emphasis>,? <emphasis>Perm</emphasis>) </para>
    </briefdescription>
    <detaileddescription>
<para>True when <emphasis>List</emphasis> and <emphasis>Perm</emphasis> are permutations of each other</para>
<para>permutation(List, Perm) is true when List and Perm are permutations of each other Of course, if you just want to test that, the best way is to <ref refid="classkeysort_22" kindref="compound">keysort/2</ref> the two lists and see if the results are the same Or you could use list_to_bag (from BagUtl.Pl) to see if they convert to the same bag The point of perm is to generate permutations The arguments may be either way round, the only effect will be the order in which the permutations are tried Be careful: this is quite efficient, but the number of permutations of an N-element list is N!, even for a 7-element list that is 5040 </para>
    </detaileddescription>
    <location file="library/lists.yap" line="1" column="1"/>
  </compounddef>
</doxygen>
