<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classprint__message_22" kind="class" language="Prolog" prot="public">
    <compoundname>print_message/2</compoundname>
    <briefdescription>
<para><bold>print_message</bold>(+ <emphasis>Kind</emphasis>, +_Term_) </para>
    </briefdescription>
    <detaileddescription>
<para>The predicate <ref refid="classprint__message_22" kindref="compound">print_message/2</ref> is used to print messages, notably from exceptions, in a human-readable format <emphasis>Kind</emphasis> is one of <computeroutput>informational</computeroutput>, <computeroutput>banner</computeroutput>, <computeroutput>warning</computeroutput>, <computeroutput>error</computeroutput>, <computeroutput>help</computeroutput> or <computeroutput>silent</computeroutput> In YAP, the message is always outut to the stream user_error</para>
<para>If the Prolog flag verbose is <computeroutput>silent</computeroutput>, messages with <emphasis>Kind</emphasis> <computeroutput>informational</computeroutput>, or <computeroutput>banner</computeroutput> are treated as silent See <computeroutput>-q</computeroutput> in [Running_YAP_Interactively]</para>
<para>4This predicate first translates the <emphasis>Term</emphasis> into a list of <computeroutput>message lines</computeroutput> (see <ref refid="classprint__message__lines_23" kindref="compound">print_message_lines/3</ref> for details) Next it will call the hook <ref refid="classmessage__hook_23" kindref="compound">message_hook/3</ref> to allow the user intercepting the message If <ref refid="classmessage__hook_23" kindref="compound">message_hook/3</ref> fails it will print the message unless <emphasis>Kind</emphasis> is silent</para>
<para>If you need to report errors from your own predicates, we advise you to</para>
<para>stick to the existing error terms if you can; but should you need to invent new ones, you can define corresponding error messages by asserting clauses for message/2 You will need to declare the predicate as <ref refid="classmultifile_21" kindref="compound">multifile/1</ref></para>
<para>Note: errors in the implementation of <ref refid="classprint__message_22" kindref="compound">print_message/2</ref> are very confusing to YAP (who will process the error?) So we write this small stub to ensure everything os ok </para>
    </detaileddescription>
    <location file="/home/vsc/github/yap/pl/messages.yap" line="2" column="1" bodyfile="/home/vsc/github/yap/pl/messages.yap" bodystart="2" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
