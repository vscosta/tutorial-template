<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classbagof_23" kind="class" language="Prolog" prot="public">
    <compoundname>bagof/3</compoundname>
    <briefdescription>
<para><bold>bagof</bold>( <emphasis><ref refid="classT" kindref="compound">T</ref></emphasis>,+ <emphasis>G</emphasis>,- <emphasis>L</emphasis>) </para>
    </briefdescription>
    <detaileddescription>
<para>defined in the <emphasis>ISO</emphasis> standard</para>
<para>For each set of possible instances of the free variables occurring in <emphasis>G</emphasis> but not in <emphasis><ref refid="classT" kindref="compound">T</ref></emphasis>, generates the list <emphasis>L</emphasis> of the instances of <emphasis><ref refid="classT" kindref="compound">T</ref></emphasis> satisfying <emphasis>G</emphasis> Again, assuming the same clauses as in the examples above, the reply to the query</para>
<para><programlisting><codeline><highlight class="keyword">?-<sp/></highlight><highlight class="stringliteral"></highlight><highlight class="normal">bagof(</highlight><highlight class="charliteral">X</highlight><highlight class="normal">,a(</highlight><highlight class="charliteral">X</highlight><highlight class="normal">,</highlight><highlight class="charliteral">Y</highlight><highlight class="normal">),</highlight><highlight class="charliteral">L</highlight><highlight class="normal">).</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="charliteral">X</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">=</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">_32</highlight></codeline>
<codeline><highlight class="charliteral">Y</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">=</highlight><highlight class="normal"><sp/></highlight><highlight class="vhldigit">1</highlight></codeline>
<codeline><highlight class="charliteral">L</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">=</highlight><highlight class="normal"><sp/>[</highlight><highlight class="vhldigit">2</highlight><highlight class="normal">,</highlight><highlight class="vhldigit">1</highlight><highlight class="normal">]</highlight><highlight class="keyword">;</highlight></codeline>
<codeline><highlight class="charliteral">X</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">=</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">_32</highlight></codeline>
<codeline><highlight class="charliteral">Y</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">=</highlight><highlight class="normal"><sp/></highlight><highlight class="vhldigit">2</highlight></codeline>
<codeline><highlight class="charliteral">L</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">=</highlight><highlight class="normal"><sp/>[</highlight><highlight class="vhldigit">2</highlight><highlight class="normal">]</highlight><highlight class="keyword">;</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight><highlight class="normal"></highlight></codeline>
</programlisting> And this is <ref refid="classbagof_23" kindref="compound">bagof/3</ref></para>
<para>Either we have excess of variables and we need to find the solutions for each instantiation of these variables </para>
    </detaileddescription>
    <location file="/home/vsc/github/yap/pl/setof.yap" line="2" column="1" bodyfile="/home/vsc/github/yap/pl/setof.yap" bodystart="2" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
