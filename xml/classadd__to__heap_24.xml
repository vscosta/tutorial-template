<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classadd__to__heap_24" kind="class" language="Prolog" prot="public">
    <compoundname>add_to_heap/4</compoundname>
    <briefdescription>
<para><bold>add_to_heap</bold>(OldHeap, Key, Datum, NewHeap) </para>
    </briefdescription>
    <detaileddescription>
<para>% inserts the new Key-Datum pair into the heap The insertion is not stable, that is, if you insert several pairs with the same Key it is not defined which of them will come out first, and it is possible for any of them to come out first depending on the history of the heap If you need a stable heap, you could add a counter to the heap and include the counter at the time of insertion in the key If the free list is empty, the tree will be grown, otherwise one of the empty slots will be re-used (I use imperative programming language, but the heap code is as pure as the trees code, you can create any number of variants starting from the same heap, and they will share what common structure they can without interfering with each other.) </para>
    </detaileddescription>
    <location file="/home/vsc/github/yap/library/heaps.yap" line="1" column="1" bodyfile="/home/vsc/github/yap/library/heaps.yap" bodystart="1" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
