<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="group__PredicateArgsC" kind="group">
    <compoundname>PredicateArgsC</compoundname>
    <title>How to access a list of arguments from C</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PredicateArgsC_1gab5d0f39232f03c54390591fea37d34f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structx__el" kindref="compound">xarg</ref> *</type>
        <definition>static xarg * matchKey</definition>
        <argsstring>(Atom key, xarg *e0, int n, const param_t *def)</argsstring>
        <name>matchKey</name>
        <param>
          <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structx__el" kindref="compound">xarg</ref> *</type>
          <declname>e0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structstruct__param" kindref="compound">param_t</ref> *</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>Scan a list of arguments and output results to a pre-processed vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listl</parametername>
</parameternamelist>
<parameterdescription>
<para>input list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>def</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter definition</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>all arguments, some of them set, some of them not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/args.c" line="27" column="13" bodyfile="C/args.c" bodystart="27" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="group__PredicateArgsC_1ga164c5dcb2f73a27da03b88b26d4c07ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Yap_ArgKey</definition>
        <argsstring>(Atom key, const param_t *def, int n)</argsstring>
        <name>Yap_ArgKey</name>
        <param>
          <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="structstruct__param" kindref="compound">param_t</ref> *</type>
          <declname>def</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns the index of an argument key, or -1 if not found. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/args.c" line="43" column="5" bodyfile="C/args.c" bodystart="43" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__PredicateArgsC_1gaab0554278f0e5008e8b9818fb4648787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structx__el" kindref="compound">xarg</ref> *</type>
        <definition>xarg * Yap_ArgListToVector__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term listl, const param_t *def, int n, xarg *a, yap_error_number err)</argsstring>
        <name>Yap_ArgListToVector__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>listl</declname>
        </param>
        <param>
          <type>const <ref refid="structstruct__param" kindref="compound">param_t</ref> *</type>
          <declname>def</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structx__el" kindref="compound">xarg</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>yap_error_number</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/args.c" line="57" column="6" bodyfile="C/args.c" bodystart="57" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__PredicateArgsC_1ga6ac80ce753fd966f0b5cc03393ae732c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structx__el" kindref="compound">xarg</ref> *</type>
        <definition>static xarg * matchKey2</definition>
        <argsstring>(Atom key, xarg *e0, int n, const param2_t *def)</argsstring>
        <name>matchKey2</name>
        <param>
          <type><ref refid="structAtomEntryStruct" kindref="compound">Atom</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structx__el" kindref="compound">xarg</ref> *</type>
          <declname>e0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structstruct__param2" kindref="compound">param2_t</ref> *</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/args.c" line="142" column="13" bodyfile="C/args.c" bodystart="142" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__PredicateArgsC_1gacdc74f0880d394beebfa0c594b853828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structx__el" kindref="compound">xarg</ref> *</type>
        <definition>xarg * Yap_ArgList2ToVector__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term listl, const param2_t *def, int n, yap_error_number err)</argsstring>
        <name>Yap_ArgList2ToVector__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>listl</declname>
        </param>
        <param>
          <type>const <ref refid="structstruct__param2" kindref="compound">param2_t</ref> *</type>
          <declname>def</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>yap_error_number</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Yap_ArgList2ToVector is much the same as before, but assumes parameters also have something called a scope. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/args.c" line="156" column="6" bodyfile="C/args.c" bodystart="156" bodyend="235"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__PredicateArgsC_1gab78a7dd1935dcf76cd2bf7112e701486" prot="public" static="no">
        <name>YAP_XARGINFO</name>
        <param><defname>Error</defname></param>
        <param><defname>Message</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/args.c" line="54" column="9" bodyfile="C/args.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Lists of arguments in C . </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
