<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classYAPEngine" kind="class" language="C++" prot="public">
    <compoundname>YAPEngine</compoundname>
    <includes refid="tmp_2yapq_8hh" local="no">yapq.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classYAPEngine_1a570bac269d3d7b01f7aa9cc979496ab8" prot="private" static="no" mutable="no">
        <type><ref refid="structYAPEngineArgs" kindref="compound">YAPEngineArgs</ref> *</type>
        <definition>YAPEngineArgs * engine_args</definition>
        <argsstring></argsstring>
        <name>engine_args</name>
        <qualifiedname>YAPEngine::engine_args</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="324" column="17" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classYAPEngine_1aebc57b169b4f12371df4b48677259cf5" prot="private" static="no" mutable="no">
        <type><ref refid="classYAPCallback" kindref="compound">YAPCallback</ref> *</type>
        <definition>YAPCallback * _callback</definition>
        <argsstring></argsstring>
        <name>_callback</name>
        <qualifiedname>YAPEngine::_callback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="325" column="15" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classYAPEngine_1ace245459777a0c015b2947c9b9eb0fb4" prot="private" static="no" mutable="no">
        <type><ref refid="classYAPError" kindref="compound">YAPError</ref></type>
        <definition>YAPError yerror</definition>
        <argsstring></argsstring>
        <name>yerror</name>
        <qualifiedname>YAPEngine::yerror</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="326" column="12" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classYAPEngine_1a3ee6b48c1f17235caca5656860e8ec32" prot="private" static="no" mutable="no">
        <type><ref refid="classYAPError" kindref="compound">YAPError</ref></type>
        <definition>YAPError e</definition>
        <argsstring></argsstring>
        <name>e</name>
        <qualifiedname>YAPEngine::e</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="328" column="12" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="328" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classYAPEngine_1a0baa2a14fddc9486557407a0f5813b8f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <qualifiedname>YAPEngine::port</qualifiedname>
        <initializer>= &quot;call&quot;</initializer>
        <briefdescription>
<para>construct a new engine; may use a variable number of arguments </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="333" column="15" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="333" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classYAPEngine_1a08320a9eec6b71a66c897a84639bb12d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void doInit</definition>
        <argsstring>(YAP_file_type_t BootMode, YAPEngineArgs *cargs)</argsstring>
        <name>doInit</name>
        <qualifiedname>YAPEngine::doInit</qualifiedname>
        <param>
          <type>YAP_file_type_t</type>
          <declname>BootMode</declname>
        </param>
        <param>
          <type><ref refid="structYAPEngineArgs" kindref="compound">YAPEngineArgs</ref> *</type>
          <declname>cargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="327" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="1079" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ad42d04547cbdb8f6b1936868a04be7c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpred__entry" kindref="compound">PredEntry</ref> *</type>
        <definition>PredEntry * rewriteUndefEngineQuery</definition>
        <argsstring>(PredEntry *ap, Term &amp;t, Term tmod)</argsstring>
        <name>rewriteUndefEngineQuery</name>
        <qualifiedname>YAPEngine::rewriteUndefEngineQuery</qualifiedname>
        <param>
          <type><ref refid="structpred__entry" kindref="compound">PredEntry</ref> *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>Term &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>tmod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="329" column="13" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="969" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a08320a9eec6b71a66c897a84639bb12d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void doInit</definition>
        <argsstring>(YAP_file_type_t BootMode, YAPEngineArgs *cargs)</argsstring>
        <name>doInit</name>
        <qualifiedname>YAPEngine::doInit</qualifiedname>
        <param>
          <type>YAP_file_type_t</type>
          <declname>BootMode</declname>
        </param>
        <param>
          <type><ref refid="structYAPEngineArgs" kindref="compound">YAPEngineArgs</ref> *</type>
          <declname>cargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="326" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ad42d04547cbdb8f6b1936868a04be7c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpred__entry" kindref="compound">PredEntry</ref> *</type>
        <definition>PredEntry * rewriteUndefEngineQuery</definition>
        <argsstring>(PredEntry *ap, Term &amp;t, Term tmod)</argsstring>
        <name>rewriteUndefEngineQuery</name>
        <qualifiedname>YAPEngine::rewriteUndefEngineQuery</qualifiedname>
        <param>
          <type><ref refid="structpred__entry" kindref="compound">PredEntry</ref> *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>Term &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>tmod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="328" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classYAPEngine_1a08880d5ab932db3a0854e622052a82d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPEngine</definition>
        <argsstring>(YAPEngineArgs *cargs)</argsstring>
        <name>YAPEngine</name>
        <qualifiedname>YAPEngine::YAPEngine</qualifiedname>
        <param>
          <type><ref refid="structYAPEngineArgs" kindref="compound">YAPEngineArgs</ref> *</type>
          <declname>cargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="334" column="3" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="334" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a669bd5cb31d888e675720003cd345376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAPEngine</definition>
        <argsstring>(int argc, char *argv[], YAPCallback *callback=(YAPCallback *) NULL)</argsstring>
        <name>YAPEngine</name>
        <qualifiedname>YAPEngine::YAPEngine</qualifiedname>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="classYAPCallback" kindref="compound">YAPCallback</ref> *</type>
          <declname>callback</declname>
          <defval>(<ref refid="classYAPCallback" kindref="compound">YAPCallback</ref> *) NULL</defval>
        </param>
        <briefdescription>
<para>construct a new engine, including aaccess to callbacks </para>
        </briefdescription>
        <detaileddescription>
<para>construct a new engine using argc/argv list of arguments </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="347" column="3" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="1101" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a2bdd3fe6e72fab67c6d0a34dad19f7a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~YAPEngine</definition>
        <argsstring>()</argsstring>
        <name>~YAPEngine</name>
        <qualifiedname>YAPEngine::~YAPEngine</qualifiedname>
        <briefdescription>
<para>kill engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="350" column="3" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="350" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a6ab0029f62d00154dee04cf6327ead70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void delYAPCallback</definition>
        <argsstring>()</argsstring>
        <name>delYAPCallback</name>
        <qualifiedname>YAPEngine::delYAPCallback</qualifiedname>
        <briefdescription>
<para>remove current callback </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="352" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="352" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a46fab19a7fd445dd66af064d18514d33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setYAPCallback</definition>
        <argsstring>(YAPCallback *cb)</argsstring>
        <name>setYAPCallback</name>
        <qualifiedname>YAPEngine::setYAPCallback</qualifiedname>
        <param>
          <type><ref refid="classYAPCallback" kindref="compound">YAPCallback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>set a new callback </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="354" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ae354e221a13a433e1acbd6939747a473" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void run</definition>
        <argsstring>(char *s)</argsstring>
        <name>run</name>
        <qualifiedname>YAPEngine::run</qualifiedname>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>execute the callback </para>
        </briefdescription>
        <detaileddescription>
<para>void <ref refid="classYAPEngine_1ae354e221a13a433e1acbd6939747a473" kindref="member">run()</ref> { if (_callback) _callback.run(); } execute the callback with a text argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="361" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <qualifiedname>YAPEngine::close</qualifiedname>
        <briefdescription>
<para>stop yap </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="366" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="366" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ae9649a3c36b3d2060e9b8bf174f9048e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hasError</definition>
        <argsstring>()</argsstring>
        <name>hasError</name>
        <qualifiedname>YAPEngine::hasError</qualifiedname>
        <briefdescription>
<para>execute the callback with a text argument </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="369" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="369" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a3cd194d59ef5498e97773efa0364d0c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref> *</type>
        <definition>YAPQuery * query</definition>
        <argsstring>(const char *s)</argsstring>
        <name>query</name>
        <qualifiedname>YAPEngine::query</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>build a query on the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="373" column="12" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="373" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a555baa9f5c14287a5812bc721b586187" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref> *</type>
        <definition>YAPQuery * query</definition>
        <argsstring>(YAPTerm t)</argsstring>
        <name>query</name>
        <qualifiedname>YAPEngine::query</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>build a query from a term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="375" column="12" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="375" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ace80bece9996c4a9b68dbc51d491e481" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref> *</type>
        <definition>YAPQuery * qt</definition>
        <argsstring>(Term t)</argsstring>
        <name>qt</name>
        <qualifiedname>YAPEngine::qt</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>build a query from a Prolog term (internal) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="377" column="12" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="377" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a6becd26c60fabeaa919022cc29e6a337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
        <definition>YAPTerm getTerm</definition>
        <argsstring>(yhandle_t h)</argsstring>
        <name>getTerm</name>
        <qualifiedname>YAPEngine::getTerm</qualifiedname>
        <param>
          <type>yhandle_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>given a handle, fetch a term from the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="379" column="18" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="379" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a8952a113ce6f388e5d0426fe80717b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool call</definition>
        <argsstring>(YAPPredicate ap, YAPTerm ts[])</argsstring>
        <name>call</name>
        <qualifiedname>YAPEngine::call</qualifiedname>
        <param>
          <type><ref refid="classYAPPredicate" kindref="compound">YAPPredicate</ref></type>
          <declname>ap</declname>
        </param>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>ts</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>current directory for the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="381" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="655" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a2de796bff100bf03124c7bc97a4179af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool goal</definition>
        <argsstring>(YAPTerm Yt, YAPModule module, bool release=false)</argsstring>
        <name>goal</name>
        <qualifiedname>YAPEngine::goal</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>Yt</declname>
        </param>
        <param>
          <type><ref refid="classYAPModule" kindref="compound">YAPModule</ref></type>
          <declname>module</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>release</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>current directory for the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="383" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="383" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1acf6c9bf272720182d7ddf422fc5e4fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mgoal</definition>
        <argsstring>(Term t, Term tmod, bool release=false)</argsstring>
        <name>mgoal</name>
        <qualifiedname>YAPEngine::mgoal</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>tmod</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>release</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>ru1n a goal in a module </para>
        </briefdescription>
        <detaileddescription>
<para>By default, memory will only be fully recovered on backtracking The release option ensures backtracking is called at the very end </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="391" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="684" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a9cd8d4a30e8ee44118a7bf1bcbeaa2ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool goal</definition>
        <argsstring>(YAPTerm t, bool release=false)</argsstring>
        <name>goal</name>
        <qualifiedname>YAPEngine::goal</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>release</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>current directory for the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="394" column="10" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="394" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ad4749771b74a367f58248291cbb1672f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool goal</definition>
        <argsstring>(Term t, bool release=false)</argsstring>
        <name>goal</name>
        <qualifiedname>YAPEngine::goal</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>release</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="395" column="10" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="395" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a13cd7e44108c578bab677a74945459da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reSet</definition>
        <argsstring>()</argsstring>
        <name>reSet</name>
        <qualifiedname>YAPEngine::reSet</qualifiedname>
        <briefdescription>
<para>reset Prolog state </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="399" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="1230" bodyend="1244"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a23b477d0e2d399f75d585d154c346591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <qualifiedname>YAPEngine::release</qualifiedname>
        <briefdescription>
<para>assune that there are no stack pointers, just release memory for last execution </para>
        </briefdescription>
        <detaileddescription>
<para>called when a query must be terminated and its state fully recovered, </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="402" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="752" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ae34cc57d0e0a7c58f3096e89efb4c681" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool load_file</definition>
        <argsstring>(std::string FileName, std::string module=nullptr)</argsstring>
        <name>load_file</name>
        <qualifiedname>YAPEngine::load_file</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>FileName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>module</declname>
          <defval><ref refid="Yap_8h_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref></defval>
        </param>
        <briefdescription>
<para>call load_files to load a file in a module </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="405" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="405" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ab182f7eb1802947e1f42116e0a3627e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool load_library</definition>
        <argsstring>(std::string FileName, std::string module=&quot;user&quot;)</argsstring>
        <name>load_library</name>
        <qualifiedname>YAPEngine::load_library</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>FileName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>module</declname>
          <defval>&quot;user&quot;</defval>
        </param>
        <briefdescription>
<para>call load_files to load a library(file) in a module </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="412" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="412" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a0343ec9a3f164e4ef4f35a2e9871472e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool load_text</definition>
        <argsstring>(std::string text, std::string *module=nullptr)</argsstring>
        <name>load_text</name>
        <qualifiedname>YAPEngine::load_text</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>text</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>module</declname>
          <defval><ref refid="Yap_8h_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref></defval>
        </param>
        <briefdescription>
<para>load a string as if it was a file </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="478" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="478" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1af23d1de882d7e14e06d95ccafe828775" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * currentDir</definition>
        <argsstring>()</argsstring>
        <name>currentDir</name>
        <qualifiedname>YAPEngine::currentDir</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="492" column="14" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="492" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a0c96dba6b11507c2b38a22fda3b0abe9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * version</definition>
        <argsstring>()</argsstring>
        <name>version</name>
        <qualifiedname>YAPEngine::version</qualifiedname>
        <briefdescription>
<para>report YAP version as a string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="498" column="14" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a6294440a706d6ea1409a559339e796ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
        <definition>YAPTerm funCall</definition>
        <argsstring>(YAPTerm t)</argsstring>
        <name>funCall</name>
        <qualifiedname>YAPEngine::funCall</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="505" column="11" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="505" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a21ce36207a06adfa5cb564d8bf37b8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term fun</definition>
        <argsstring>(Term t)</argsstring>
        <name>fun</name>
        <qualifiedname>YAPEngine::fun</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="506" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="761" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a66f6cf0dad4761e5ed5f1d7c56f2db51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool setStringFlag</definition>
        <argsstring>(std::string arg, std::string path)</argsstring>
        <name>setStringFlag</name>
        <qualifiedname>YAPEngine::setStringFlag</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="510" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="510" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a0ad531f4dd9dbd2492b4439e9aa831c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term top_level</definition>
        <argsstring>(std::string s)</argsstring>
        <name>top_level</name>
        <qualifiedname>YAPEngine::top_level</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>parse string s and make term with var names available</para>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="515" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="1246" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a404234c0162c2ef0ce1e9acf0d82c1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term next_answer</definition>
        <argsstring>(YAPQuery *&amp;Q)</argsstring>
        <name>next_answer</name>
        <qualifiedname>YAPEngine::next_answer</qualifiedname>
        <param>
          <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref> *&amp;</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>parse string s and make term with var names available</para>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="516" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="1269" bodyend="1282"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a4cc0d261467a768905476e482f3b84f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPEngine</definition>
        <argsstring>(YAPEngineArgs cargs=YAPEngineArgs())</argsstring>
        <name>YAPEngine</name>
        <qualifiedname>YAPEngine::YAPEngine</qualifiedname>
        <param>
          <type><ref refid="structYAPEngineArgs" kindref="compound">YAPEngineArgs</ref></type>
          <declname>cargs</declname>
          <defval><ref refid="structYAPEngineArgs" kindref="compound">YAPEngineArgs</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="333" column="3" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="333" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a669bd5cb31d888e675720003cd345376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAPEngine</definition>
        <argsstring>(int argc, char *argv[], YAPCallback *callback=(YAPCallback *) NULL)</argsstring>
        <name>YAPEngine</name>
        <qualifiedname>YAPEngine::YAPEngine</qualifiedname>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="classYAPCallback" kindref="compound">YAPCallback</ref> *</type>
          <declname>callback</declname>
          <defval>(<ref refid="classYAPCallback" kindref="compound">YAPCallback</ref> *) NULL</defval>
        </param>
        <briefdescription>
<para>construct a new engine, including aaccess to callbacks </para>
        </briefdescription>
        <detaileddescription>
<para>construct a new engine using argc/argv list of arguments </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="346" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a2bdd3fe6e72fab67c6d0a34dad19f7a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~YAPEngine</definition>
        <argsstring>()</argsstring>
        <name>~YAPEngine</name>
        <qualifiedname>YAPEngine::~YAPEngine</qualifiedname>
        <briefdescription>
<para>kill engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="349" column="3" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a6ab0029f62d00154dee04cf6327ead70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void delYAPCallback</definition>
        <argsstring>()</argsstring>
        <name>delYAPCallback</name>
        <qualifiedname>YAPEngine::delYAPCallback</qualifiedname>
        <briefdescription>
<para>remove current callback </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="351" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="351" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a46fab19a7fd445dd66af064d18514d33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setYAPCallback</definition>
        <argsstring>(YAPCallback *cb)</argsstring>
        <name>setYAPCallback</name>
        <qualifiedname>YAPEngine::setYAPCallback</qualifiedname>
        <param>
          <type><ref refid="classYAPCallback" kindref="compound">YAPCallback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>set a new callback </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="353" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ae354e221a13a433e1acbd6939747a473" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void run</definition>
        <argsstring>(char *s)</argsstring>
        <name>run</name>
        <qualifiedname>YAPEngine::run</qualifiedname>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>execute the callback </para>
        </briefdescription>
        <detaileddescription>
<para>void <ref refid="classYAPEngine_1ae354e221a13a433e1acbd6939747a473" kindref="member">run()</ref> { if (_callback) _callback.run(); } execute the callback with a text argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="360" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <qualifiedname>YAPEngine::close</qualifiedname>
        <briefdescription>
<para>stop yap </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="365" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="365" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ae9649a3c36b3d2060e9b8bf174f9048e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hasError</definition>
        <argsstring>()</argsstring>
        <name>hasError</name>
        <qualifiedname>YAPEngine::hasError</qualifiedname>
        <briefdescription>
<para>execute the callback with a text argument </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="368" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="368" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a3cd194d59ef5498e97773efa0364d0c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref> *</type>
        <definition>YAPQuery * query</definition>
        <argsstring>(const char *s)</argsstring>
        <name>query</name>
        <qualifiedname>YAPEngine::query</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>build a query on the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="372" column="12" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="372" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a555baa9f5c14287a5812bc721b586187" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref> *</type>
        <definition>YAPQuery * query</definition>
        <argsstring>(YAPTerm t)</argsstring>
        <name>query</name>
        <qualifiedname>YAPEngine::query</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>build a query from a term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="374" column="12" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="374" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ace80bece9996c4a9b68dbc51d491e481" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref> *</type>
        <definition>YAPQuery * qt</definition>
        <argsstring>(Term t)</argsstring>
        <name>qt</name>
        <qualifiedname>YAPEngine::qt</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>build a query from a Prolog term (internal) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="376" column="12" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="376" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a6becd26c60fabeaa919022cc29e6a337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
        <definition>YAPTerm getTerm</definition>
        <argsstring>(yhandle_t h)</argsstring>
        <name>getTerm</name>
        <qualifiedname>YAPEngine::getTerm</qualifiedname>
        <param>
          <type>yhandle_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>given a handle, fetch a term from the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="378" column="18" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="378" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a8952a113ce6f388e5d0426fe80717b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool call</definition>
        <argsstring>(YAPPredicate ap, YAPTerm ts[])</argsstring>
        <name>call</name>
        <qualifiedname>YAPEngine::call</qualifiedname>
        <param>
          <type><ref refid="classYAPPredicate" kindref="compound">YAPPredicate</ref></type>
          <declname>ap</declname>
        </param>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>ts</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>current directory for the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="380" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a2de796bff100bf03124c7bc97a4179af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool goal</definition>
        <argsstring>(YAPTerm Yt, YAPModule module, bool release=false)</argsstring>
        <name>goal</name>
        <qualifiedname>YAPEngine::goal</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>Yt</declname>
        </param>
        <param>
          <type><ref refid="classYAPModule" kindref="compound">YAPModule</ref></type>
          <declname>module</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>release</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>current directory for the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="382" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="382" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1acf6c9bf272720182d7ddf422fc5e4fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mgoal</definition>
        <argsstring>(Term t, Term tmod, bool release=false)</argsstring>
        <name>mgoal</name>
        <qualifiedname>YAPEngine::mgoal</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>tmod</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>release</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>ru1n a goal in a module </para>
        </briefdescription>
        <detaileddescription>
<para>By default, memory will only be fully recovered on backtracking The release option ensures backtracking is called at the very end </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="390" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a9cd8d4a30e8ee44118a7bf1bcbeaa2ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool goal</definition>
        <argsstring>(YAPTerm t, bool release=false)</argsstring>
        <name>goal</name>
        <qualifiedname>YAPEngine::goal</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>release</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>current directory for the engine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="393" column="10" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="393" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ad4749771b74a367f58248291cbb1672f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool goal</definition>
        <argsstring>(Term t, bool release=false)</argsstring>
        <name>goal</name>
        <qualifiedname>YAPEngine::goal</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>release</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="394" column="10" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a13cd7e44108c578bab677a74945459da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reSet</definition>
        <argsstring>()</argsstring>
        <name>reSet</name>
        <qualifiedname>YAPEngine::reSet</qualifiedname>
        <briefdescription>
<para>reset Prolog state </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="398" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a23b477d0e2d399f75d585d154c346591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <qualifiedname>YAPEngine::release</qualifiedname>
        <briefdescription>
<para>assune that there are no stack pointers, just release memory for last execution </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="401" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1afc768574012af7d5e787e8cdd9a44286" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool load_file</definition>
        <argsstring>(std::string FileName, std::string module=&quot;user&quot;)</argsstring>
        <name>load_file</name>
        <qualifiedname>YAPEngine::load_file</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>FileName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>module</declname>
          <defval>&quot;user&quot;</defval>
        </param>
        <briefdescription>
<para>call load_files to load a file in a module </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="404" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="404" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1af599b8e92eeeabe3a8d3314b2d1bc146" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool load_library</definition>
        <argsstring>(std::string FileName)</argsstring>
        <name>load_library</name>
        <qualifiedname>YAPEngine::load_library</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>FileName</declname>
        </param>
        <briefdescription>
<para>call load_files to load a library(file) in a module </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="411" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="411" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a0ad531f4dd9dbd2492b4439e9aa831c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term top_level</definition>
        <argsstring>(std::string s)</argsstring>
        <name>top_level</name>
        <qualifiedname>YAPEngine::top_level</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="420" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1ab2ca0dd7a737f66a830f374c7accabe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term next_answer</definition>
        <argsstring>(YAPQuery *&amp;)</argsstring>
        <name>next_answer</name>
        <qualifiedname>YAPEngine::next_answer</qualifiedname>
        <param>
          <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref> *&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="421" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a21ce36207a06adfa5cb564d8bf37b8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term fun</definition>
        <argsstring>(Term t)</argsstring>
        <name>fun</name>
        <qualifiedname>YAPEngine::fun</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="426" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a6294440a706d6ea1409a559339e796ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
        <definition>YAPTerm funCall</definition>
        <argsstring>(YAPTerm t)</argsstring>
        <name>funCall</name>
        <qualifiedname>YAPEngine::funCall</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="427" column="11" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="427" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a0343ec9a3f164e4ef4f35a2e9871472e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool load_text</definition>
        <argsstring>(std::string text, std::string *module=nullptr)</argsstring>
        <name>load_text</name>
        <qualifiedname>YAPEngine::load_text</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>text</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>module</declname>
          <defval><ref refid="Yap_8h_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref></defval>
        </param>
        <briefdescription>
<para>load a string as if it was a file </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="486" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="486" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1af23d1de882d7e14e06d95ccafe828775" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * currentDir</definition>
        <argsstring>()</argsstring>
        <name>currentDir</name>
        <qualifiedname>YAPEngine::currentDir</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="501" column="14" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="501" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a0c96dba6b11507c2b38a22fda3b0abe9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * version</definition>
        <argsstring>()</argsstring>
        <name>version</name>
        <qualifiedname>YAPEngine::version</qualifiedname>
        <briefdescription>
<para>report YAP version as a string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="507" column="14" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="507" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="classYAPEngine_1a66f6cf0dad4761e5ed5f1d7c56f2db51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool setStringFlag</definition>
        <argsstring>(std::string arg, std::string path)</argsstring>
        <name>setStringFlag</name>
        <qualifiedname>YAPEngine::setStringFlag</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapq.hh" line="514" column="8" bodyfile="/home/vsc/github/yap/CXX/yapq.hh" bodystart="514" bodyend="517"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>YAP Engine: takes care of the execution environment where we can go executing goals. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/vsc/github/yap/CXX/tmp/yapq.hh" line="322" column="1" bodyfile="/home/vsc/github/yap/CXX/tmp/yapq.hh" bodystart="322" bodyend="518"/>
    <listofallmembers>
      <member refid="classYAPEngine_1aebc57b169b4f12371df4b48677259cf5" prot="private" virt="non-virtual"><scope>YAPEngine</scope><name>_callback</name></member>
      <member refid="classYAPEngine_1a8952a113ce6f388e5d0426fe80717b1b" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>call</name></member>
      <member refid="classYAPEngine_1a8952a113ce6f388e5d0426fe80717b1b" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>call</name></member>
      <member refid="classYAPEngine_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>close</name></member>
      <member refid="classYAPEngine_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>close</name></member>
      <member refid="classYAPEngine_1af23d1de882d7e14e06d95ccafe828775" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>currentDir</name></member>
      <member refid="classYAPEngine_1af23d1de882d7e14e06d95ccafe828775" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>currentDir</name></member>
      <member refid="classYAPEngine_1a6ab0029f62d00154dee04cf6327ead70" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>delYAPCallback</name></member>
      <member refid="classYAPEngine_1a6ab0029f62d00154dee04cf6327ead70" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>delYAPCallback</name></member>
      <member refid="classYAPEngine_1a08320a9eec6b71a66c897a84639bb12d" prot="private" virt="non-virtual"><scope>YAPEngine</scope><name>doInit</name></member>
      <member refid="classYAPEngine_1a08320a9eec6b71a66c897a84639bb12d" prot="private" virt="non-virtual"><scope>YAPEngine</scope><name>doInit</name></member>
      <member refid="classYAPEngine_1a3ee6b48c1f17235caca5656860e8ec32" prot="private" virt="non-virtual"><scope>YAPEngine</scope><name>e</name></member>
      <member refid="classYAPEngine_1a570bac269d3d7b01f7aa9cc979496ab8" prot="private" virt="non-virtual"><scope>YAPEngine</scope><name>engine_args</name></member>
      <member refid="classYAPEngine_1a21ce36207a06adfa5cb564d8bf37b8de" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>fun</name></member>
      <member refid="classYAPEngine_1a21ce36207a06adfa5cb564d8bf37b8de" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>fun</name></member>
      <member refid="classYAPEngine_1a6294440a706d6ea1409a559339e796ed" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>funCall</name></member>
      <member refid="classYAPEngine_1a6294440a706d6ea1409a559339e796ed" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>funCall</name></member>
      <member refid="classYAPEngine_1a6becd26c60fabeaa919022cc29e6a337" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>getTerm</name></member>
      <member refid="classYAPEngine_1a6becd26c60fabeaa919022cc29e6a337" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>getTerm</name></member>
      <member refid="classYAPEngine_1a2de796bff100bf03124c7bc97a4179af" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>goal</name></member>
      <member refid="classYAPEngine_1a9cd8d4a30e8ee44118a7bf1bcbeaa2ec" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>goal</name></member>
      <member refid="classYAPEngine_1ad4749771b74a367f58248291cbb1672f" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>goal</name></member>
      <member refid="classYAPEngine_1a2de796bff100bf03124c7bc97a4179af" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>goal</name></member>
      <member refid="classYAPEngine_1a9cd8d4a30e8ee44118a7bf1bcbeaa2ec" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>goal</name></member>
      <member refid="classYAPEngine_1ad4749771b74a367f58248291cbb1672f" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>goal</name></member>
      <member refid="classYAPEngine_1ae9649a3c36b3d2060e9b8bf174f9048e" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>hasError</name></member>
      <member refid="classYAPEngine_1ae9649a3c36b3d2060e9b8bf174f9048e" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>hasError</name></member>
      <member refid="classYAPEngine_1ae34cc57d0e0a7c58f3096e89efb4c681" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>load_file</name></member>
      <member refid="classYAPEngine_1afc768574012af7d5e787e8cdd9a44286" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>load_file</name></member>
      <member refid="classYAPEngine_1ab182f7eb1802947e1f42116e0a3627e3" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>load_library</name></member>
      <member refid="classYAPEngine_1af599b8e92eeeabe3a8d3314b2d1bc146" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>load_library</name></member>
      <member refid="classYAPEngine_1a0343ec9a3f164e4ef4f35a2e9871472e" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>load_text</name></member>
      <member refid="classYAPEngine_1a0343ec9a3f164e4ef4f35a2e9871472e" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>load_text</name></member>
      <member refid="classYAPEngine_1acf6c9bf272720182d7ddf422fc5e4fcb" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>mgoal</name></member>
      <member refid="classYAPEngine_1acf6c9bf272720182d7ddf422fc5e4fcb" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>mgoal</name></member>
      <member refid="classYAPEngine_1a404234c0162c2ef0ce1e9acf0d82c1df" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>next_answer</name></member>
      <member refid="classYAPEngine_1ab2ca0dd7a737f66a830f374c7accabe2" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>next_answer</name></member>
      <member refid="classYAPEngine_1a0baa2a14fddc9486557407a0f5813b8f" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>port</name></member>
      <member refid="classYAPEngine_1ace80bece9996c4a9b68dbc51d491e481" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>qt</name></member>
      <member refid="classYAPEngine_1ace80bece9996c4a9b68dbc51d491e481" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>qt</name></member>
      <member refid="classYAPEngine_1a3cd194d59ef5498e97773efa0364d0c7" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>query</name></member>
      <member refid="classYAPEngine_1a555baa9f5c14287a5812bc721b586187" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>query</name></member>
      <member refid="classYAPEngine_1a3cd194d59ef5498e97773efa0364d0c7" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>query</name></member>
      <member refid="classYAPEngine_1a555baa9f5c14287a5812bc721b586187" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>query</name></member>
      <member refid="classYAPEngine_1a23b477d0e2d399f75d585d154c346591" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>release</name></member>
      <member refid="classYAPEngine_1a23b477d0e2d399f75d585d154c346591" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>release</name></member>
      <member refid="classYAPEngine_1a13cd7e44108c578bab677a74945459da" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>reSet</name></member>
      <member refid="classYAPEngine_1a13cd7e44108c578bab677a74945459da" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>reSet</name></member>
      <member refid="classYAPEngine_1ad42d04547cbdb8f6b1936868a04be7c3" prot="private" virt="non-virtual"><scope>YAPEngine</scope><name>rewriteUndefEngineQuery</name></member>
      <member refid="classYAPEngine_1ad42d04547cbdb8f6b1936868a04be7c3" prot="private" virt="non-virtual"><scope>YAPEngine</scope><name>rewriteUndefEngineQuery</name></member>
      <member refid="classYAPEngine_1ae354e221a13a433e1acbd6939747a473" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>run</name></member>
      <member refid="classYAPEngine_1ae354e221a13a433e1acbd6939747a473" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>run</name></member>
      <member refid="classYAPEngine_1a66f6cf0dad4761e5ed5f1d7c56f2db51" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>setStringFlag</name></member>
      <member refid="classYAPEngine_1a66f6cf0dad4761e5ed5f1d7c56f2db51" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>setStringFlag</name></member>
      <member refid="classYAPEngine_1a46fab19a7fd445dd66af064d18514d33" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>setYAPCallback</name></member>
      <member refid="classYAPEngine_1a46fab19a7fd445dd66af064d18514d33" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>setYAPCallback</name></member>
      <member refid="classYAPEngine_1a0ad531f4dd9dbd2492b4439e9aa831c8" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>top_level</name></member>
      <member refid="classYAPEngine_1a0ad531f4dd9dbd2492b4439e9aa831c8" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>top_level</name></member>
      <member refid="classYAPEngine_1a0c96dba6b11507c2b38a22fda3b0abe9" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>version</name></member>
      <member refid="classYAPEngine_1a0c96dba6b11507c2b38a22fda3b0abe9" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>version</name></member>
      <member refid="classYAPEngine_1a08880d5ab932db3a0854e622052a82d4" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>YAPEngine</name></member>
      <member refid="classYAPEngine_1a669bd5cb31d888e675720003cd345376" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>YAPEngine</name></member>
      <member refid="classYAPEngine_1a4cc0d261467a768905476e482f3b84f9" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>YAPEngine</name></member>
      <member refid="classYAPEngine_1a669bd5cb31d888e675720003cd345376" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>YAPEngine</name></member>
      <member refid="classYAPEngine_1ace245459777a0c015b2947c9b9eb0fb4" prot="private" virt="non-virtual"><scope>YAPEngine</scope><name>yerror</name></member>
      <member refid="classYAPEngine_1a2bdd3fe6e72fab67c6d0a34dad19f7a8" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>~YAPEngine</name></member>
      <member refid="classYAPEngine_1a2bdd3fe6e72fab67c6d0a34dad19f7a8" prot="public" virt="non-virtual"><scope>YAPEngine</scope><name>~YAPEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
