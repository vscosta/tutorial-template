<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classpredsort_23" kind="class" language="Prolog" prot="public">
    <compoundname>predsort/3</compoundname>
    <briefdescription>
<para>predsort(:Compare, +List, -Sorted) is det </para>
    </briefdescription>
    <detaileddescription>
<para>% % Sorts similar to <ref refid="classsort_22" kindref="compound">sort/2</ref> , but determines the order of two terms % by calling Compare(-Delta, +E1, +E2) This call must unify % Delta with one of &lt;, &gt; or = If built-in predicate <ref refid="classcompare_23" kindref="compound">compare/3</ref> is % used, the result is the same as <ref refid="classsort_22" kindref="compound">sort/2</ref> See also <ref refid="classkeysort_22" kindref="compound">keysort/2</ref></para>
<para><bold>predsort</bold>(+ <emphasis>Pred</emphasis>, + <emphasis>List</emphasis>, - <emphasis>Sorted</emphasis>)</para>
<para>Sorts similar to <ref refid="classsort_22" kindref="compound">sort/2</ref> , but determines the order of two terms by calling <emphasis>Pred</emphasis>(- <emphasis>Delta</emphasis>, + <emphasis>E1</emphasis>, + <emphasis>E2</emphasis>) This call must unify <emphasis>Delta</emphasis> with one of <computeroutput>&lt;</computeroutput>, <computeroutput>&gt;</computeroutput> or <computeroutput>=</computeroutput> If built-in predicate <ref refid="classcompare_23" kindref="compound">compare/3</ref> is used, the result is the same as <ref refid="classsort_22" kindref="compound">sort/2</ref> </para>
    </detaileddescription>
    <location file="/home/vsc/github/yap/pl/sort.yap" line="1" column="1" bodyfile="/home/vsc/github/yap/pl/sort.yap" bodystart="1" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
