<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="alloc_8c" kind="file" language="C++">
    <compoundname>alloc.c</compoundname>
    <includes refid="Yap_8h" local="yes">Yap.h</includes>
    <includes refid="YapHeap_8h" local="yes">YapHeap.h</includes>
    <includes refid="Yatom_8h" local="yes">Yatom.h</includes>
    <includes refid="alloc_8h" local="yes">alloc.h</includes>
    <includes refid="yapio_8h" local="yes">yapio.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="YapEval_8h" local="yes">YapEval.h</includes>
    <includes refid="YapStreams_8h" local="yes">YapStreams.h</includes>
    <includes refid="YapText_8h" local="yes">YapText.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">wchar.h</includes>
    <incdepgraph>
      <node id="1">
        <label>C/alloc.c</label>
        <link refid="alloc_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Atoms.h</label>
        <link refid="Atoms_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Regs.h</label>
        <link refid="Regs_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ScannerTypes.h</label>
        <link refid="ScannerTypes_8h_source"/>
      </node>
      <node id="27">
        <label>TermExt.h</label>
        <link refid="TermExt_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Yap.h</label>
        <link refid="Yap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>YapCompoundTerm.h</label>
        <link refid="YapCompoundTerm_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>YapEval.h</label>
        <link refid="YapEval_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>YapFlags.h</label>
        <link refid="YapFlags_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>YapGFlagInfo.h</label>
        <link refid="YapGFlagInfo_8h"/>
      </node>
      <node id="36">
        <label>YapHandles.h</label>
        <link refid="YapHandles_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>YapHeap.h</label>
        <link refid="YapHeap_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>YapLFlagInfo.h</label>
        <link refid="YapLFlagInfo_8h"/>
      </node>
      <node id="26">
        <label>YapOpcodes.h</label>
        <link refid="YapOpcodes_8h_source"/>
      </node>
      <node id="35">
        <label>YapSignals.h</label>
        <link refid="YapSignals_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>YapTags.h</label>
        <link refid="YapTags_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>YapText.h</label>
        <link refid="YapText_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Yapproto.h</label>
        <link refid="Yapproto_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>Yatom.h</label>
        <link refid="Yatom_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>alloc.h</label>
        <link refid="alloc_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>amidefs.h</label>
        <link refid="amidefs_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>amiops.h</label>
        <link refid="amiops_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>arrays.h</label>
        <link refid="arrays_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>corout.h</label>
        <link refid="corout_8h_source"/>
      </node>
      <node id="42">
        <label>generated/h0globals.h</label>
        <link refid="h0globals_8h_source"/>
      </node>
      <node id="41">
        <label>generated/h0struct.h</label>
        <link refid="h0struct_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>generated/hlocals.h</label>
        <link refid="hlocals_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>generated/tatoms.h</label>
        <link refid="tatoms_8h_source"/>
      </node>
      <node id="34">
        <label>gprof.h</label>
        <link refid="gprof_8h_source"/>
      </node>
      <node id="5">
        <label>inline-only.h</label>
        <link refid="inline-only_8h_source"/>
      </node>
      <node id="44">
        <label>locals.h</label>
        <link refid="locals_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>nolocks.h</label>
        <link refid="nolocks_8h_source"/>
      </node>
      <node id="19">
        <label>threads.h</label>
        <link refid="threads_8h_source"/>
      </node>
      <node id="49">
        <label>GitSHA1.h</label>
        <link refid="GitSHA1_8h_source"/>
      </node>
      <node id="54">
        <label>VFS.h</label>
        <link refid="VFS_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>YapDefs.h</label>
        <link refid="YapDefs_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>YapEncoding.h</label>
        <link refid="YapEncoding_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>YapError.h</label>
        <link refid="YapError_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>YapErrors.h</label>
        <link refid="YapErrors_8h"/>
      </node>
      <node id="18">
        <label>YapFormat.h</label>
        <link refid="YapFormat_8h_source"/>
      </node>
      <node id="20">
        <label>YapInit.h</label>
        <link refid="YapInit_8h"/>
      </node>
      <node id="56">
        <label>YapStreams.h</label>
        <link refid="YapStreams_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>YapTerm.h</label>
        <link refid="YapTerm_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>YapUTF8.h</label>
        <link refid="YapUTF8_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>../os/encoding.h</label>
        <link refid="encoding_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>yapio.h</label>
        <link refid="yapio_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>YapConfig.h</label>
      </node>
      <node id="13">
        <label>YapIOConfig.h</label>
      </node>
      <node id="10">
        <label>YapTermConfig.h</label>
      </node>
      <node id="11">
        <label>config.h</label>
      </node>
      <node id="45">
        <label>dlocals.h</label>
      </node>
      <node id="28">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>string.h</label>
      </node>
      <node id="52">
        <label>utf8proc.h</label>
      </node>
      <node id="22">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmblock" prot="public">mblock</innerclass>
    <innerclass refid="structTextBuffer__manager" prot="public">TextBuffer_manager</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__AllocProviders_1gae7520c5477c11965aabeedc033c9862b" prot="public" static="no">
        <name>MASK</name>
        <initializer>0x968e00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="82" column="9" bodyfile="C/alloc.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__AllocProviders_1gaaebf6f78eec2209de6e74592e036696d" prot="public" static="no">
        <name>my_malloc</name>
        <param><defname>sz</defname></param>
        <initializer>Yap_dlmalloc(sz)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="84" column="9" bodyfile="C/alloc.c" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__AllocProviders_1ga86be76076e76be031f1e99db94871093" prot="public" static="no">
        <name>my_realloc</name>
        <param><defname>ptr</defname></param>
        <param><defname>sz</defname></param>
        <initializer>Yap_dlrealloc(ptr, sz)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="85" column="9" bodyfile="C/alloc.c" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__AllocProviders_1ga4418a642b715ef1c2ec4f0721352bbef" prot="public" static="no">
        <name>my_free</name>
        <param><defname>sz</defname></param>
        <initializer>Yap_dlfree(sz)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="86" column="9" bodyfile="C/alloc.c" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__AllocProviders_1gaaebf6f78eec2209de6e74592e036696d" prot="public" static="no">
        <name>my_malloc</name>
        <param><defname>sz</defname></param>
        <initializer>Yap_dlmalloc(sz)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="143" column="9" bodyfile="C/alloc.c" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__AllocProviders_1ga86be76076e76be031f1e99db94871093" prot="public" static="no">
        <name>my_realloc</name>
        <param><defname>ptr</defname></param>
        <param><defname>sz</defname></param>
        <initializer>Yap_dlrealloc(ptr, sz)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="144" column="9" bodyfile="C/alloc.c" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__AllocProviders_1ga4418a642b715ef1c2ec4f0721352bbef" prot="public" static="no">
        <name>my_free</name>
        <param><defname>sz</defname></param>
        <initializer>Yap_dlfree(sz)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="145" column="9" bodyfile="C/alloc.c" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__USE__SYSTEM__MALLOC_1gab9a6c6a171b22ea63593e949fc04762a" prot="public" static="no">
        <name>snprintf3</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <initializer>sprintf(A, C)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="517" column="10" bodyfile="C/alloc.c" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__USE__SYSTEM__MALLOC_1gabe82adc8c14c124c224b2df2801ab9d3" prot="public" static="no">
        <name>snprintf4</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <param><defname>D</defname></param>
        <initializer>sprintf(A, C, D)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="518" column="9" bodyfile="C/alloc.c" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__USE__SYSTEM__MALLOC_1ga7224fddce5f18ae75abb66301019c08c" prot="public" static="no">
        <name>snprintf5</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <param><defname>D</defname></param>
        <param><defname>E</defname></param>
        <initializer>sprintf(A, C, D, <ref refid="YapErrors_8h_1a24e1d04742b1c8d479921c23ce325702" kindref="member">E</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="519" column="9" bodyfile="C/alloc.c" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__USE__SYSTEM__MALLOC_1gaeae4e8a867f28939dcbad0f83121ee76" prot="public" static="no">
        <name>MinHGap</name>
        <initializer>256 * K</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="534" column="9" bodyfile="C/alloc.c" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__USE__SYSTEM__MALLOC_1gaf320ad2ac83dab07eb7e00cba0ac1668" prot="public" static="no">
        <name>MAX_SPACE</name>
        <initializer>128 * 1024 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1399" column="10" bodyfile="C/alloc.c" bodystart="1399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__MALLOC__Wrapper_1gaa4e5ca47d52a8be522912705c27e0d1c" prot="public" static="no">
        <name>MAX_PATHNAME</name>
        <initializer>2048</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1673" column="9" bodyfile="C/alloc.c" bodystart="1673" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__MALLOC__Wrapper_1gad1a8232c7415fa2c6a73fb7dba593b49" prot="public" static="no">
        <type>struct <ref refid="structTextBuffer__manager" kindref="compound">TextBuffer_manager</ref></type>
        <definition>typedef struct TextBuffer_manager text_buffer_t</definition>
        <argsstring></argsstring>
        <name>text_buffer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1687" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__AllocProviders_1gab945c50e92f09ee7992805e457cd16c0" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int write_malloc</definition>
        <argsstring></argsstring>
        <name>write_malloc</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="89" column="5" bodyfile="C/alloc.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__USE__SYSTEM__MALLOC_1ga6deadf703cfc766a38abed0c0db94e0e" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int total_space</definition>
        <argsstring></argsstring>
        <name>total_space</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1402" column="12" bodyfile="C/alloc.c" bodystart="1402" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__AllocProviders_1gab4ff3c0d10db9899fc7cb551b2e9fc9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * my_malloc</definition>
        <argsstring>(size_t sz)</argsstring>
        <name>my_malloc</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="91" column="6" bodyfile="C/alloc.c" bodystart="91" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__AllocProviders_1gae4f19f16a92059fe7d77aa510eed5943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * my_realloc</definition>
        <argsstring>(void *ptr, size_t sz)</argsstring>
        <name>my_realloc</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="108" column="6" bodyfile="C/alloc.c" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__AllocProviders_1gaeb91c3eb5211fce0a46a0a1a78dab50c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void my_free</definition>
        <argsstring>(void *p)</argsstring>
        <name>my_free</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="123" column="6" bodyfile="C/alloc.c" bodystart="123" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga38790216f45aaf25615ba73cb43e1a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDR</type>
        <definition>ADDR Yap_InitPreAllocCodeSpace</definition>
        <argsstring>(int wid)</argsstring>
        <name>Yap_InitPreAllocCodeSpace</name>
        <param>
          <type>int</type>
          <declname>wid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="305" column="6" bodyfile="C/alloc.c" bodystart="305" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga9b69ea0e91755617cddb68f7ad5cb849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDR</type>
        <definition>ADDR Yap_ExpandPreAllocCodeSpace</definition>
        <argsstring>(UInt sz0, void *cip, int safe)</argsstring>
        <name>Yap_ExpandPreAllocCodeSpace</name>
        <param>
          <type>UInt</type>
          <declname>sz0</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cip</declname>
        </param>
        <param>
          <type>int</type>
          <declname>safe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="358" column="6" bodyfile="C/alloc.c" bodystart="358" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga8b322afc4571920402d442570213c730" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void FreeBlock</definition>
        <argsstring>(BlockHeader *)</argsstring>
        <name>FreeBlock</name>
        <param>
          <type><ref refid="structFREEB" kindref="compound">BlockHeader</ref> *</type>
          <defname>b</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="589" column="13" bodyfile="C/alloc.c" bodystart="589" bodyend="648" declfile="C/alloc.c" declline="528" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga9212806c1bd560f03aaaaf93c680f9de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structFREEB" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * GetBlock</definition>
        <argsstring>(unsigned long int)</argsstring>
        <name>GetBlock</name>
        <param>
          <type>unsigned long int</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="651" column="1" bodyfile="C/alloc.c" bodystart="651" bodyend="676" declfile="C/alloc.c" declline="529" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga212417dd18785740c9f5065d041dfb25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * AllocHeap</definition>
        <argsstring>(unsigned long int)</argsstring>
        <name>AllocHeap</name>
        <param>
          <type>unsigned long int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="530" column="13" declfile="C/alloc.c" declline="530" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga063cc7fe99d1114c8434fbec63a55991" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RemoveFromFreeList</definition>
        <argsstring>(BlockHeader *)</argsstring>
        <name>RemoveFromFreeList</name>
        <param>
          <type><ref refid="structFREEB" kindref="compound">BlockHeader</ref> *</type>
          <defname>b</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="536" column="13" bodyfile="C/alloc.c" bodystart="536" bodyend="562" declfile="C/alloc.c" declline="531" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga0c9b59649eb14d09d016fccb486ec4a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AddToFreeList</definition>
        <argsstring>(BlockHeader *)</argsstring>
        <name>AddToFreeList</name>
        <param>
          <type><ref refid="structFREEB" kindref="compound">BlockHeader</ref> *</type>
          <defname>b</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="564" column="13" bodyfile="C/alloc.c" bodystart="564" bodyend="587" declfile="C/alloc.c" declline="532" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1gadabf1d3e693bff9930268cc4c26f5c9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * AllocHeap</definition>
        <argsstring>(size_t size)</argsstring>
        <name>AllocHeap</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="678" column="13" bodyfile="C/alloc.c" bodystart="678" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1gad92b58dbc5857c740d322aafc25ebb69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void FreeCodeSpace</definition>
        <argsstring>(char *p)</argsstring>
        <name>FreeCodeSpace</name>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="771" column="13" bodyfile="C/alloc.c" bodystart="771" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga0c627751c304180059e87d35f1fe992e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * AllocCodeSpace</definition>
        <argsstring>(unsigned long int size)</argsstring>
        <name>AllocCodeSpace</name>
        <param>
          <type>unsigned long int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="775" column="13" bodyfile="C/alloc.c" bodystart="775" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1gacb2cdd7e792271dc9cb36ea7a131744a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_FreeCodeSpace</definition>
        <argsstring>(char *p)</argsstring>
        <name>Yap_FreeCodeSpace</name>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="787" column="6" bodyfile="C/alloc.c" bodystart="787" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga7983507c6f485f1eed3428f5a1d207ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Yap_AllocAtomSpace</definition>
        <argsstring>(unsigned long int size)</argsstring>
        <name>Yap_AllocAtomSpace</name>
        <param>
          <type>unsigned long int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="795" column="6" bodyfile="C/alloc.c" bodystart="795" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga234c78e04fb1aa38a4adeef86c435a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_FreeAtomSpace</definition>
        <argsstring>(char *p)</argsstring>
        <name>Yap_FreeAtomSpace</name>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="804" column="6" bodyfile="C/alloc.c" bodystart="804" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga5fe7856a3fa521557042ee9511c06082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Yap_AllocCodeSpace</definition>
        <argsstring>(unsigned long int size)</argsstring>
        <name>Yap_AllocCodeSpace</name>
        <param>
          <type>unsigned long int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="812" column="6" bodyfile="C/alloc.c" bodystart="812" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1gafd38ca089f6d76b256db93d3dddba223" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MALLOC_T</type>
        <definition>static MALLOC_T InitWorkSpace</definition>
        <argsstring>(Int s)</argsstring>
        <name>InitWorkSpace</name>
        <param>
          <type>Int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1404" column="17" bodyfile="C/alloc.c" bodystart="1404" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1gaf01b6a341d1e5e9d9ea819b20f720524" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ExtendWorkSpace</definition>
        <argsstring>(Int s)</argsstring>
        <name>ExtendWorkSpace</name>
        <param>
          <type>Int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1420" column="12" bodyfile="C/alloc.c" bodystart="1420" bodyend="1454"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1gaaa83bc8d1745985be2da689cbc371828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Yap_FreeWorkSpace</definition>
        <argsstring>(void)</argsstring>
        <name>Yap_FreeWorkSpace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1456" column="5" bodyfile="C/alloc.c" bodystart="1456" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga38223a73f30506fd6ae48a85c197e6e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InitHeap</definition>
        <argsstring>(void *heap_addr)</argsstring>
        <name>InitHeap</name>
        <param>
          <type>void *</type>
          <declname>heap_addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1459" column="13" bodyfile="C/alloc.c" bodystart="1459" bodyend="1478"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga084b509645536c3ed4d8bfab6fd3c7fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_InitHeap</definition>
        <argsstring>(void *heap_addr)</argsstring>
        <name>Yap_InitHeap</name>
        <param>
          <type>void *</type>
          <declname>heap_addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1480" column="6" bodyfile="C/alloc.c" bodystart="1480" bodyend="1480"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1gafab60cb3382c643dde1308eb44c3474a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_InitMemory</definition>
        <argsstring>(UInt Trail, UInt Heap, UInt Stack)</argsstring>
        <name>Yap_InitMemory</name>
        <param>
          <type>UInt</type>
          <declname>Trail</declname>
        </param>
        <param>
          <type>UInt</type>
          <declname>Heap</declname>
        </param>
        <param>
          <type>UInt</type>
          <declname>Stack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1482" column="6" bodyfile="C/alloc.c" bodystart="1482" bodyend="1540"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga770365ce190a6ab5535f2a7fcd0859dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_InitExStacks</definition>
        <argsstring>(int wid, int Trail, int Stack)</argsstring>
        <name>Yap_InitExStacks</name>
        <param>
          <type>int</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Trail</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Stack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1542" column="6" bodyfile="C/alloc.c" bodystart="1542" bodyend="1548"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1gab280f88434be0ccbc8eca52780e69497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_add_memory_hole</definition>
        <argsstring>(ADDR Start, ADDR End)</argsstring>
        <name>Yap_add_memory_hole</name>
        <param>
          <type>ADDR</type>
          <declname>Start</declname>
        </param>
        <param>
          <type>ADDR</type>
          <declname>End</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1557" column="6" bodyfile="C/alloc.c" bodystart="1557" bodyend="1557"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga3620352f308958b81a8efaed015e0c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Yap_ExtendWorkSpace</definition>
        <argsstring>(Int s)</argsstring>
        <name>Yap_ExtendWorkSpace</name>
        <param>
          <type>Int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1560" column="5" bodyfile="C/alloc.c" bodystart="1560" bodyend="1568"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1gaa1206192bdaf1b23ab2851022284d41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Yap_ExtendWorkSpaceThroughHole</definition>
        <argsstring>(size_t s)</argsstring>
        <name>Yap_ExtendWorkSpaceThroughHole</name>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1570" column="8" bodyfile="C/alloc.c" bodystart="1570" bodyend="1612"/>
      </memberdef>
      <memberdef kind="function" id="group__USE__SYSTEM__MALLOC_1ga5b04647da78a018f909f47c23bdf2848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_AllocHole</definition>
        <argsstring>(UInt actual_request, UInt total_size)</argsstring>
        <name>Yap_AllocHole</name>
        <param>
          <type>UInt</type>
          <declname>actual_request</declname>
        </param>
        <param>
          <type>UInt</type>
          <declname>total_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1614" column="6" bodyfile="C/alloc.c" bodystart="1614" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga2daf441172e3c48ffc8966ac53bb2286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AllocLevel</definition>
        <argsstring>(void)</argsstring>
        <name>AllocLevel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1689" column="5" bodyfile="C/alloc.c" bodystart="1689" bodyend="1692"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga5cd1537627405f352ee917d9a2561eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insert_block</definition>
        <argsstring>(struct mblock *o)</argsstring>
        <name>insert_block</name>
        <param>
          <type>struct <ref refid="structmblock" kindref="compound">mblock</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1694" column="6" bodyfile="C/alloc.c" bodystart="1694" bodyend="1707"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1gae3f07fe44b7578cda3a0411a55c31d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void release_block</definition>
        <argsstring>(struct mblock *o)</argsstring>
        <name>release_block</name>
        <param>
          <type>struct <ref refid="structmblock" kindref="compound">mblock</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1709" column="7" bodyfile="C/alloc.c" bodystart="1709" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga647f214774a472ab85b854d1016d816a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_text_stack__</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>push_text_stack__</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1726" column="5" bodyfile="C/alloc.c" bodystart="1726" bodyend="1731"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga28b2354dfaabbe427acd05684d30fc6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_text_stack__</definition>
        <argsstring>(int i USES_REGS)</argsstring>
        <name>pop_text_stack__</name>
        <param>
          <type>int i</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1733" column="5" bodyfile="C/alloc.c" bodystart="1733" bodyend="1748"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1gaf5abbc847c818aef7df20d6c9aa1ab2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * pop_output_text_stack__</definition>
        <argsstring>(int i, const void *export USES_REGS)</argsstring>
        <name>pop_output_text_stack__</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *export</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1750" column="6" bodyfile="C/alloc.c" bodystart="1750" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1gaa3e0fce0b33c94fb8aec19cb56098276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * __Malloc</definition>
        <argsstring>(size_t sz USES_REGS)</argsstring>
        <name>__Malloc</name>
        <param>
          <type>size_t sz</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1789" column="6" bodyfile="C/alloc.c" bodystart="1789" bodyend="1803"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1gadbef206ffcbc3f45f07dd59ec6fe5dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * __MallocAtLevel</definition>
        <argsstring>(size_t sz, int atL USES_REGS)</argsstring>
        <name>__MallocAtLevel</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>int atL</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1805" column="6" bodyfile="C/alloc.c" bodystart="1805" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga443c418e6b8e6a3df1dac3d8fa47dbea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * __Realloc</definition>
        <argsstring>(void *pt, size_t sz USES_REGS)</argsstring>
        <name>__Realloc</name>
        <param>
          <type>void *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>size_t sz</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1827" column="6" bodyfile="C/alloc.c" bodystart="1827" bodyend="1847"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga26cf8acde7e1183469ad8a5f4bc87938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * __MallocExportAsRO</definition>
        <argsstring>(const void *pt USES_REGS)</argsstring>
        <name>__MallocExportAsRO</name>
        <param>
          <type>const void *pt</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
<para>Export a local memory object as a RO object to the outside world, that is, recovering as much storage as one can. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1855" column="12" bodyfile="C/alloc.c" bodystart="1855" bodyend="1863"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga0fac695aaa7eeaef250c33174339ade5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __Free</definition>
        <argsstring>(void *pt USES_REGS)</argsstring>
        <name>__Free</name>
        <param>
          <type>void *pt</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1865" column="6" bodyfile="C/alloc.c" bodystart="1865" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="group__MALLOC__Wrapper_1ga4812eb9e3c8899f20f13a21d68ace2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * Yap_InitTextAllocator</definition>
        <argsstring>(void)</argsstring>
        <name>Yap_InitTextAllocator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/alloc.c" line="1872" column="6" bodyfile="C/alloc.c" bodystart="1872" bodyend="1875"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>YAP internalmemory allocator(s) </para>
    </briefdescription>
    <detaileddescription>
<para>It includes the original L Damas allocator; Doug Lea&apos;s adapted memory allocator; and just calling the system malloc It also includes a fast allocator</para>
    </detaileddescription>
    <location file="C/alloc.c"/>
  </compounddef>
</doxygen>
