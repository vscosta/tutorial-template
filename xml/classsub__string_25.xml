<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classsub__string_25" kind="predicate" language="Prolog" prot="public">
    <compoundname>sub_string/5</compoundname>
    <briefdescription>
<para><bold>sub_string</bold>(+ <emphasis>S</emphasis>,? <emphasis>Bef</emphasis>, ? <emphasis>Size</emphasis>, ? <emphasis>After</emphasis>, ? <emphasis>S_out</emphasis>) </para>
    </briefdescription>
    <detaileddescription>
<para>defined in the <emphasis>ISO</emphasis> standard</para>
<para>True when <emphasis>S</emphasis> and <emphasis>S_out</emphasis> are strings such that the <emphasis>S_out</emphasis> has size <emphasis>Size</emphasis> and is a sub-string of <emphasis>S</emphasis>, <emphasis>Bef</emphasis> is the number of characters before, and <emphasis>After</emphasis> the number of characters afterwards</para>
<para>Note that <emphasis>S</emphasis> must always be known, but <emphasis>S_out</emphasis> can be unbound when calling this built-in If all the arguments for <ref refid="classsub__string_25" kindref="compound">sub_string/5</ref> but <emphasis>S</emphasis> are unbound, the built-in will generate all possible sub-strings of <emphasis>S</emphasis></para>
<para>Accepts both atoms and strings </para>
    </detaileddescription>
    <location file="C/atomic.c" line="2763" column="1" bodyfile="C/atomic.c" bodystart="2763" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
