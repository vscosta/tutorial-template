<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="syntax" kind="page">
    <compoundname>syntax</compoundname>
    <title>YAP Syntax</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="syntax_1md_docs_md_syntax"/></para>
<para>We will describe the syntax of YAP at two levels We first will describe the syntax for Prolog terms In a second level we describe the tokens from which Prolog terms are built</para>
<sect2 id="syntax_1autotoc_md12">
<title>[Syntax of Terms ](Formal_Syntax)</title>
<para>Below, we describe the syntax of YAP terms from the different classes of tokens defined above The formalism used will be <emphasis>BNF</emphasis>, extended where necessary with attributes denoting integer precedence or operator type</para>
<para><programlisting><codeline><highlight class="normal">term<sp/><sp/><sp/><sp/><sp/><sp/><sp/>----&gt;<sp/><sp/><sp/><sp/><sp/>subterm(1200)<sp/><sp/><sp/>end_of_term_marker</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">subterm(N)<sp/>----&gt;<sp/><sp/><sp/><sp/><sp/>term(M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[M<sp/>&lt;=<sp/>N]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">term(N)<sp/><sp/><sp/><sp/>----&gt;<sp/><sp/><sp/><sp/><sp/>op(N,<sp/>fx)<sp/>subterm(N-1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op(N,<sp/>fy)<sp/>subterm(N)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subterm(N-1)<sp/>op(N,<sp/>xfx)<sp/>subterm(N-1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subterm(N-1)<sp/>op(N,<sp/>xfy)<sp/>subterm(N)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subterm(N)<sp/>op(N,<sp/>yfx)<sp/>subterm(N-1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subterm(N-1)<sp/>op(N,<sp/>xf)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subterm(N)<sp/>op(N,<sp/>yf)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">term(0)<sp/><sp/><sp/>----&gt;<sp/><sp/><sp/><sp/><sp/><sp/>atom<sp/>&apos;(&apos;<sp/>arguments<sp/>&apos;)&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;(&apos;<sp/>subterm(1200)<sp/><sp/>&apos;)&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;{&apos;<sp/>subterm(1200)<sp/><sp/>&apos;}&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atom</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variable</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arguments<sp/>----&gt;<sp/><sp/><sp/><sp/><sp/><sp/>subterm(999)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subterm(999)<sp/>&apos;,&apos;<sp/>arguments</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">list<sp/><sp/><sp/><sp/><sp/><sp/>----&gt;<sp/><sp/><sp/><sp/><sp/><sp/>&apos;[]&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;[&apos;<sp/>list_expr<sp/>&apos;]&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">list_expr<sp/>----&gt;<sp/><sp/><sp/><sp/><sp/><sp/>subterm(999)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subterm(999)<sp/>list_tail</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">list_tail<sp/>----&gt;<sp/><sp/><sp/><sp/><sp/><sp/>&apos;,&apos;<sp/>list_expr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;,..&apos;<sp/>subterm(999)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;|&apos;<sp/>subterm(999)</highlight></codeline>
</programlisting></para>
<para>Notes:</para>
<para><itemizedlist>
<listitem><para><ref refid="conceptop" kindref="compound">op(N,T)</ref> denotes an atom which has been previously declared with type <emphasis><ref refid="classT" kindref="compound">T</ref></emphasis> and base precedence <emphasis>N</emphasis></para>
</listitem><listitem><para>Since <computeroutput>,</computeroutput> is itself a pre-declared operator with type <computeroutput>xfy</computeroutput> and precedence 1000, if a subterm starts with a &apos;(&apos;, op must be followed by a space to avoid ambiguity with the case of a functor followed by arguments, e.g:</para>
</listitem></itemizedlist>
</para>
<para><programlisting><codeline><highlight class="normal">+<sp/>(a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
</programlisting></para>
<para>is the same as <computeroutput>+(,(a,b))</computeroutput> of arity one; in contrast</para>
<para><programlisting><codeline><highlight class="normal">+(a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
</programlisting></para>
<para>is the same as <computeroutput>+(a,b)</computeroutput> of arity two</para>
<para><itemizedlist>
<listitem><para>In the first rule for term(0) no blank space should exist between atom and <computeroutput>(</computeroutput></para>
</listitem><listitem><para>Each term to be read by the YAP parser must end with a single dot, followed by a blank (in the sense mentioned in the previous paragraph) When a name consisting of a single dot could be taken for the end of term marker, the ambiguity should be avoided by surrounding the dot with single quotes</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="syntax_1autotoc_md13">
<title>[Prolog Tokens ](Tokens)</title>
<para>&quot; string_quoted_characters &quot; string --&gt; ` string_quoted_characters `</para>
<para>string_quoted_characters --&gt; &apos;&quot;&apos; &apos;&quot;&apos; string_quoted_characters string_quoted_characters --&gt; &apos;\&apos; escape_sequence string_quoted_characters string_quoted_characters --&gt; string_character string_quoted_characters</para>
<para>escape_sequence --&gt; &apos;a&apos; | &apos;b&apos; | &apos;r&apos; | &apos;f&apos; | &apos;t&apos; | &apos;n&apos; | &apos;v&apos; escape_sequence --&gt; &apos;\&apos; | &apos;&quot;&apos; | &apos;&apos;&apos; | &apos;`&apos; escape_sequence --&gt; at_most_3_octal_digit_seq_char &apos;\&apos; escape_sequence --&gt; &apos;x&apos; at_most_2_hexa_digit_seq_char &apos;\&apos; </para>
<para>where <computeroutput>string_character</computeroutput> is any character except the double quote (back quote) and escape characters</para>
<para>YAP supports four different textual elements:</para>
<para><itemizedlist>
<listitem><para>Atoms, mentioned above, are textual representations of symbols, that are interned in the data-base They are stored either in ISO-LATIN-1 (first 256 code points), or as UTF-32</para>
</listitem><listitem><para>Strings are atomic representations of text The back-quote character is used to identify these objects in the program Strings exist as stack objects, in the same way as other Prolog terms As Prolog unification cannot be used to manipulate strings, YAP includes built-ins such as string_arg/3 , <ref refid="classsub__string_25" kindref="compound">sub_string/5</ref> , or string_concat to manipulate them efficiently Strings are stored as opaque objects containing a</para>
</listitem><listitem><para>Lists of codes represent text as a list of numbers, where each number is a character code A string of <emphasis>N</emphasis> bytes requires <emphasis>N</emphasis> pairs, that is <emphasis>2N</emphasis> cells, leading to a total of 16 bytes per character on 64 byte machines Thus, they are a very expensive, but very flexible representation, as one can use unification to construct and access string elements</para>
</listitem><listitem><para>Lists of atoms represent text as a list of atoms, where each number has a single character code A string of <emphasis>N</emphasis> bytes also requires <emphasis>2N</emphasis> pairs They have similar properties to lists of codes</para>
</listitem></itemizedlist>
</para>
<para>The flags <computeroutput>double_quotes</computeroutput> and <computeroutput>backquoted_string</computeroutput> change the interpretation of text strings, they can take the values <computeroutput>atom</computeroutput>, <computeroutput>string</computeroutput>, <computeroutput>codes</computeroutput>, and <computeroutput>chars</computeroutput></para>
<para>Examples:</para>
<para><programlisting><codeline><highlight class="normal">&quot;&quot;<sp/><sp/><sp/>&quot;a<sp/>string&quot;<sp/><sp/><sp/>&quot;a<sp/>double-quote:&quot;&quot;&quot;</highlight></codeline>
</programlisting></para>
<para>The first string is an empty string, the last string shows the use of double-quoting</para>
<para>Escape sequences can be used to include the non-printable characters <computeroutput>a</computeroutput> (alert), <computeroutput>b</computeroutput> (backspace), <computeroutput>r</computeroutput> (carriage return), <computeroutput>f</computeroutput> (form feed), <computeroutput>t</computeroutput> (horizontal tabulation), <computeroutput>n</computeroutput> (new line), and <computeroutput>v</computeroutput> (vertical tabulation) Escape sequences also be include the meta-characters <computeroutput>\\</computeroutput>, <computeroutput>&quot;&lt;/tt&gt;, &amp;lsquo;&amp;rsquo;&lt;tt&gt;, and
&lt;/tt&gt;&apos;&apos;` Last, one can use escape sequences to include the characters
either as an octal or hexadecimal number

The next examples demonstrates the use of escape sequences in YAP:

@code 
&quot;\x0c" &quot;\01\&quot; &quot;\f&quot; &quot;\\&quot; </computeroutput></para>
<para><computeroutput>The first three examples return a list including only character 12 (form feed) The last example escapes the escape character</computeroutput></para>
<para><computeroutput>Escape sequences were not available in C-Prolog and in original versions of YAP up to 4.2.0 Escape sequences can be disabled by using:</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">:-<sp/>yap_flag(character_escapes,false).</highlight></codeline>
</programlisting></computeroutput></para>
<para><computeroutput></computeroutput></para>
</sect2>
<sect2 id="syntax_1autotoc_md20">
<title>[Atoms ](Atoms)</title>
<para><computeroutput> Atoms are defined by one of the following rules:</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal"><sp/>atom<sp/>--&gt;<sp/>solo-character</highlight></codeline>
<codeline><highlight class="normal"><sp/>atom<sp/>--&gt;<sp/>lower-case-letter<sp/>name-character*</highlight></codeline>
<codeline><highlight class="normal"><sp/>atom<sp/>--&gt;<sp/>symbol-character+</highlight></codeline>
<codeline><highlight class="normal"><sp/>atom<sp/>--&gt;<sp/>single-quote<sp/><sp/>single-quote</highlight></codeline>
<codeline><highlight class="normal"><sp/>atom<sp/>--&gt;<sp/>&apos;&apos;&apos;<sp/>atom_quoted_characters<sp/>&apos;&apos;&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">atom_quoted_characters<sp/>--&gt;<sp/>&apos;&apos;&apos;<sp/>&apos;&apos;&apos;<sp/>atom_quoted_characters</highlight></codeline>
<codeline><highlight class="normal">atom_quoted_characters<sp/>--&gt;<sp/>&apos;\&apos;<sp/>atom_sequence<sp/>string_quoted_characters</highlight></codeline>
<codeline><highlight class="normal">atom_quoted_characters<sp/>--&gt;<sp/>character<sp/>string_quoted_characters</highlight></codeline>
</programlisting> where:</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">&lt;solo-character&gt;<sp/><sp/><sp/><sp/><sp/>denotes<sp/>one<sp/>of:<sp/><sp/><sp/><sp/>!<sp/>;</highlight></codeline>
<codeline><highlight class="normal">&lt;symbol-character&gt;<sp/><sp/><sp/>denotes<sp/>one<sp/>of:<sp/><sp/><sp/><sp/>#<sp/>&amp;<sp/>*<sp/>+<sp/>-<sp/>.<sp/>/<sp/>:<sp/>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&gt;<sp/>?<sp/>@<sp/>\<sp/>^<sp/>~<sp/>`</highlight></codeline>
<codeline><highlight class="normal">&lt;lower-case-letter&gt;<sp/><sp/>denotes<sp/>one<sp/>of:<sp/><sp/><sp/><sp/>a...z</highlight></codeline>
<codeline><highlight class="normal">&lt;name-character&gt;<sp/><sp/><sp/><sp/><sp/>denotes<sp/>one<sp/>of:<sp/><sp/><sp/><sp/>_<sp/>a...z<sp/>A...Z<sp/>0....9</highlight></codeline>
<codeline><highlight class="normal">&lt;single-quote&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>denotes:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;</highlight></codeline>
</programlisting></computeroutput></para>
<para><computeroutput>and <computeroutput>string_character</computeroutput> denotes any character except the double quote and escape characters Note that escape sequences in strings and atoms follow the same rules</computeroutput></para>
<para><computeroutput>Examples:</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">a<sp/><sp/><sp/>a12x<sp/><sp/><sp/>&apos;$a&apos;<sp/><sp/><sp/>!<sp/><sp/><sp/>=&gt;<sp/><sp/>&apos;1<sp/>2&apos;</highlight></codeline>
</programlisting></computeroutput></para>
<para><computeroutput>Version <computeroutput>4.2.0</computeroutput> of YAP removed the previous limit of 256 characters on an atom Size of an atom is now only limited by the space available in the system</computeroutput></para>
<para><computeroutput></computeroutput></para>
</sect2>
<sect2 id="syntax_1autotoc_md21">
<title>[Variables ](Variables)</title>
<para><computeroutput> Variables are described by:</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">&lt;variable-starter&gt;&lt;variable-character&gt;+</highlight></codeline>
</programlisting> where</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">&lt;variable-starter&gt;<sp/><sp/><sp/>denotes<sp/>one<sp/>of:<sp/><sp/><sp/><sp/>_<sp/>A...Z</highlight></codeline>
<codeline><highlight class="normal">&lt;variable-character&gt;<sp/>denotes<sp/>one<sp/>of:<sp/><sp/><sp/><sp/>_<sp/>a...z<sp/>A...Z</highlight></codeline>
</programlisting></computeroutput></para>
<para><computeroutput>If a variable is referred only once in a term, it needs not to be named and one can use the character <computeroutput>_</computeroutput> to represent the variable These variables are known as anonymous variables Please note that different occurrences of <computeroutput>_</computeroutput> on the same term represent <emphasis>different</emphasis> anonymous variables</computeroutput></para>
<para><computeroutput>YAP accepts both the character <computeroutput>_</computeroutput>, or <computeroutput>_</computeroutput> followed by the usual alphanumeric characters In the former case, each <computeroutput>_</computeroutput> corresponds to a different anonymous variable In the latter case, a name can be used to represent a singleton variable This allows preserving the name of arguments across clauses, as in the following example:</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">member(El,<sp/>[El|_Tail]).</highlight></codeline>
<codeline><highlight class="normal">member(El,<sp/>[_El|Tail])<sp/>:-</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>member(El,<sp/>Tail).</highlight></codeline>
</programlisting></computeroutput></para>
<para><computeroutput>In the example <emphasis>El</emphasis> and <emphasis>Tail</emphasis> refer to the head and tail of the clause clause Using the underscore, we can preserve the name while declaring the variables are singletons</computeroutput></para>
<para><computeroutput></computeroutput></para>
</sect2>
<sect2 id="syntax_1autotoc_md22">
<title>[Punctuation Tokens ](Punctuation_Tokens)</title>
<para><computeroutput> Punctuation tokens consist of one of the following characters:</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">(<sp/>)<sp/>,<sp/>[<sp/>]<sp/>{<sp/>}<sp/>|</highlight></codeline>
</programlisting></computeroutput></para>
<para><computeroutput>These characters are used to group terms</computeroutput></para>
<para><computeroutput></computeroutput></para>
</sect2>
<sect2 id="syntax_1autotoc_md23">
<title>[Character Layout ](LayoutComents)</title>
<para><computeroutput> Any characters with ASCII code less than or equal to 32 appearing before a token are ignored</computeroutput></para>
<para><computeroutput>All the text appearing in a line after the character <emphasis>%</emphasis> is taken to be a comment and ignored (including <emphasis>%</emphasis>) Comments can also be inserted by using the sequence <computeroutput>/\*</computeroutput> to start the comment and <computeroutput>\*</computeroutput> followed by <computeroutput>/</computeroutput> to finish it In the presence of any sequence of comments or layout characters, the YAP parser behaves as if it had found a single blank character The end of a file also counts as a blank character for this purpose</computeroutput></para>
<para><computeroutput></computeroutput></para>
</sect2>
<sect2 id="syntax_1autotoc_md24">
<title>[Encoding Wide Character Support ](WideChars)</title>
<para><computeroutput></computeroutput></para>
<para><computeroutput>YAP now implements a SWI-Prolog compatible interface to wide characters and the Universal Character Set (UCS) The following text was adapted from the SWI-Prolog manual</computeroutput></para>
<para><computeroutput>YAP now supports wide characters, characters with character codes above 255 that cannot be represented in a single byte <emphasis>Universal Character Set</emphasis> (UCS) is the ISO/IEC 10646 standard that specifies a unique 31-bits unsigned integer for any character in any language It is a superset of 16-bit Unicode, which in turn is a superset of ISO 8859-1 (ISO Latin-1), a superset of US-ASCII UCS can handle strings holding characters from multiple languages and character classification (uppercase, lowercase, digit, etc.) and operations such as case-conversion are unambiguously defined</computeroutput></para>
<para><computeroutput> YAP uses UTF-8 internally In this encoding, the representation of code points can have variable length ASCII codes still take a single byte, but western european latin text will have accented characeters that require two bytes in UTF-8 This representational issue is completely transparent to the Prolog user Users of the foreign language interface sometimes need to be aware of these issues though Notice that this will likely change in the future, we probably will use an UTF-8 based representation</computeroutput></para>
<para><computeroutput>YAP assumes that strings are null terminated UTF-8 has no support for encoding null characters within a sequence of codes, but YAP does prove some limited support for an UTF extension that allows such encodings</computeroutput></para>
<para><computeroutput>Character coding comes into view when characters of strings need to be read from or written to file or when they have to be communicated to other software components using the foreign language interface In this section we only deal with I/O through streams, which includes file I/O as well as I/O through network sockets</computeroutput></para>
<para><computeroutput></computeroutput></para>
<sect3 id="syntax_1autotoc_md25">
<title>[Wide character encodings on streams ](Stream_Encoding)</title>
<para><computeroutput> The UCS standard describes all possible characters (or code points, as they include ideograms, ligatures, and other symbols) The current version, Unicode 8.0, allows code points up to 0x10FFFF, and thus allows for 1,114,112 code points See <ulink url="http://unicode.org/charts/">Unicode Charts</ulink> for the supported languages</computeroutput></para>
<para><computeroutput>Notice that most symbols are rarely used Encodings represent the Unicode characters in a way that is more suited for communication The most popular encoding, especially in the context of the web and in the Unix/Linux/BSD/Mac communities, is UTF-8 UTF-8 is compact and as it uses bytes, does not have different endianesses Bytes 0...127 represent simply the corresponding US-ASCII character, while bytes 128...255 are used for multi-byte encoding of characters placed higher in the UCS space</computeroutput></para>
<para><computeroutput>Especially on MS-Windows and Java the 16-bit Unicode standard, represented by pairs of bytes is also popular Originally, Microsoft supported a UCS-2 with 16 bits that could represent only up to 64k characters This was later extended to support the full Unicode, we will call the latter version UTF-16 The extension uses a hole in the first 64K code points Characters above 0xFFFF are divided into two 2-byte words, each one in that hole There are two versions of UTF-16: big and low endian By default, UTF-16 is big endian, in practice most often it is used on Intel hardware that is naturally little endian</computeroutput></para>
<para><computeroutput> UTF-32, often called UCS-4, provides a natural interface where a code point is coded as four octets Unfortunately, it is also more expensive, so it is not as widely used</computeroutput></para>
<para><computeroutput> Last, other encodings are also commonly used One such legacy encoding is ISO-LATIN-1, that supported latin based languages in western europe YAP currently uses either ISO-LATIN-1 or UTF-32 internally</computeroutput></para>
<para><computeroutput>Prolog supports the default encoding used by the Operating System, Namely, YAP checks the variables LANG, LC_ALL and LC_TYPE Say, if at boot YAP detects that the environment variable <computeroutput>LANG</computeroutput> ends in &quot;UTF-8&quot;, this encoding is assumed Otherwise, the default is <computeroutput>text</computeroutput> and the translation is left to the wide-character functions of the C-library (note that the Prolog native UTF-8 mode is considerably faster than the generic <computeroutput>mbrtowc()</computeroutput> one) <linebreak/>
</computeroutput></para>
<para><computeroutput>Prolog allows the encoding to be specified explicitly in <ref refid="classload__files_22" kindref="compound">load_files/2</ref> for loading Prolog source with an alternative encoding, <computeroutput><ref refid="classopen_24" kindref="compound">open/4</ref> </computeroutput> when opening files or using <computeroutput>set_stream/2 </computeroutput> on any open stream (not yet implemented) For Prolog source files we also provide the <computeroutput>encoding/1 </computeroutput> directive that can be used to switch between encodings that are compatible to US-ASCII (<computeroutput>ascii</computeroutput>, <computeroutput>iso_latin_1</computeroutput>, <computeroutput>utf8</computeroutput> and many locales)</computeroutput></para>
<para><computeroutput>For additional information and Unicode resources, please visit the <ulink url="http://www.unicode.org/">unicode</ulink> organization web page</computeroutput></para>
<para><computeroutput>YAP currently defines and supports the following encodings:</computeroutput></para>
<para><computeroutput><itemizedlist>
<listitem><para><computeroutput>octet</computeroutput> Default encoding for <emphasis>binary</emphasis> streams This causes the stream to be read and written fully untranslated</para>
</listitem><listitem><para><computeroutput>ascii</computeroutput> or <computeroutput>US_ASCII</computeroutput> 7-bit encoding in 8-bit bytes Equivalent to <computeroutput>iso_latin_1</computeroutput>, but generates errors and warnings on encountering values above 127</para>
</listitem><listitem><para><computeroutput>iso_latin_1</computeroutput> or <computeroutput>ISO-8859-1</computeroutput> 8-bit encoding supporting many western languages This causes the stream to be read and written fully untranslated</para>
</listitem><listitem><para><computeroutput>text</computeroutput> C-library default locale encoding for text files Files are read and written using the C-library functions <computeroutput>mbrtowc()</computeroutput> and <computeroutput>wcrtomb()</computeroutput> This may be the same as one of the other locales, notably it may be the same as <computeroutput>iso_latin_1</computeroutput> for western languages and <computeroutput>utf8</computeroutput> in a UTF-8 context</para>
</listitem><listitem><para><computeroutput>utf8</computeroutput>, <computeroutput>iso_utf8</computeroutput>, or <computeroutput>UTF-8</computeroutput><computeroutput> Multi-byte encoding of the full Unicode 8, compatible to</computeroutput>ascii` See above</para>
</listitem><listitem><para><computeroutput>unicode_be</computeroutput> or <computeroutput>UCS-2BE</computeroutput> Unicode Big Endian Reads input in pairs of bytes, most significant byte first Can only represent 16-bit characters</para>
</listitem><listitem><para><computeroutput>unicode_le</computeroutput> or <computeroutput>UCS-2LE</computeroutput> Unicode Little Endian Reads input in pairs of bytes, least significant byte first Can only represent 16-bit characters</para>
</listitem><listitem><para><computeroutput>utf16_le</computeroutput> or <computeroutput>UTF-16LE</computeroutput> (experimental) UTF-16 Little Endian Reads input in pairs of bytes, least significant byte first Can represent the full Unicode</para>
</listitem><listitem><para><computeroutput>utf16_le</computeroutput> or <computeroutput>UTF-16BE</computeroutput> (experimental) Unicode Big Endian Reads input in pairs of bytes, least significant byte first Can represent the full Unicode</para>
</listitem><listitem><para><computeroutput>utf32_le</computeroutput> or <computeroutput>UTF-32LE</computeroutput> (experimental) UTF-16 Little Endian Reads input in pairs of bytes, least significant byte first Can represent the full Unicode</para>
</listitem><listitem><para><computeroutput>utf32_le</computeroutput> or <computeroutput>UTF-32BE</computeroutput> (experimental) Unicode Big Endian Reads input in pairs of bytes, least significant byte first Can only represent 16-bit characters</para>
</listitem></itemizedlist>
</computeroutput></para>
<para><computeroutput>Note that not all encodings can represent all characters This implies that writing text to a stream may cause errors because the stream cannot represent these characters The behaviour of a stream on these errors can be controlled using <computeroutput><ref refid="classopen_24" kindref="compound">open/4</ref> </computeroutput> or <computeroutput>set_stream/2 </computeroutput> (not implemented) Initially the terminal stream write the characters using Prolog escape sequences while other streams generate an I/O exception</computeroutput></para>
<para><computeroutput></computeroutput></para>
<sect4 id="syntax_1autotoc_md26">
<title>[BOM: Byte Order Mark ](BOM)</title>
<para><computeroutput></computeroutput></para>
<para><computeroutput>From Stream Encoding, you may have got the impression that text-files are complicated This section deals with a related topic, making live often easier for the user, but providing another worry to the programmer <emphasis>BOM</emphasis> or <emphasis>Byte Order Marker</emphasis> is a technique for identifying Unicode text-files as well as the encoding they use Please read the [W3C](<ulink url="https://www.w3.org/International/questions/qa-byte-order-mark.en.php">https://www.w3.org/International/questions/qa-byte-order-mark.en.php</ulink>] page for a detailed explanation of byte-order marks</computeroutput></para>
<para><computeroutput>BOMa are necessary on multi-byte encodings, such as UTF-16 and UTF-32 There is a BOM for UTF-8, but it is rarely used The BOM is handled by the <ref refid="classopen_24" kindref="compound">open/4</ref> predicate By default, text-files are probed for the BOM when opened for reading If a BOM is found, the encoding is set accordingly and the property <computeroutput>bom(true)</computeroutput> is available through <ref refid="classstream__property_22" kindref="compound">stream_property/2</ref> When opening a file for writing, writing a BOM can be requested using the option <computeroutput>bom(true)</computeroutput> with <computeroutput><ref refid="classopen_24" kindref="compound">open/4</ref> </computeroutput> YAP will parse an UTF-8 file for a BOM only if explicitly required to do so Do notice that YAP will write a BOM by default on UTF-16 (including UCS-2) and UTF-32; otherwise the default is not to write a BOM BOMs are not avaliable for ASCII and ISO-LATIN-1</computeroutput></para>
<para><computeroutput></computeroutput></para>
</sect4>
</sect3>
</sect2>
<sect2 id="syntax_1autotoc_md27">
<title>[Summary of YAP Predefined Operators ](Operators)</title>
<para><computeroutput> The Prolog syntax caters for operators of three main kinds:</computeroutput></para>
<para><computeroutput><itemizedlist>
<listitem><para>prefix;</para>
</listitem><listitem><para>infix;</para>
</listitem><listitem><para>postfix</para>
</listitem></itemizedlist>
</computeroutput></para>
<para><computeroutput>Each operator has precedence in the range 1 to 1200, and this precedence is used to disambiguate expressions where the structure of the term denoted is not made explicit using brackets The operator of higher precedence is the main functor</computeroutput></para>
<para><computeroutput>If there are two operators with the highest precedence, the ambiguity is solved analyzing the types of the operators The possible infix types are: <emphasis>xfx</emphasis>, <emphasis>xfy</emphasis>, and <emphasis>yfx</emphasis></computeroutput></para>
<para><computeroutput>With an operator of type <emphasis>xfx</emphasis> both sub-expressions must have lower precedence than the operator itself, unless they are bracketed (which assigns to them zero precedence) With an operator type <emphasis>xfy</emphasis> only the <linebreak/>
 left-hand sub-expression must have lower precedence The opposite happens for <emphasis>yfx</emphasis> type</computeroutput></para>
<para><computeroutput>A prefix operator can be of type <emphasis>fx</emphasis> or <emphasis>fy</emphasis> A postfix operator can be of type <emphasis>xf</emphasis> or <emphasis>yf</emphasis> The meaning of the notation is analogous to the above</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">a<sp/>+<sp/>b<sp/>*<sp/>c</highlight></codeline>
</programlisting> means</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">a<sp/>+<sp/>(b<sp/>*<sp/>c)</highlight></codeline>
</programlisting> as + and * have the following types and precedences:</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">:-op(500,yfx,&apos;+&apos;).</highlight></codeline>
<codeline><highlight class="normal">:-op(400,yfx,&apos;*&apos;).</highlight></codeline>
</programlisting></computeroutput></para>
<para><computeroutput>Now defining</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">:-op(700,xfy,&apos;++&apos;).</highlight></codeline>
<codeline><highlight class="normal">:-op(700,xfx,&apos;=:=&apos;).</highlight></codeline>
<codeline><highlight class="normal">a<sp/>++<sp/>b<sp/>=:=<sp/>c</highlight></codeline>
</programlisting> means</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">a<sp/>++<sp/>(b<sp/>=:=<sp/>c)</highlight></codeline>
</programlisting></computeroutput></para>
<para><computeroutput>The following is the list of the declarations of the predefined operators:</computeroutput></para>
<para><computeroutput><programlisting><codeline><highlight class="normal">:-op(1200,fx,[&apos;?-&apos;,<sp/>&apos;:-&apos;]).</highlight></codeline>
<codeline><highlight class="normal">:-op(1200,xfx,[&apos;:-&apos;,&apos;--&gt;&apos;]).</highlight></codeline>
<codeline><highlight class="normal">:-op(1150,fx,[block,dynamic,mode,public,multifile,meta_predicate,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequential,table,initialization]).</highlight></codeline>
<codeline><highlight class="normal">:-op(1100,xfy,[&apos;;&apos;,&apos;|&apos;]).</highlight></codeline>
<codeline><highlight class="normal">:-op(1050,xfy,-&gt;).</highlight></codeline>
<codeline><highlight class="normal">:-op(1000,xfy,&apos;,&apos;).</highlight></codeline>
<codeline><highlight class="normal">:-op(999,xfy,&apos;.&apos;).</highlight></codeline>
<codeline><highlight class="normal">:-op(900,fy,[&apos;\+&apos;,<sp/>not]).</highlight></codeline>
<codeline><highlight class="normal">:-op(900,fx,[nospy,<sp/>spy]).</highlight></codeline>
<codeline><highlight class="normal">:-op(700,xfx,[@&gt;=,@=&lt;,@&lt;,@&gt;,&lt;,=,&gt;,=:=,=\=,\==,&gt;=,=&lt;,==,\=,=..,is]).</highlight></codeline>
<codeline><highlight class="normal">:-op(500,yfx,[&apos;\/&apos;,&apos;/\&apos;,&apos;+&apos;,&apos;-&apos;]).</highlight></codeline>
<codeline><highlight class="normal">:-op(500,fx,[&apos;+&apos;,&apos;-&apos;]).</highlight></codeline>
<codeline><highlight class="normal">:-op(400,yfx,[&apos;&lt;&lt;&apos;,&apos;&gt;&gt;&apos;,&apos;//&apos;,&apos;*&apos;,&apos;/&apos;]).</highlight></codeline>
<codeline><highlight class="normal">:-op(300,xfx,mod).</highlight></codeline>
<codeline><highlight class="normal">:-op(200,xfy,[&apos;^&apos;,&apos;**&apos;]).</highlight></codeline>
<codeline><highlight class="normal">:-op(50,xfx,same).</highlight></codeline>
</programlisting> </computeroutput></para>
</sect2>
    </detaileddescription>
    <location file="docs/md/syntax.md"/>
  </compounddef>
</doxygen>
