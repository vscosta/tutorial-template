<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classYAPTerm" kind="class" language="C++" prot="public">
    <compoundname>YAPTerm</compoundname>
    <derivedcompoundref refid="classT" prot="public" virt="non-virtual">T</derivedcompoundref>
    <derivedcompoundref refid="classYAPApplTerm" prot="public" virt="non-virtual">YAPApplTerm</derivedcompoundref>
    <derivedcompoundref refid="classYAPAtomTerm" prot="public" virt="non-virtual">YAPAtomTerm</derivedcompoundref>
    <derivedcompoundref refid="classYAPConjunctiveTerm" prot="public" virt="non-virtual">YAPConjunctiveTerm</derivedcompoundref>
    <derivedcompoundref refid="classYAPErrorTerm" prot="public" virt="non-virtual">YAPErrorTerm</derivedcompoundref>
    <derivedcompoundref refid="classYAPListTerm" prot="public" virt="non-virtual">YAPListTerm</derivedcompoundref>
    <derivedcompoundref refid="classYAPNumberTerm" prot="public" virt="non-virtual">YAPNumberTerm</derivedcompoundref>
    <derivedcompoundref refid="classYAPPairTerm" prot="public" virt="non-virtual">YAPPairTerm</derivedcompoundref>
    <derivedcompoundref refid="classYAPStringTerm" prot="public" virt="non-virtual">YAPStringTerm</derivedcompoundref>
    <derivedcompoundref refid="classYAPVarTerm" prot="public" virt="non-virtual">YAPVarTerm</derivedcompoundref>
    <includes refid="tmp_2yapt_8hh" local="no">yapt.hh</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classYAPTerm_1a42b13f860a0c8d74ff5c9f3fb9cb5240" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPPredicate</definition>
        <argsstring></argsstring>
        <name>YAPPredicate</name>
        <qualifiedname>YAPTerm::YAPPredicate</qualifiedname>
        <param>
          <type><ref refid="classYAPPredicate" kindref="compound">YAPPredicate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="43" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPTerm_1a5e67b41d8c18d7208476ef97cfd885d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPPrologPredicate</definition>
        <argsstring></argsstring>
        <name>YAPPrologPredicate</name>
        <qualifiedname>YAPTerm::YAPPrologPredicate</qualifiedname>
        <param>
          <type><ref refid="classYAPPrologPredicate" kindref="compound">YAPPrologPredicate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="44" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPTerm_1abce547a0e7fe87f57877644b72180813" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPQuery</definition>
        <argsstring></argsstring>
        <name>YAPQuery</name>
        <qualifiedname>YAPTerm::YAPQuery</qualifiedname>
        <param>
          <type><ref refid="classYAPQuery" kindref="compound">YAPQuery</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="45" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPTerm_1acfc5e1d0daa38315eaeefd86b6246e15" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPModule</definition>
        <argsstring></argsstring>
        <name>YAPModule</name>
        <qualifiedname>YAPTerm::YAPModule</qualifiedname>
        <param>
          <type><ref refid="classYAPModule" kindref="compound">YAPModule</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="46" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPTerm_1a5f29afd4064b22d6fd33050a854ee857" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPModuleProp</definition>
        <argsstring></argsstring>
        <name>YAPModuleProp</name>
        <qualifiedname>YAPTerm::YAPModuleProp</qualifiedname>
        <param>
          <type><ref refid="classYAPModuleProp" kindref="compound">YAPModuleProp</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="47" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPTerm_1a5c605af04dea50a0a9ba581213eadb33" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPApplTerm</definition>
        <argsstring></argsstring>
        <name>YAPApplTerm</name>
        <qualifiedname>YAPTerm::YAPApplTerm</qualifiedname>
        <param>
          <type><ref refid="classYAPApplTerm" kindref="compound">YAPApplTerm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="48" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPTerm_1a134c81e05356d8ca3837d6b2a4206942" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPListTerm</definition>
        <argsstring></argsstring>
        <name>YAPListTerm</name>
        <qualifiedname>YAPTerm::YAPListTerm</qualifiedname>
        <param>
          <type><ref refid="classYAPListTerm" kindref="compound">YAPListTerm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="49" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classYAPTerm_1a4419d55fa29244f8174e9a254171ce07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>YAPConjunctiveTerm</definition>
        <argsstring></argsstring>
        <name>YAPConjunctiveTerm</name>
        <qualifiedname>YAPTerm::YAPConjunctiveTerm</qualifiedname>
        <param>
          <type><ref refid="classYAPConjunctiveTerm" kindref="compound">YAPConjunctiveTerm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="50" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classYAPTerm_1a1b2ed9bd9891b4f7f8c58783d9425d71" prot="protected" static="no" mutable="no">
        <type>yhandle_t</type>
        <definition>yhandle_t hdl</definition>
        <argsstring></argsstring>
        <name>hdl</name>
        <qualifiedname>YAPTerm::hdl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="53" column="13" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classYAPTerm_1a7e2daafeb40df9547e1b3cc3d1ac0e96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Term</type>
        <definition>Term gt</definition>
        <argsstring>()</argsstring>
        <name>gt</name>
        <qualifiedname>YAPTerm::gt</qualifiedname>
        <briefdescription>
<para>handle to term, equivalent to term_t </para>
        </briefdescription>
        <detaileddescription>
<para>get the Prolog term corresponding to the <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="57" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a34fc41ad9a79d1823f9278ed78337bc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Term</type>
        <definition>Term pop_t</definition>
        <argsstring>()</argsstring>
        <name>pop_t</name>
        <qualifiedname>YAPTerm::pop_t</qualifiedname>
        <briefdescription>
<para>get the Prolog term corresponding to the <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref>, and try to recover </para>
        </briefdescription>
        <detaileddescription>
<para>space </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="66" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a1a37a59d4c80fc3c2606fdedeeb4a218" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mk</definition>
        <argsstring>(Term t0)</argsstring>
        <name>mk</name>
        <qualifiedname>YAPTerm::mk</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t0</declname>
        </param>
        <briefdescription>
<para>create a new <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> from a term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="74" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a47b5bd780cb7d4cd7fa4578c295fb838" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void put</definition>
        <argsstring>(Term t0)</argsstring>
        <name>put</name>
        <qualifiedname>YAPTerm::put</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t0</declname>
        </param>
        <briefdescription>
<para>copy a term to an <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="80" column="8" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a0238fde4b780fb0f67ec7c3a1440edba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>(Term tn)</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <param>
          <type>Term</type>
          <declname>tn</declname>
        </param>
        <briefdescription>
<para>create an empty <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="87" column="3" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a84647bb1f2e20f0eda6fb1782800e525" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>()</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <briefdescription>
<para>private method to convert from Term (internal YAP representation) to <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="97" column="3" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a5b95fd101b73207682463ea473b6d2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>pointer to term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="100" column="3" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="461" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a8a604a0dd3551e7eac340ff75c06ac16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>(char *s)</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>parse string s and construct a term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="102" column="3" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1af294a9767b1ac6cb6519b871ea641b46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ~YAPTerm</definition>
        <argsstring>()</argsstring>
        <name>~YAPTerm</name>
        <qualifiedname>YAPTerm::~YAPTerm</qualifiedname>
        <briefdescription>
<para>Term destructor, tries to recover slot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="109" column="11" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="109" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a69fffe0c41e001d6fdd0840f61a56df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAP_tag_t</type>
        <definition>YAP_tag_t tag</definition>
        <argsstring>()</argsstring>
        <name>tag</name>
        <qualifiedname>YAPTerm::tag</qualifiedname>
        <briefdescription>
<para>construct a term out of an integer (if you know object type use <ref refid="classYAPIntegerTerm" kindref="compound">YAPIntegerTerm</ref>) <ref refid="classYAPTerm_1aa7618a4103a2b970e30a608516eefb3d" kindref="member">YAPTerm(long int num)</ref> { mk(MkIntegerTerm(num)); } construct a term out of an integer (if you know object type use <ref refid="classYAPIntegerTerm" kindref="compound">YAPIntegerTerm</ref>) <ref refid="classYAPTerm_1a9e2cd85e45ba4503adf7ae394d2d74ee" kindref="member">YAPTerm(double num)</ref> { mk(MkFloatTerm(num)); } parse string s and construct a term </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classYAPTerm" kindref="compound">YAPTerm(YAPFunctor f, YAPTerm ts[])</ref>; extract the tag of a term, after dereferencing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="131" column="13" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="350" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a0e4a83a87ff58e403d8c4a4e66e5b019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term deepCopy</definition>
        <argsstring>()</argsstring>
        <name>deepCopy</name>
        <qualifiedname>YAPTerm::deepCopy</qualifiedname>
        <briefdescription>
<para>copy the term ( term copy ) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="133" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="394" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a5d085ea9020eec5b07e44d3a03a7bdf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int numberVars</definition>
        <argsstring>(int start, bool singletons=false)</argsstring>
        <name>numberVars</name>
        <qualifiedname>YAPTerm::numberVars</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>singletons</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>numbervars ( int start, bool process=false ) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="135" column="14" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ab7852318b7495ccd6362d74dd6e5c652" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Term</type>
        <definition>Term term</definition>
        <argsstring>()</argsstring>
        <name>term</name>
        <qualifiedname>YAPTerm::term</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="140" column="15" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ab113801eac8ec2c37f7d69f86431a9c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
        <definition>YAPTerm arg</definition>
        <argsstring>(int i)</argsstring>
        <name>arg</name>
        <qualifiedname>YAPTerm::arg</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>from <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> to Term (internal YAP representation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="143" column="11" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="143" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aacf1aea1fa6911abfa3557843d0a0c8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void bind</definition>
        <argsstring>(Term b)</argsstring>
        <name>bind</name>
        <qualifiedname>YAPTerm::bind</qualifiedname>
        <param>
          <type>Term</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="154" column="15" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a7e9c53c62e12aea66b490d43b556a683" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void bind</definition>
        <argsstring>(YAPTerm *b)</argsstring>
        <name>bind</name>
        <qualifiedname>YAPTerm::bind</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="158" column="15" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ae533addedf4448e6fb256e010c28a2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term &amp;</type>
        <definition>Term &amp; operator[]</definition>
        <argsstring>(arity_t n)</argsstring>
        <name>operator[]</name>
        <qualifiedname>YAPTerm::operator[]</qualifiedname>
        <param>
          <type>arity_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>from <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> to Term (internal YAP representation) fetch a sub-term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="163" column="8" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="268" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ad68ceb75dac15df87f18353bf4e901ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool exactlyEqual</definition>
        <argsstring>(YAPTerm t1)</argsstring>
        <name>exactlyEqual</name>
        <qualifiedname>YAPTerm::exactlyEqual</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t1</declname>
        </param>
        <briefdescription>
<para>this term is == to t1 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="166" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="166" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ad10da53c46207ede9f418086ed153d5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool unify</definition>
        <argsstring>(YAPTerm t1)</argsstring>
        <name>unify</name>
        <qualifiedname>YAPTerm::unify</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t1</declname>
        </param>
        <briefdescription>
<para>t = t1 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="175" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="175" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a5373f97ad03301a4eb97808b6c72e12d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool unifiable</definition>
        <argsstring>(YAPTerm t1)</argsstring>
        <name>unifiable</name>
        <qualifiedname>YAPTerm::unifiable</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t1</declname>
        </param>
        <briefdescription>
<para>we can unify t and t1 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="184" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aceaa99597084fe2049d5de67eb6c4cf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>YAP_Term</type>
        <definition>virtual YAP_Term variant</definition>
        <argsstring>(YAPTerm t1)</argsstring>
        <name>variant</name>
        <qualifiedname>YAPTerm::variant</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t1</declname>
        </param>
        <briefdescription>
<para>t =@= t1, the two terms are equal up to variable renaming </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="193" column="27" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a2974e0128f95576a99fc78ed38ae8085" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>intptr_t</type>
        <definition>virtual intptr_t hashTerm</definition>
        <argsstring>(size_t sz, size_t depth, bool variant)</argsstring>
        <name>hashTerm</name>
        <qualifiedname>YAPTerm::hashTerm</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
<para>term hash, </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="202" column="20" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="202" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a9ea7108484abde8985bee0ab1d807360" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isVar</definition>
        <argsstring>()</argsstring>
        <name>isVar</name>
        <qualifiedname>YAPTerm::isVar</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a9ea7108484abde8985bee0ab1d807360">isVar</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1afd813190d8ffe82314aa8e7d35fe8788">isVar</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1afd813190d8ffe82314aa8e7d35fe8788">isVar</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a9ea7108484abde8985bee0ab1d807360">isVar</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1afd813190d8ffe82314aa8e7d35fe8788">isVar</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1afd813190d8ffe82314aa8e7d35fe8788">isVar</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="211" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a3fa5279dfa0c98b5272459ec64151325" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isAtom</definition>
        <argsstring>()</argsstring>
        <name>isAtom</name>
        <qualifiedname>YAPTerm::isAtom</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a3fa5279dfa0c98b5272459ec64151325">isAtom</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1af447e7cad50d401cb63a7e98362c51c7">isAtom</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1af447e7cad50d401cb63a7e98362c51c7">isAtom</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a3fa5279dfa0c98b5272459ec64151325">isAtom</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1af447e7cad50d401cb63a7e98362c51c7">isAtom</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1af447e7cad50d401cb63a7e98362c51c7">isAtom</reimplementedby>
        <briefdescription>
<para>type check for unound </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="212" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a16626d5bc393ef2636260ee174e1a424" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isInteger</definition>
        <argsstring>()</argsstring>
        <name>isInteger</name>
        <qualifiedname>YAPTerm::isInteger</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a16626d5bc393ef2636260ee174e1a424">isInteger</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a47a971585836b0cd992f6436d9292114">isInteger</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a47a971585836b0cd992f6436d9292114">isInteger</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a16626d5bc393ef2636260ee174e1a424">isInteger</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a47a971585836b0cd992f6436d9292114">isInteger</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a47a971585836b0cd992f6436d9292114">isInteger</reimplementedby>
        <briefdescription>
<para>type check for atom </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="213" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aaf315cdc04d99d6badb9614bbf7197e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isFloat</definition>
        <argsstring>()</argsstring>
        <name>isFloat</name>
        <qualifiedname>YAPTerm::isFloat</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1aaf315cdc04d99d6badb9614bbf7197e2">isFloat</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a5a985db25cbf98a53c5454fae9a3f5f0">isFloat</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a5a985db25cbf98a53c5454fae9a3f5f0">isFloat</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1aaf315cdc04d99d6badb9614bbf7197e2">isFloat</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a5a985db25cbf98a53c5454fae9a3f5f0">isFloat</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a5a985db25cbf98a53c5454fae9a3f5f0">isFloat</reimplementedby>
        <briefdescription>
<para>type check for integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="216" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aca0e42cb6a5f3e3745ea01e86c2c13bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isString</definition>
        <argsstring>()</argsstring>
        <name>isString</name>
        <qualifiedname>YAPTerm::isString</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1aca0e42cb6a5f3e3745ea01e86c2c13bc">isString</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a288713be3e0f84ab9ed777c650ae6cbc">isString</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a288713be3e0f84ab9ed777c650ae6cbc">isString</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1aca0e42cb6a5f3e3745ea01e86c2c13bc">isString</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a288713be3e0f84ab9ed777c650ae6cbc">isString</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a288713be3e0f84ab9ed777c650ae6cbc">isString</reimplementedby>
        <briefdescription>
<para>type check for floating-point </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="219" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aff847477b25724ebb960ed3445d51400" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isCompound</definition>
        <argsstring>()</argsstring>
        <name>isCompound</name>
        <qualifiedname>YAPTerm::isCompound</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1aff847477b25724ebb960ed3445d51400">isCompound</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a23e65be282f08c36fe3d98e0963b947a">isCompound</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a23e65be282f08c36fe3d98e0963b947a">isCompound</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1aff847477b25724ebb960ed3445d51400">isCompound</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a23e65be282f08c36fe3d98e0963b947a">isCompound</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a23e65be282f08c36fe3d98e0963b947a">isCompound</reimplementedby>
        <briefdescription>
<para>type check for a string &quot; ... &quot; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="222" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a939025805a96e3fd93a61884a3b217f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isAppl</definition>
        <argsstring>()</argsstring>
        <name>isAppl</name>
        <qualifiedname>YAPTerm::isAppl</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a939025805a96e3fd93a61884a3b217f2">isAppl</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1af918dfaf6c0c0d3b69f3af0fbf1f525a">isAppl</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1af918dfaf6c0c0d3b69f3af0fbf1f525a">isAppl</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a939025805a96e3fd93a61884a3b217f2">isAppl</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1af918dfaf6c0c0d3b69f3af0fbf1f525a">isAppl</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1af918dfaf6c0c0d3b69f3af0fbf1f525a">isAppl</reimplementedby>
        <briefdescription>
<para>is a primitive term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="225" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a21e0b1a710668c121da5b55cb86e626a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isPair</definition>
        <argsstring>()</argsstring>
        <name>isPair</name>
        <qualifiedname>YAPTerm::isPair</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a21e0b1a710668c121da5b55cb86e626a">isPair</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a82cdac4e5b6cb165f1168b92f4860c64">isPair</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a82cdac4e5b6cb165f1168b92f4860c64">isPair</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a21e0b1a710668c121da5b55cb86e626a">isPair</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a82cdac4e5b6cb165f1168b92f4860c64">isPair</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a82cdac4e5b6cb165f1168b92f4860c64">isPair</reimplementedby>
        <briefdescription>
<para>is a structured term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="226" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ab11a72e64b950c3001b9fe20fc34682b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isGround</definition>
        <argsstring>()</argsstring>
        <name>isGround</name>
        <qualifiedname>YAPTerm::isGround</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1ab11a72e64b950c3001b9fe20fc34682b">isGround</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1ab11a72e64b950c3001b9fe20fc34682b">isGround</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1aabf9b777d7adf56a3034cae8cebd83be">isGround</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1ab11a72e64b950c3001b9fe20fc34682b">isGround</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1ab11a72e64b950c3001b9fe20fc34682b">isGround</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1aabf9b777d7adf56a3034cae8cebd83be">isGround</reimplementedby>
        <briefdescription>
<para>is a pair term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="227" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a42e33ecd59575fc1ce1b1f84df6e256e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isList</definition>
        <argsstring>()</argsstring>
        <name>isList</name>
        <qualifiedname>YAPTerm::isList</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a42e33ecd59575fc1ce1b1f84df6e256e">isList</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a42e33ecd59575fc1ce1b1f84df6e256e">isList</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a52fa1f88b63282e88ecb8ef38b4ee0f2">isList</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a42e33ecd59575fc1ce1b1f84df6e256e">isList</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a42e33ecd59575fc1ce1b1f84df6e256e">isList</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a52fa1f88b63282e88ecb8ef38b4ee0f2">isList</reimplementedby>
        <briefdescription>
<para>term is ground </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="228" column="16" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aae36bb12ce7dab29e680048725cfb905" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Term</type>
        <definition>Term getArg</definition>
        <argsstring>(arity_t i)</argsstring>
        <name>getArg</name>
        <qualifiedname>YAPTerm::getArg</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1aae36bb12ce7dab29e680048725cfb905">getArg</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1aae36bb12ce7dab29e680048725cfb905">getArg</reimplementedby>
        <param>
          <type>arity_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>term is a list </para>
        </briefdescription>
        <detaileddescription>
<para>extract the argument i of the term, where i in 1...arityvoid *Yap_RepStreamFromId(int sno) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="232" column="16" bodyfile="/home/vsc/github/yap/CXX/yapi.cpp" bodystart="109" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1abb9a297c2305f37dcbc7ec1f8972fe3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>arity_t</type>
        <definition>virtual arity_t arity</definition>
        <argsstring>()</argsstring>
        <name>arity</name>
        <qualifiedname>YAPTerm::arity</qualifiedname>
        <briefdescription>
<para>extract the arity of the term variables have arity 0 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="236" column="26" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="236" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ad1ea0d530c1ceea2efc1661e83c6ccb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char * text</definition>
        <argsstring>()</argsstring>
        <name>text</name>
        <qualifiedname>YAPTerm::text</qualifiedname>
        <reimplementedby refid="classYAPAtomTerm_1a3b2c5850daff403f796c2b3d91d3890c">text</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a3b2c5850daff403f796c2b3d91d3890c">text</reimplementedby>
        <briefdescription>
<para>return a string with a textual representation of the term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="251" column="22" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="251" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a84518c0718e6650566b120ca5b85db02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>yhandle_t</type>
        <definition>yhandle_t handle</definition>
        <argsstring>()</argsstring>
        <name>handle</name>
        <qualifiedname>YAPTerm::handle</qualifiedname>
        <briefdescription>
<para>return a handle to the term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="265" column="20" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a0e887830311eba8605002670b70699ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool initialized</definition>
        <argsstring>()</argsstring>
        <name>initialized</name>
        <qualifiedname>YAPTerm::initialized</qualifiedname>
        <briefdescription>
<para>whether the term actually refers to a live object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="268" column="15" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a7e2daafeb40df9547e1b3cc3d1ac0e96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Term</type>
        <definition>Term gt</definition>
        <argsstring>()</argsstring>
        <name>gt</name>
        <qualifiedname>YAPTerm::gt</qualifiedname>
        <briefdescription>
<para>handle to term, equivalent to term_t </para>
        </briefdescription>
        <detaileddescription>
<para>get the Prolog term corresponding to the <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="58" column="8" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a34fc41ad9a79d1823f9278ed78337bc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Term</type>
        <definition>Term pop_t</definition>
        <argsstring>()</argsstring>
        <name>pop_t</name>
        <qualifiedname>YAPTerm::pop_t</qualifiedname>
        <briefdescription>
<para>get the Prolog term corresponding to the <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref>, and try to recover </para>
        </briefdescription>
        <detaileddescription>
<para>space </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="67" column="8" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a1a37a59d4c80fc3c2606fdedeeb4a218" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mk</definition>
        <argsstring>(Term t0)</argsstring>
        <name>mk</name>
        <qualifiedname>YAPTerm::mk</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t0</declname>
        </param>
        <briefdescription>
<para>create a new <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> from a term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="75" column="8" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a47b5bd780cb7d4cd7fa4578c295fb838" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void put</definition>
        <argsstring>(Term t0)</argsstring>
        <name>put</name>
        <qualifiedname>YAPTerm::put</qualifiedname>
        <param>
          <type>Term</type>
          <declname>t0</declname>
        </param>
        <briefdescription>
<para>copy a term to an <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="81" column="8" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a0238fde4b780fb0f67ec7c3a1440edba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>(Term tn)</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <param>
          <type>Term</type>
          <declname>tn</declname>
        </param>
        <briefdescription>
<para>create an empty <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="88" column="3" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a84647bb1f2e20f0eda6fb1782800e525" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>()</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <briefdescription>
<para>private method to convert from Term (internal YAP representation) to <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="98" column="3" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a5b95fd101b73207682463ea473b6d2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>pointer to term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="101" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a8a604a0dd3551e7eac340ff75c06ac16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>(char *s)</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>parse string s and construct a term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="103" column="3" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1af294a9767b1ac6cb6519b871ea641b46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ~YAPTerm</definition>
        <argsstring>()</argsstring>
        <name>~YAPTerm</name>
        <qualifiedname>YAPTerm::~YAPTerm</qualifiedname>
        <briefdescription>
<para>Term destructor, tries to recover slot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="110" column="11" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="110" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aa7618a4103a2b970e30a608516eefb3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>(long int num)</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <param>
          <type>long int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>construct a term out of an integer (if you know object type use <ref refid="classYAPIntegerTerm" kindref="compound">YAPIntegerTerm</ref>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="128" column="3" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a9e2cd85e45ba4503adf7ae394d2d74ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>(double num)</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>construct a term out of an double (if you know object type use </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="130" column="3" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ab4b05d43c5d28b981566dc5d82e7f8a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>YAPTerm</definition>
        <argsstring>(std::string &amp;name, std::vector&lt; YAPTerm &gt; ts)</argsstring>
        <name>YAPTerm</name>
        <qualifiedname>YAPTerm::YAPTerm</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> &gt;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>parse string s and construct a term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="132" column="3" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="132" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a69fffe0c41e001d6fdd0840f61a56df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAP_tag_t</type>
        <definition>YAP_tag_t tag</definition>
        <argsstring>()</argsstring>
        <name>tag</name>
        <qualifiedname>YAPTerm::tag</qualifiedname>
        <briefdescription>
<para>extract the tag of a term, after dereferencing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="141" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a0e4a83a87ff58e403d8c4a4e66e5b019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term deepCopy</definition>
        <argsstring>()</argsstring>
        <name>deepCopy</name>
        <qualifiedname>YAPTerm::deepCopy</qualifiedname>
        <briefdescription>
<para>copy the term ( term copy ) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="143" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a5d085ea9020eec5b07e44d3a03a7bdf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int numberVars</definition>
        <argsstring>(int start, bool singletons=false)</argsstring>
        <name>numberVars</name>
        <qualifiedname>YAPTerm::numberVars</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>singletons</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>numbervars ( int start, bool process=false ) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="145" column="14" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ab7852318b7495ccd6362d74dd6e5c652" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Term</type>
        <definition>Term term</definition>
        <argsstring>()</argsstring>
        <name>term</name>
        <qualifiedname>YAPTerm::term</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="150" column="15" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ab113801eac8ec2c37f7d69f86431a9c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
        <definition>YAPTerm arg</definition>
        <argsstring>(int i)</argsstring>
        <name>arg</name>
        <qualifiedname>YAPTerm::arg</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>from <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> to Term (internal YAP representation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="153" column="11" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="153" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aacf1aea1fa6911abfa3557843d0a0c8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void bind</definition>
        <argsstring>(Term b)</argsstring>
        <name>bind</name>
        <qualifiedname>YAPTerm::bind</qualifiedname>
        <param>
          <type>Term</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="164" column="15" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a7e9c53c62e12aea66b490d43b556a683" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void bind</definition>
        <argsstring>(YAPTerm *b)</argsstring>
        <name>bind</name>
        <qualifiedname>YAPTerm::bind</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="168" column="15" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ae533addedf4448e6fb256e010c28a2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term &amp;</type>
        <definition>Term &amp; operator[]</definition>
        <argsstring>(arity_t n)</argsstring>
        <name>operator[]</name>
        <qualifiedname>YAPTerm::operator[]</qualifiedname>
        <param>
          <type>arity_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>from <ref refid="classYAPTerm" kindref="compound">YAPTerm</ref> to Term (internal YAP representation) fetch a sub-term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="173" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ad68ceb75dac15df87f18353bf4e901ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool exactlyEqual</definition>
        <argsstring>(YAPTerm t1)</argsstring>
        <name>exactlyEqual</name>
        <qualifiedname>YAPTerm::exactlyEqual</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t1</declname>
        </param>
        <briefdescription>
<para>this term is == to t1 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="176" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="176" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ad10da53c46207ede9f418086ed153d5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool unify</definition>
        <argsstring>(YAPTerm t1)</argsstring>
        <name>unify</name>
        <qualifiedname>YAPTerm::unify</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t1</declname>
        </param>
        <briefdescription>
<para>t = t1 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="185" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="185" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a5373f97ad03301a4eb97808b6c72e12d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool unifiable</definition>
        <argsstring>(YAPTerm t1)</argsstring>
        <name>unifiable</name>
        <qualifiedname>YAPTerm::unifiable</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t1</declname>
        </param>
        <briefdescription>
<para>we can unify t and t1 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="194" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="194" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aceaa99597084fe2049d5de67eb6c4cf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>YAP_Term</type>
        <definition>virtual YAP_Term variant</definition>
        <argsstring>(YAPTerm t1)</argsstring>
        <name>variant</name>
        <qualifiedname>YAPTerm::variant</qualifiedname>
        <param>
          <type><ref refid="classYAPTerm" kindref="compound">YAPTerm</ref></type>
          <declname>t1</declname>
        </param>
        <briefdescription>
<para>t =@= t1, the two terms are equal up to variable renaming </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="203" column="27" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="203" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a2974e0128f95576a99fc78ed38ae8085" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>intptr_t</type>
        <definition>virtual intptr_t hashTerm</definition>
        <argsstring>(size_t sz, size_t depth, bool variant)</argsstring>
        <name>hashTerm</name>
        <qualifiedname>YAPTerm::hashTerm</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
<para>term hash, </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="212" column="20" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="212" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a9ea7108484abde8985bee0ab1d807360" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isVar</definition>
        <argsstring>()</argsstring>
        <name>isVar</name>
        <qualifiedname>YAPTerm::isVar</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a9ea7108484abde8985bee0ab1d807360">isVar</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1afd813190d8ffe82314aa8e7d35fe8788">isVar</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1afd813190d8ffe82314aa8e7d35fe8788">isVar</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a9ea7108484abde8985bee0ab1d807360">isVar</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1afd813190d8ffe82314aa8e7d35fe8788">isVar</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1afd813190d8ffe82314aa8e7d35fe8788">isVar</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="221" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a3fa5279dfa0c98b5272459ec64151325" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isAtom</definition>
        <argsstring>()</argsstring>
        <name>isAtom</name>
        <qualifiedname>YAPTerm::isAtom</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a3fa5279dfa0c98b5272459ec64151325">isAtom</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1af447e7cad50d401cb63a7e98362c51c7">isAtom</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1af447e7cad50d401cb63a7e98362c51c7">isAtom</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a3fa5279dfa0c98b5272459ec64151325">isAtom</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1af447e7cad50d401cb63a7e98362c51c7">isAtom</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1af447e7cad50d401cb63a7e98362c51c7">isAtom</reimplementedby>
        <briefdescription>
<para>type check for unound </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="222" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a16626d5bc393ef2636260ee174e1a424" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isInteger</definition>
        <argsstring>()</argsstring>
        <name>isInteger</name>
        <qualifiedname>YAPTerm::isInteger</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a16626d5bc393ef2636260ee174e1a424">isInteger</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a47a971585836b0cd992f6436d9292114">isInteger</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a47a971585836b0cd992f6436d9292114">isInteger</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a16626d5bc393ef2636260ee174e1a424">isInteger</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a47a971585836b0cd992f6436d9292114">isInteger</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a47a971585836b0cd992f6436d9292114">isInteger</reimplementedby>
        <briefdescription>
<para>type check for atom </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="223" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aaf315cdc04d99d6badb9614bbf7197e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isFloat</definition>
        <argsstring>()</argsstring>
        <name>isFloat</name>
        <qualifiedname>YAPTerm::isFloat</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1aaf315cdc04d99d6badb9614bbf7197e2">isFloat</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a5a985db25cbf98a53c5454fae9a3f5f0">isFloat</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a5a985db25cbf98a53c5454fae9a3f5f0">isFloat</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1aaf315cdc04d99d6badb9614bbf7197e2">isFloat</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a5a985db25cbf98a53c5454fae9a3f5f0">isFloat</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a5a985db25cbf98a53c5454fae9a3f5f0">isFloat</reimplementedby>
        <briefdescription>
<para>type check for integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="226" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aca0e42cb6a5f3e3745ea01e86c2c13bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isString</definition>
        <argsstring>()</argsstring>
        <name>isString</name>
        <qualifiedname>YAPTerm::isString</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1aca0e42cb6a5f3e3745ea01e86c2c13bc">isString</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a288713be3e0f84ab9ed777c650ae6cbc">isString</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a288713be3e0f84ab9ed777c650ae6cbc">isString</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1aca0e42cb6a5f3e3745ea01e86c2c13bc">isString</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a288713be3e0f84ab9ed777c650ae6cbc">isString</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a288713be3e0f84ab9ed777c650ae6cbc">isString</reimplementedby>
        <briefdescription>
<para>type check for floating-point </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="229" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="229" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1aff847477b25724ebb960ed3445d51400" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isCompound</definition>
        <argsstring>()</argsstring>
        <name>isCompound</name>
        <qualifiedname>YAPTerm::isCompound</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1aff847477b25724ebb960ed3445d51400">isCompound</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a23e65be282f08c36fe3d98e0963b947a">isCompound</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a23e65be282f08c36fe3d98e0963b947a">isCompound</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1aff847477b25724ebb960ed3445d51400">isCompound</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a23e65be282f08c36fe3d98e0963b947a">isCompound</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a23e65be282f08c36fe3d98e0963b947a">isCompound</reimplementedby>
        <briefdescription>
<para>type check for a string &quot; ... &quot; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="232" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a939025805a96e3fd93a61884a3b217f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isAppl</definition>
        <argsstring>()</argsstring>
        <name>isAppl</name>
        <qualifiedname>YAPTerm::isAppl</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a939025805a96e3fd93a61884a3b217f2">isAppl</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1af918dfaf6c0c0d3b69f3af0fbf1f525a">isAppl</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1af918dfaf6c0c0d3b69f3af0fbf1f525a">isAppl</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a939025805a96e3fd93a61884a3b217f2">isAppl</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1af918dfaf6c0c0d3b69f3af0fbf1f525a">isAppl</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1af918dfaf6c0c0d3b69f3af0fbf1f525a">isAppl</reimplementedby>
        <briefdescription>
<para>is a primitive term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="235" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a21e0b1a710668c121da5b55cb86e626a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isPair</definition>
        <argsstring>()</argsstring>
        <name>isPair</name>
        <qualifiedname>YAPTerm::isPair</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a21e0b1a710668c121da5b55cb86e626a">isPair</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a82cdac4e5b6cb165f1168b92f4860c64">isPair</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a82cdac4e5b6cb165f1168b92f4860c64">isPair</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a21e0b1a710668c121da5b55cb86e626a">isPair</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a82cdac4e5b6cb165f1168b92f4860c64">isPair</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a82cdac4e5b6cb165f1168b92f4860c64">isPair</reimplementedby>
        <briefdescription>
<para>is a structured term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="236" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ab11a72e64b950c3001b9fe20fc34682b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isGround</definition>
        <argsstring>()</argsstring>
        <name>isGround</name>
        <qualifiedname>YAPTerm::isGround</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1ab11a72e64b950c3001b9fe20fc34682b">isGround</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1ab11a72e64b950c3001b9fe20fc34682b">isGround</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1aabf9b777d7adf56a3034cae8cebd83be">isGround</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1ab11a72e64b950c3001b9fe20fc34682b">isGround</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1ab11a72e64b950c3001b9fe20fc34682b">isGround</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1aabf9b777d7adf56a3034cae8cebd83be">isGround</reimplementedby>
        <briefdescription>
<para>is a pair term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="237" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a42e33ecd59575fc1ce1b1f84df6e256e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool isList</definition>
        <argsstring>()</argsstring>
        <name>isList</name>
        <qualifiedname>YAPTerm::isList</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1a42e33ecd59575fc1ce1b1f84df6e256e">isList</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a42e33ecd59575fc1ce1b1f84df6e256e">isList</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a52fa1f88b63282e88ecb8ef38b4ee0f2">isList</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1a42e33ecd59575fc1ce1b1f84df6e256e">isList</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a42e33ecd59575fc1ce1b1f84df6e256e">isList</reimplementedby>
        <reimplementedby refid="classYAPVarTerm_1a52fa1f88b63282e88ecb8ef38b4ee0f2">isList</reimplementedby>
        <briefdescription>
<para>term is ground </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="238" column="16" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a50b19125fd11c17e65dc2c7d7c0f232e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Term</type>
        <definition>virtual Term getArg</definition>
        <argsstring>(arity_t i)</argsstring>
        <name>getArg</name>
        <qualifiedname>YAPTerm::getArg</qualifiedname>
        <reimplementedby refid="classYAPApplTerm_1aae36bb12ce7dab29e680048725cfb905">getArg</reimplementedby>
        <reimplementedby refid="classYAPApplTerm_1aae36bb12ce7dab29e680048725cfb905">getArg</reimplementedby>
        <param>
          <type>arity_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>term is a list </para>
        </briefdescription>
        <detaileddescription>
<para>extract the argument i of the term, where i in 1...arityvoid *Yap_RepStreamFromId(int sno) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="242" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1abb9a297c2305f37dcbc7ec1f8972fe3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>arity_t</type>
        <definition>virtual arity_t arity</definition>
        <argsstring>()</argsstring>
        <name>arity</name>
        <qualifiedname>YAPTerm::arity</qualifiedname>
        <briefdescription>
<para>extract the arity of the term variables have arity 0 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="246" column="26" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="246" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ad1ea0d530c1ceea2efc1661e83c6ccb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char * text</definition>
        <argsstring>()</argsstring>
        <name>text</name>
        <qualifiedname>YAPTerm::text</qualifiedname>
        <reimplementedby refid="classYAPAtomTerm_1a3b2c5850daff403f796c2b3d91d3890c">text</reimplementedby>
        <reimplementedby refid="classYAPAtomTerm_1a3b2c5850daff403f796c2b3d91d3890c">text</reimplementedby>
        <briefdescription>
<para>return a string with a textual representation of the term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="261" column="22" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="261" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1ad20897c5c8bd47f5d4005989bead0e55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>YAPTerm::reset</qualifiedname>
        <briefdescription>
<para>return na handle to the term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="275" column="15" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a84518c0718e6650566b120ca5b85db02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>yhandle_t</type>
        <definition>yhandle_t handle</definition>
        <argsstring>()</argsstring>
        <name>handle</name>
        <qualifiedname>YAPTerm::handle</qualifiedname>
        <briefdescription>
<para>return a handle to the term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="281" column="20" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classYAPTerm_1a0e887830311eba8605002670b70699ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool initialized</definition>
        <argsstring>()</argsstring>
        <name>initialized</name>
        <qualifiedname>YAPTerm::initialized</qualifiedname>
        <briefdescription>
<para>whether the term actually refers to a live object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsc/github/yap/CXX/yapt.hh" line="284" column="15" bodyfile="/home/vsc/github/yap/CXX/yapt.hh" bodystart="284" bodyend="284"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic Prolog Term. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>T</label>
        <link refid="classT"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>YAPApplTerm</label>
        <link refid="classYAPApplTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>YAPAtomTerm</label>
        <link refid="classYAPAtomTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>YAPConjunctiveTerm</label>
        <link refid="classYAPConjunctiveTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>YAPErrorTerm</label>
        <link refid="classYAPErrorTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>YAPFloatTerm</label>
        <link refid="classYAPFloatTerm"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>YAPIntegerTerm</label>
        <link refid="classYAPIntegerTerm"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>YAPListTerm</label>
        <link refid="classYAPListTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>YAPModule</label>
        <link refid="classYAPModule"/>
        <childnode refid="4" relation="protected-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>YAPNumberTerm</label>
        <link refid="classYAPNumberTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>YAPPairTerm</label>
        <link refid="classYAPPairTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>YAPStringTerm</label>
        <link refid="classYAPStringTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>YAPTerm</label>
        <link refid="classYAPTerm"/>
      </node>
      <node id="14">
        <label>YAPVarTerm</label>
        <link refid="classYAPVarTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/vsc/github/yap/CXX/tmp/yapt.hh" line="42" column="1" bodyfile="/home/vsc/github/yap/CXX/tmp/yapt.hh" bodystart="42" bodyend="269"/>
    <listofallmembers>
      <member refid="classYAPTerm_1ab113801eac8ec2c37f7d69f86431a9c2" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>arg</name></member>
      <member refid="classYAPTerm_1ab113801eac8ec2c37f7d69f86431a9c2" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>arg</name></member>
      <member refid="classYAPTerm_1abb9a297c2305f37dcbc7ec1f8972fe3c" prot="public" virt="virtual"><scope>YAPTerm</scope><name>arity</name></member>
      <member refid="classYAPTerm_1abb9a297c2305f37dcbc7ec1f8972fe3c" prot="public" virt="virtual"><scope>YAPTerm</scope><name>arity</name></member>
      <member refid="classYAPTerm_1aacf1aea1fa6911abfa3557843d0a0c8d" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>bind</name></member>
      <member refid="classYAPTerm_1a7e9c53c62e12aea66b490d43b556a683" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>bind</name></member>
      <member refid="classYAPTerm_1aacf1aea1fa6911abfa3557843d0a0c8d" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>bind</name></member>
      <member refid="classYAPTerm_1a7e9c53c62e12aea66b490d43b556a683" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>bind</name></member>
      <member refid="classYAPTerm_1a0e4a83a87ff58e403d8c4a4e66e5b019" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>deepCopy</name></member>
      <member refid="classYAPTerm_1a0e4a83a87ff58e403d8c4a4e66e5b019" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>deepCopy</name></member>
      <member refid="classYAPTerm_1ad68ceb75dac15df87f18353bf4e901ee" prot="public" virt="virtual"><scope>YAPTerm</scope><name>exactlyEqual</name></member>
      <member refid="classYAPTerm_1ad68ceb75dac15df87f18353bf4e901ee" prot="public" virt="virtual"><scope>YAPTerm</scope><name>exactlyEqual</name></member>
      <member refid="classYAPTerm_1aae36bb12ce7dab29e680048725cfb905" prot="public" virt="virtual"><scope>YAPTerm</scope><name>getArg</name></member>
      <member refid="classYAPTerm_1a50b19125fd11c17e65dc2c7d7c0f232e" prot="public" virt="virtual"><scope>YAPTerm</scope><name>getArg</name></member>
      <member refid="classYAPTerm_1a7e2daafeb40df9547e1b3cc3d1ac0e96" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>gt</name></member>
      <member refid="classYAPTerm_1a7e2daafeb40df9547e1b3cc3d1ac0e96" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>gt</name></member>
      <member refid="classYAPTerm_1a84518c0718e6650566b120ca5b85db02" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>handle</name></member>
      <member refid="classYAPTerm_1a84518c0718e6650566b120ca5b85db02" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>handle</name></member>
      <member refid="classYAPTerm_1a2974e0128f95576a99fc78ed38ae8085" prot="public" virt="virtual"><scope>YAPTerm</scope><name>hashTerm</name></member>
      <member refid="classYAPTerm_1a2974e0128f95576a99fc78ed38ae8085" prot="public" virt="virtual"><scope>YAPTerm</scope><name>hashTerm</name></member>
      <member refid="classYAPTerm_1a1b2ed9bd9891b4f7f8c58783d9425d71" prot="protected" virt="non-virtual"><scope>YAPTerm</scope><name>hdl</name></member>
      <member refid="classYAPTerm_1a0e887830311eba8605002670b70699ed" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>initialized</name></member>
      <member refid="classYAPTerm_1a0e887830311eba8605002670b70699ed" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>initialized</name></member>
      <member refid="classYAPTerm_1a939025805a96e3fd93a61884a3b217f2" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isAppl</name></member>
      <member refid="classYAPTerm_1a939025805a96e3fd93a61884a3b217f2" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isAppl</name></member>
      <member refid="classYAPTerm_1a3fa5279dfa0c98b5272459ec64151325" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isAtom</name></member>
      <member refid="classYAPTerm_1a3fa5279dfa0c98b5272459ec64151325" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isAtom</name></member>
      <member refid="classYAPTerm_1aff847477b25724ebb960ed3445d51400" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isCompound</name></member>
      <member refid="classYAPTerm_1aff847477b25724ebb960ed3445d51400" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isCompound</name></member>
      <member refid="classYAPTerm_1aaf315cdc04d99d6badb9614bbf7197e2" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isFloat</name></member>
      <member refid="classYAPTerm_1aaf315cdc04d99d6badb9614bbf7197e2" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isFloat</name></member>
      <member refid="classYAPTerm_1ab11a72e64b950c3001b9fe20fc34682b" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isGround</name></member>
      <member refid="classYAPTerm_1ab11a72e64b950c3001b9fe20fc34682b" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isGround</name></member>
      <member refid="classYAPTerm_1a16626d5bc393ef2636260ee174e1a424" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isInteger</name></member>
      <member refid="classYAPTerm_1a16626d5bc393ef2636260ee174e1a424" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isInteger</name></member>
      <member refid="classYAPTerm_1a42e33ecd59575fc1ce1b1f84df6e256e" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isList</name></member>
      <member refid="classYAPTerm_1a42e33ecd59575fc1ce1b1f84df6e256e" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isList</name></member>
      <member refid="classYAPTerm_1a21e0b1a710668c121da5b55cb86e626a" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isPair</name></member>
      <member refid="classYAPTerm_1a21e0b1a710668c121da5b55cb86e626a" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isPair</name></member>
      <member refid="classYAPTerm_1aca0e42cb6a5f3e3745ea01e86c2c13bc" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isString</name></member>
      <member refid="classYAPTerm_1aca0e42cb6a5f3e3745ea01e86c2c13bc" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isString</name></member>
      <member refid="classYAPTerm_1a9ea7108484abde8985bee0ab1d807360" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isVar</name></member>
      <member refid="classYAPTerm_1a9ea7108484abde8985bee0ab1d807360" prot="public" virt="virtual"><scope>YAPTerm</scope><name>isVar</name></member>
      <member refid="classYAPTerm_1a1a37a59d4c80fc3c2606fdedeeb4a218" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>mk</name></member>
      <member refid="classYAPTerm_1a1a37a59d4c80fc3c2606fdedeeb4a218" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>mk</name></member>
      <member refid="classYAPTerm_1a5d085ea9020eec5b07e44d3a03a7bdf4" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>numberVars</name></member>
      <member refid="classYAPTerm_1a5d085ea9020eec5b07e44d3a03a7bdf4" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>numberVars</name></member>
      <member refid="classYAPTerm_1ae533addedf4448e6fb256e010c28a2e3" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>operator[]</name></member>
      <member refid="classYAPTerm_1ae533addedf4448e6fb256e010c28a2e3" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>operator[]</name></member>
      <member refid="classYAPTerm_1a34fc41ad9a79d1823f9278ed78337bc4" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>pop_t</name></member>
      <member refid="classYAPTerm_1a34fc41ad9a79d1823f9278ed78337bc4" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>pop_t</name></member>
      <member refid="classYAPTerm_1a47b5bd780cb7d4cd7fa4578c295fb838" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>put</name></member>
      <member refid="classYAPTerm_1a47b5bd780cb7d4cd7fa4578c295fb838" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>put</name></member>
      <member refid="classYAPTerm_1ad20897c5c8bd47f5d4005989bead0e55" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>reset</name></member>
      <member refid="classYAPTerm_1a69fffe0c41e001d6fdd0840f61a56df4" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>tag</name></member>
      <member refid="classYAPTerm_1a69fffe0c41e001d6fdd0840f61a56df4" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>tag</name></member>
      <member refid="classYAPTerm_1ab7852318b7495ccd6362d74dd6e5c652" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>term</name></member>
      <member refid="classYAPTerm_1ab7852318b7495ccd6362d74dd6e5c652" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>term</name></member>
      <member refid="classYAPTerm_1ad1ea0d530c1ceea2efc1661e83c6ccb7" prot="public" virt="virtual"><scope>YAPTerm</scope><name>text</name></member>
      <member refid="classYAPTerm_1ad1ea0d530c1ceea2efc1661e83c6ccb7" prot="public" virt="virtual"><scope>YAPTerm</scope><name>text</name></member>
      <member refid="classYAPTerm_1a5373f97ad03301a4eb97808b6c72e12d" prot="public" virt="virtual"><scope>YAPTerm</scope><name>unifiable</name></member>
      <member refid="classYAPTerm_1a5373f97ad03301a4eb97808b6c72e12d" prot="public" virt="virtual"><scope>YAPTerm</scope><name>unifiable</name></member>
      <member refid="classYAPTerm_1ad10da53c46207ede9f418086ed153d5b" prot="public" virt="virtual"><scope>YAPTerm</scope><name>unify</name></member>
      <member refid="classYAPTerm_1ad10da53c46207ede9f418086ed153d5b" prot="public" virt="virtual"><scope>YAPTerm</scope><name>unify</name></member>
      <member refid="classYAPTerm_1aceaa99597084fe2049d5de67eb6c4cf1" prot="public" virt="virtual"><scope>YAPTerm</scope><name>variant</name></member>
      <member refid="classYAPTerm_1aceaa99597084fe2049d5de67eb6c4cf1" prot="public" virt="virtual"><scope>YAPTerm</scope><name>variant</name></member>
      <member refid="classYAPTerm_1a5c605af04dea50a0a9ba581213eadb33" prot="private" virt="non-virtual"><scope>YAPTerm</scope><name>YAPApplTerm</name></member>
      <member refid="classYAPTerm_1a4419d55fa29244f8174e9a254171ce07" prot="private" virt="non-virtual"><scope>YAPTerm</scope><name>YAPConjunctiveTerm</name></member>
      <member refid="classYAPTerm_1a134c81e05356d8ca3837d6b2a4206942" prot="private" virt="non-virtual"><scope>YAPTerm</scope><name>YAPListTerm</name></member>
      <member refid="classYAPTerm_1acfc5e1d0daa38315eaeefd86b6246e15" prot="private" virt="non-virtual"><scope>YAPTerm</scope><name>YAPModule</name></member>
      <member refid="classYAPTerm_1a5f29afd4064b22d6fd33050a854ee857" prot="private" virt="non-virtual"><scope>YAPTerm</scope><name>YAPModuleProp</name></member>
      <member refid="classYAPTerm_1a42b13f860a0c8d74ff5c9f3fb9cb5240" prot="private" virt="non-virtual"><scope>YAPTerm</scope><name>YAPPredicate</name></member>
      <member refid="classYAPTerm_1a5e67b41d8c18d7208476ef97cfd885d5" prot="private" virt="non-virtual"><scope>YAPTerm</scope><name>YAPPrologPredicate</name></member>
      <member refid="classYAPTerm_1abce547a0e7fe87f57877644b72180813" prot="private" virt="non-virtual"><scope>YAPTerm</scope><name>YAPQuery</name></member>
      <member refid="classYAPTerm_1a0238fde4b780fb0f67ec7c3a1440edba" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1a84647bb1f2e20f0eda6fb1782800e525" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1a5b95fd101b73207682463ea473b6d2c0" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1a8a604a0dd3551e7eac340ff75c06ac16" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1a0238fde4b780fb0f67ec7c3a1440edba" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1a84647bb1f2e20f0eda6fb1782800e525" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1a5b95fd101b73207682463ea473b6d2c0" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1a8a604a0dd3551e7eac340ff75c06ac16" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1aa7618a4103a2b970e30a608516eefb3d" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1a9e2cd85e45ba4503adf7ae394d2d74ee" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1ab4b05d43c5d28b981566dc5d82e7f8a6" prot="public" virt="non-virtual"><scope>YAPTerm</scope><name>YAPTerm</name></member>
      <member refid="classYAPTerm_1af294a9767b1ac6cb6519b871ea641b46" prot="public" virt="virtual"><scope>YAPTerm</scope><name>~YAPTerm</name></member>
      <member refid="classYAPTerm_1af294a9767b1ac6cb6519b871ea641b46" prot="public" virt="virtual"><scope>YAPTerm</scope><name>~YAPTerm</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
