<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classmaplist_23" kind="predicate" language="Prolog" prot="public">
    <compoundname>maplist/3</compoundname>
    <briefdescription>
<para><bold>maplist</bold>( 2:Pred, + <emphasis>List1</emphasis>,+ <emphasis>List2</emphasis>) </para>
    </briefdescription>
    <detaileddescription>
<para><bold>maplist</bold>(: Pred, ? L1, ? L2 )</para>
<para>Apply <emphasis>Pred</emphasis> on all successive pairs of elements from <emphasis>List1</emphasis> and <emphasis>List2</emphasis> Fails if <emphasis>Pred</emphasis> can not be applied to a pair See the example above</para>
<para><emphasis>L1</emphasis> and <emphasis>L2</emphasis> are such that <computeroutput>call( _Pred_, _A1_, _A2_)</computeroutput> holds for every corresponding element in lists <emphasis>L1</emphasis>, <emphasis>L2</emphasis></para>
<para>Comment from Richard O&apos;Keefe: succeeds when <emphasis>Pred( _Old</emphasis>, <emphasis>New</emphasis>) succeeds for each corresponding <emphasis>Gi</emphasis> in <emphasis>Listi</emphasis>, <emphasis>New</emphasis> in <emphasis>NewList</emphasis> In InterLisp, this is MAPCAR It is also MAP2C Isn&apos;t bidirectionality wonderful? </para>
    </detaileddescription>
    <location file="library/maplist.yap" line="1" column="1" bodyfile="library/maplist.yap" bodystart="1" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
