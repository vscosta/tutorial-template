<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="pl_2errors_8c" kind="file" language="C++">
    <compoundname>errors.c</compoundname>
    <includes refid="Yap_8h" local="yes">Yap.h</includes>
    <includes refid="Atoms_8h" local="yes">Atoms.h</includes>
    <includes refid="YapDefs_8h" local="yes">YapDefs.h</includes>
    <includes refid="YapError_8h" local="yes">YapError.h</includes>
    <includes refid="YapInterface_8h" local="yes">YapInterface.h</includes>
    <includes refid="YapStreams_8h" local="yes">YapStreams.h</includes>
    <includes refid="YapTags_8h" local="yes">YapTags.h</includes>
    <includes refid="Yapproto_8h" local="yes">Yapproto.h</includes>
    <includes refid="absmi_8h" local="yes">absmi.h</includes>
    <includes refid="yapio_8h" local="yes">yapio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="Foreign_8h" local="yes">Foreign.h</includes>
    <includes refid="iopreds_8h" local="no">iopreds.h</includes>
    <includes refid="YapErrors_8h" local="yes">YapErrors.h</includes>
    <incdepgraph>
      <node id="21">
        <label>Atoms.h</label>
        <link refid="Atoms_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>Foreign.h</label>
        <link refid="Foreign_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Regs.h</label>
        <link refid="Regs_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ScannerTypes.h</label>
        <link refid="ScannerTypes_8h_source"/>
      </node>
      <node id="27">
        <label>TermExt.h</label>
        <link refid="TermExt_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Yap.h</label>
        <link refid="Yap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>YapArenas.h</label>
        <link refid="YapArenas_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>YapCompoundTerm.h</label>
        <link refid="YapCompoundTerm_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>YapEval.h</label>
        <link refid="YapEval_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>YapFlags.h</label>
        <link refid="YapFlags_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>YapGFlagInfo.h</label>
        <link refid="YapGFlagInfo_8h"/>
      </node>
      <node id="36">
        <label>YapHandles.h</label>
        <link refid="YapHandles_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>YapHeap.h</label>
        <link refid="YapHeap_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>YapLFlagInfo.h</label>
        <link refid="YapLFlagInfo_8h"/>
      </node>
      <node id="26">
        <label>YapOpcodes.h</label>
        <link refid="YapOpcodes_8h_source"/>
      </node>
      <node id="35">
        <label>YapSignals.h</label>
        <link refid="YapSignals_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>YapTags.h</label>
        <link refid="YapTags_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>YapText.h</label>
        <link refid="YapText_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Yapproto.h</label>
        <link refid="Yapproto_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>Yatom.h</label>
        <link refid="Yatom_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>absmi.h</label>
        <link refid="absmi_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>alloc.h</label>
        <link refid="alloc_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>amidefs.h</label>
        <link refid="amidefs_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>amiops.h</label>
        <link refid="amiops_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>arrays.h</label>
        <link refid="arrays_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>clause.h</label>
        <link refid="clause_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>corout.h</label>
        <link refid="corout_8h_source"/>
      </node>
      <node id="42">
        <label>generated/h0globals.h</label>
        <link refid="h0globals_8h_source"/>
      </node>
      <node id="41">
        <label>generated/h0struct.h</label>
        <link refid="h0struct_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>generated/hlocals.h</label>
        <link refid="hlocals_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>generated/tatoms.h</label>
        <link refid="tatoms_8h_source"/>
      </node>
      <node id="34">
        <label>gprof.h</label>
        <link refid="gprof_8h_source"/>
      </node>
      <node id="5">
        <label>inline-only.h</label>
        <link refid="inline-only_8h_source"/>
      </node>
      <node id="44">
        <label>locals.h</label>
        <link refid="locals_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>nolocks.h</label>
        <link refid="nolocks_8h_source"/>
      </node>
      <node id="57">
        <label>terms.h</label>
        <link refid="terms_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>threads.h</label>
        <link refid="threads_8h_source"/>
      </node>
      <node id="60">
        <label>trim_trail.h</label>
        <link refid="trim__trail_8h_source"/>
      </node>
      <node id="49">
        <label>GitSHA1.h</label>
        <link refid="GitSHA1_8h_source"/>
      </node>
      <node id="62">
        <label>VFS.h</label>
        <link refid="VFS_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>YapDefs.h</label>
        <link refid="YapDefs_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>YapEncoding.h</label>
        <link refid="YapEncoding_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>YapError.h</label>
        <link refid="YapError_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>YapErrors.h</label>
        <link refid="YapErrors_8h"/>
      </node>
      <node id="18">
        <label>YapFormat.h</label>
        <link refid="YapFormat_8h_source"/>
      </node>
      <node id="20">
        <label>YapInit.h</label>
        <link refid="YapInit_8h"/>
      </node>
      <node id="53">
        <label>YapInterface.h</label>
        <link refid="YapInterface_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>YapStreams.h</label>
        <link refid="YapStreams_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>YapTerm.h</label>
        <link refid="YapTerm_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>YapUTF8.h</label>
        <link refid="YapUTF8_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>../os/encoding.h</label>
        <link refid="encoding_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>iopreds.h</label>
        <link refid="iopreds_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>yapio.h</label>
        <link refid="yapio_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pl/errors.c</label>
        <link refid="pl_2errors_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>YapConfig.h</label>
      </node>
      <node id="13">
        <label>YapIOConfig.h</label>
      </node>
      <node id="10">
        <label>YapTermConfig.h</label>
      </node>
      <node id="11">
        <label>config.h</label>
      </node>
      <node id="45">
        <label>dlocals.h</label>
      </node>
      <node id="28">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>string.h</label>
      </node>
      <node id="52">
        <label>utf8proc.h</label>
      </node>
      <node id="22">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structc__error__info" prot="public">c_error_info</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__YAPErrors_1gaf718f8e2d0817aab95d12c9f46ccba9d" prot="public" static="no">
        <name>set_key_b</name>
        <param><defname>k</defname></param>
        <param><defname>ks</defname></param>
        <param><defname>q</defname></param>
        <param><defname>i</defname></param>
        <param><defname>t</defname></param>
        <initializer>  if (strcmp(ks, q) == 0) {                                                    \
    i-&gt;k = (t == TermTrue ? true : false);                                     \
    return i-&gt;k || t == TermFalse;                                             \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="100" column="9" bodyfile="pl/errors.c" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1gaea052a50cccdb78c11af29c0c52e761e" prot="public" static="no">
        <name>set_key_i</name>
        <param><defname>k</defname></param>
        <param><defname>ks</defname></param>
        <param><defname>q</defname></param>
        <param><defname>i</defname></param>
        <param><defname>t</defname></param>
        <initializer>  if (strcmp(ks, q) == 0) {                                                    \
    i-&gt;k = IsIntegerTerm(t) ? IntegerOfTerm(t) : 0;                            \
    return IsIntegerTerm(t);                                                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="106" column="9" bodyfile="pl/errors.c" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1gab588b8ec1bde14f7d3cb09a378760c13" prot="public" static="no">
        <name>set_key_s</name>
        <param><defname>k</defname></param>
        <param><defname>ks</defname></param>
        <param><defname>q</defname></param>
        <param><defname>i</defname></param>
        <param><defname>t</defname></param>
        <initializer>  if (strcmp(ks, q) == 0) {                                                    \
    const char *s = IsAtomTerm(t) ? RepAtom(AtomOfTerm(t))-&gt;StrOfAE            \
                                  : IsStringTerm(t) ? StringOfTerm(t) : NULL;  \
    if (s &amp;&amp; s[0]) {                                                           \
      char *tmp = calloc(1, strlen(s) + 1);                                    \
      strcpy(tmp, s);                                                          \
      i-&gt;k = tmp;                                                              \
    }                                                                          \
    return i-&gt;k != NULL;                                                       \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="112" column="9" bodyfile="pl/errors.c" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga07dcea8abda07db444a7d9ada324a361" prot="public" static="no">
        <name>set_key_t</name>
        <param><defname>k</defname></param>
        <param><defname>ks</defname></param>
        <param><defname>q</defname></param>
        <param><defname>i</defname></param>
        <param><defname>t</defname></param>
        <initializer>  if (strcmp(ks, q) == 0) {                                                    \
    i-&gt;k = Yap_SaveTerm(t);                                                    \
    return i-&gt;k != 0L;                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="124" column="9" bodyfile="pl/errors.c" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga876e9d0ccf1fd4dde861719cdd73aa3a" prot="public" static="no">
        <name>query_key_b</name>
        <param><defname>k</defname></param>
        <param><defname>ks</defname></param>
        <param><defname>q</defname></param>
        <param><defname>i</defname></param>
        <initializer>  if (strcmp(ks, q) == 0) {                                                    \
    return i-&gt;k ? TermTrue : TermFalse;                                        \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="163" column="9" bodyfile="pl/errors.c" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga352b7955c6f175c8f527cf8672a9ff1d" prot="public" static="no">
        <name>query_key_i</name>
        <param><defname>k</defname></param>
        <param><defname>ks</defname></param>
        <param><defname>q</defname></param>
        <param><defname>i</defname></param>
        <initializer>  if (strcmp(ks, q) == 0) {                                                    \
    return MkIntegerTerm(i-&gt;k);                                                \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="168" column="9" bodyfile="pl/errors.c" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga934600faadcb727a40fa24bf75b17f80" prot="public" static="no">
        <name>query_key_s</name>
        <param><defname>k</defname></param>
        <param><defname>ks</defname></param>
        <param><defname>q</defname></param>
        <param><defname>i</defname></param>
        <initializer>  if (strcmp(ks, q) == 0) {                                                    \
    if (i-&gt;k &amp;&amp; i-&gt;k[0] != &apos;\0&apos;)                                               \
      return MkAtomTerm(Yap_LookupAtom(i-&gt;k));                                 \
    else                                                                       \
      return TermEmptyAtom;                                                    \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="173" column="9" bodyfile="pl/errors.c" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1gaaef7e45e9030ab3403c677239751ecb7" prot="public" static="no">
        <name>query_key_t</name>
        <param><defname>k</defname></param>
        <param><defname>ks</defname></param>
        <param><defname>q</defname></param>
        <param><defname>i</defname></param>
        <initializer>  if (strcmp(ks, q) == 0) {                                                    \
    Term t;                                                                    \
    if ((t = i-&gt;k) == 0)                                                       \
      return TermNil;                                                          \
    return t;                                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="181" column="9" bodyfile="pl/errors.c" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1gad8442e941d4159eeeef6273600e584d1" prot="public" static="no">
        <name>YAP_BUF_SIZE</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="574" column="9" bodyfile="pl/errors.c" bodystart="574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga133910fdb35365c06c508702227f05c2" prot="public" static="no">
        <name>BEGIN_ERROR_CLASSES</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="598" column="9" bodyfile="pl/errors.c" bodystart="1185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga227f790b9236019201491f20cf40ddd6" prot="public" static="no">
        <name>END_ERROR_CLASSES</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="599" column="9" bodyfile="pl/errors.c" bodystart="1189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1gad7621d6b2a804c333ea19b58631f2de2" prot="public" static="no">
        <name>ECLASS</name>
        <param><defname>CL</defname></param>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="600" column="9" bodyfile="pl/errors.c" bodystart="1187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga088de32d088c81b0bc4730c0280c190f" prot="public" static="no">
        <name>BEGIN_ERRORS</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="602" column="9" bodyfile="pl/errors.c" bodystart="1199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga78688cd47b7c2826ce854b94c54e9b2e" prot="public" static="no">
        <name>END_ERRORS</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="603" column="9" bodyfile="pl/errors.c" bodystart="1205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga11444c784c8512ffeec46b934a58df73" prot="public" static="no">
        <name>E0</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <initializer>  case A: {                                                                    \
    ft0 = MkAtomTerm(Yap_LookupAtom(C &quot;_error&quot;));                            \
  } break;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="605" column="9" bodyfile="pl/errors.c" bodystart="1200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga270ad5f14284eb5ba569e84e1870edf8" prot="public" static="no">
        <name>E</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <initializer>  case A: {                                                                    \
    Term nt[2];                                                         \
    nt[0] = MkAtomTerm(Yap_LookupAtom(C ));                                     \
    if (culprit) nt[1] = culprit; else nt[1] = MkVarTerm();		\
    ft0 = <ref refid="Yapproto_8h_1a7f5a50b2910fe257ee5d3fef426cf3af" kindref="member">Yap_MkApplTerm</ref>(Yap_MkFunctor(Yap_LookupAtom(e-&gt;classAsText), 2), 2, nt);             \
  }break;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="610" column="9" bodyfile="pl/errors.c" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga295401ac1f092023dcb57f5413cf0af6" prot="public" static="no">
        <name>E1</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <initializer>  case A: {                                                                    \
    Term nt = MkAtomTerm(Yap_LookupAtom(C));				\
    ft0 = <ref refid="Yapproto_8h_1a7f5a50b2910fe257ee5d3fef426cf3af" kindref="member">Yap_MkApplTerm</ref>(Yap_MkFunctor(Yap_LookupAtom(e-&gt;classAsText), 1), 1, &amp;nt);        \
  }break;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="618" column="9" bodyfile="pl/errors.c" bodystart="1202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga22fa5233716ebbee17a6d992a8c981f4" prot="public" static="no">
        <name>ES</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <initializer>  case A: {                                                                    \
    Term nt = MkAtomTerm(Yap_LookupAtom(e-&gt;culprit));			\
    ft0 = <ref refid="Yapproto_8h_1a7f5a50b2910fe257ee5d3fef426cf3af" kindref="member">Yap_MkApplTerm</ref>(Yap_MkFunctor(Yap_LookupAtom(e-&gt;classAsText), 1), 1, &amp;nt);        \
  }break;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="624" column="9" bodyfile="pl/errors.c" bodystart="1203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1gab972fa0940fc08b062b6e90f285f6229" prot="public" static="no">
        <name>E2</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <param><defname>D</defname></param>
        <initializer>  case A: {                                                                    \
    Term nt[3];                                                         \
    nt[0] = MkAtomTerm(Yap_LookupAtom(C));                                     \
    nt[1] = MkAtomTerm(Yap_LookupAtom(D));                                     \
    if (culprit) nt[2] = culprit; else nt[2] = MkVarTerm();                                                       \
    ft0 = <ref refid="Yapproto_8h_1a7f5a50b2910fe257ee5d3fef426cf3af" kindref="member">Yap_MkApplTerm</ref>(Yap_MkFunctor(Yap_LookupAtom(e-&gt;classAsText), 3), 3, nt);             \
  } break;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="630" column="9" bodyfile="pl/errors.c" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga133910fdb35365c06c508702227f05c2" prot="public" static="no">
        <name>BEGIN_ERROR_CLASSES</name>
        <param></param>
        <initializer>typedef enum aux_class {</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1156" column="9" bodyfile="pl/errors.c" bodystart="1185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1gad7621d6b2a804c333ea19b58631f2de2" prot="public" static="no">
        <name>ECLASS</name>
        <param><defname>CL</defname></param>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer>CL##__,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1158" column="9" bodyfile="pl/errors.c" bodystart="1187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga227f790b9236019201491f20cf40ddd6" prot="public" static="no">
        <name>END_ERROR_CLASSES</name>
        <param></param>
        <initializer>  }                                                                            \
  aux_class_t;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1160" column="9" bodyfile="pl/errors.c" bodystart="1189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga088de32d088c81b0bc4730c0280c190f" prot="public" static="no">
        <name>BEGIN_ERRORS</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1164" column="9" bodyfile="pl/errors.c" bodystart="1199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga809ce406facb750b7a5527a174bc68b4" prot="public" static="no">
        <name>E0</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1165" column="9" bodyfile="pl/errors.c" bodystart="1200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga94349dda5a01546b896cdf5ec9355e3f" prot="public" static="no">
        <name>E</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1166" column="9" bodyfile="pl/errors.c" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga3f035db927ba20839eda7667b7162d2e" prot="public" static="no">
        <name>E1</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1167" column="9" bodyfile="pl/errors.c" bodystart="1202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga825eefa74684d7e00ba7c2fd30f6f0e2" prot="public" static="no">
        <name>ES</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1168" column="9" bodyfile="pl/errors.c" bodystart="1203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga2fb952e27d3903cf63d48f81be0cb00c" prot="public" static="no">
        <name>E2</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <param><defname>W</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1169" column="9" bodyfile="pl/errors.c" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga78688cd47b7c2826ce854b94c54e9b2e" prot="public" static="no">
        <name>END_ERRORS</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1170" column="9" bodyfile="pl/errors.c" bodystart="1205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga133910fdb35365c06c508702227f05c2" prot="public" static="no">
        <name>BEGIN_ERROR_CLASSES</name>
        <param></param>
        <initializer>static const char *c_error_class_name[] = {</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1185" column="9" bodyfile="pl/errors.c" bodystart="1185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1gad7621d6b2a804c333ea19b58631f2de2" prot="public" static="no">
        <name>ECLASS</name>
        <param><defname>CL</defname></param>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer>A,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1187" column="9" bodyfile="pl/errors.c" bodystart="1187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga227f790b9236019201491f20cf40ddd6" prot="public" static="no">
        <name>END_ERROR_CLASSES</name>
        <param></param>
        <initializer>  NULL                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1189" column="9" bodyfile="pl/errors.c" bodystart="1189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga088de32d088c81b0bc4730c0280c190f" prot="public" static="no">
        <name>BEGIN_ERRORS</name>
        <param></param>
        <initializer>static struct <ref refid="structc__error__info" kindref="compound">c_error_info</ref> c_error_list[] = {</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1199" column="9" bodyfile="pl/errors.c" bodystart="1199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga809ce406facb750b7a5527a174bc68b4" prot="public" static="no">
        <name>E0</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <initializer>{X, Y, Z, NULL},</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1200" column="9" bodyfile="pl/errors.c" bodystart="1200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga94349dda5a01546b896cdf5ec9355e3f" prot="public" static="no">
        <name>E</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <initializer>{X, Y, Z, NULL},</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1201" column="9" bodyfile="pl/errors.c" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga3f035db927ba20839eda7667b7162d2e" prot="public" static="no">
        <name>E1</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <initializer>{X, Y, NULL, NULL},</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1202" column="9" bodyfile="pl/errors.c" bodystart="1202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga825eefa74684d7e00ba7c2fd30f6f0e2" prot="public" static="no">
        <name>ES</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <initializer>{X, Y, NULL, NULL},</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1203" column="9" bodyfile="pl/errors.c" bodystart="1203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga2fb952e27d3903cf63d48f81be0cb00c" prot="public" static="no">
        <name>E2</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <param><defname>Z</defname></param>
        <param><defname>W</defname></param>
        <initializer>{X, Y, Z , W},</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1204" column="9" bodyfile="pl/errors.c" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__YAPErrors_1ga78688cd47b7c2826ce854b94c54e9b2e" prot="public" static="no">
        <name>END_ERRORS</name>
        <param></param>
        <initializer>  { 0, YAPC_NO_ERROR, &quot;&quot; }                                                     \
  }                                                                            \
  ;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1205" column="9" bodyfile="pl/errors.c" bodystart="1205" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__YAPErrors_1ga09b53381e90cf6de8ce35646a52c1cf0" prot="public" static="no">
        <type>struct <ref refid="structc__error__info" kindref="compound">c_error_info</ref></type>
        <definition>typedef struct c_error_info c_error_t</definition>
        <argsstring></argsstring>
        <name>c_error_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1197" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__YAPErrors_1gaf5b80d2673b463e101f0affd89d9fb40" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char tmpbuf[YAP_BUF_SIZE]</definition>
        <argsstring>[YAP_BUF_SIZE]</argsstring>
        <name>tmpbuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="576" column="13" bodyfile="pl/errors.c" bodystart="576" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__YAPErrors_1ga589007d62586279d2e8b83bacf760f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_RestartYap</definition>
        <argsstring>(int flag)</argsstring>
        <name>Yap_RestartYap</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="90" column="6" bodyfile="C/errors.c" bodystart="90" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga44059d881b056e758c73daa2d7b1a38b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool setErr</definition>
        <argsstring>(const char *q, yap_error_descriptor_t *i, Term t)</argsstring>
        <name>setErr</name>
        <param>
          <type>const char *</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="130" column="13" bodyfile="pl/errors.c" bodystart="130" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga1795a1b63f9e8b55e272f27f1d98fc56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>static Term queryErr</definition>
        <argsstring>(const char *q, yap_error_descriptor_t *i)</argsstring>
        <name>queryErr</name>
        <param>
          <type>const char *</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="189" column="13" bodyfile="pl/errors.c" bodystart="189" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga3f894e761cbd7fb64ef4689f4656bac2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_key_b</definition>
        <argsstring>(FILE *of, const char *key, bool v)</argsstring>
        <name>print_key_b</name>
        <param>
          <type>FILE *</type>
          <declname>of</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="222" column="13" bodyfile="pl/errors.c" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gae41e35ebe6c09a7491085d9097c9612a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_key_i</definition>
        <argsstring>(FILE *of, const char *key, YAP_Int v)</argsstring>
        <name>print_key_i</name>
        <param>
          <type>FILE *</type>
          <declname>of</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>YAP_Int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="227" column="13" bodyfile="pl/errors.c" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gaa132d346aa9232bb82067646239a3f77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_key_s</definition>
        <argsstring>(FILE *of, const char *key, const char *v)</argsstring>
        <name>print_key_s</name>
        <param>
          <type>FILE *</type>
          <declname>of</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="231" column="13" bodyfile="pl/errors.c" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga3e8f8e746366e3650160978b1cb20ea6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_key_t</definition>
        <argsstring>(FILE *of, const char *key, YAP_Term v)</argsstring>
        <name>print_key_t</name>
        <param>
          <type>FILE *</type>
          <declname>of</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>YAP_Term</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="236" column="13" bodyfile="pl/errors.c" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga3c8622c6eabce10f77be4bf9b88e4d98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void printErr</definition>
        <argsstring>(yap_error_descriptor_t *i, FILE *out)</argsstring>
        <name>printErr</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="243" column="13" bodyfile="pl/errors.c" bodystart="243" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga061f76775abb3d50abf3fd486bff4fac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAP_Term</type>
        <definition>static YAP_Term add_key_b</definition>
        <argsstring>(const char *key, bool v, YAP_Term o0)</argsstring>
        <name>add_key_b</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <param>
          <type>YAP_Term</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="286" column="17" bodyfile="pl/errors.c" bodystart="286" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga80f8a204b7d82ffaf85bb4b73833dd82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAP_Term</type>
        <definition>static YAP_Term add_key_i</definition>
        <argsstring>(const char *key, YAP_Int v, YAP_Term o0)</argsstring>
        <name>add_key_i</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>YAP_Int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>YAP_Term</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="295" column="17" bodyfile="pl/errors.c" bodystart="295" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga8e2f3c2684a783244264459c3d8765e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAP_Term</type>
        <definition>static YAP_Term add_key_s</definition>
        <argsstring>(const char *key, const char *v, YAP_Term o0)</argsstring>
        <name>add_key_s</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>YAP_Term</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="303" column="17" bodyfile="pl/errors.c" bodystart="303" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gaf82bfb78f31d1887ec3e11fac5826e42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAP_Term</type>
        <definition>static YAP_Term add_key_t</definition>
        <argsstring>(const char *key, YAP_Term v, YAP_Term o0)</argsstring>
        <name>add_key_t</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>YAP_Term</type>
          <declname>v</declname>
        </param>
        <param>
          <type>YAP_Term</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="314" column="17" bodyfile="pl/errors.c" bodystart="314" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gaa5ffdf8292343bc7214a8674d4dbcd65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>static Term err2list</definition>
        <argsstring>(yap_error_descriptor_t *i)</argsstring>
        <name>err2list</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="325" column="13" bodyfile="pl/errors.c" bodystart="325" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga33f8453365c1a778b0e6706883936e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_do_warning__</definition>
        <argsstring>(const char *file, const char *function, int line, yap_error_number type, Term t, const char *fmt,...)</argsstring>
        <name>Yap_do_warning__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>yap_error_number</type>
          <declname>type</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="363" column="6" bodyfile="C/errors.c" bodystart="363" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1gab9385131fd019c8b65e5c5aebc284efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_Warning</definition>
        <argsstring>(const char *s,...)</argsstring>
        <name>Yap_Warning</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="397" column="6" bodyfile="C/errors.c" bodystart="397" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1gad6673141a50187dc411005b86508337d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_PrintWarning</definition>
        <argsstring>(Term twarning)</argsstring>
        <name>Yap_PrintWarning</name>
        <param>
          <type>Term</type>
          <declname>twarning</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="436" column="6" bodyfile="C/errors.c" bodystart="436" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga26cb476983759fffa98bde148bbf7dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_HandleError__</definition>
        <argsstring>(const char *file, const char *function, int lineno, const char *s,...)</argsstring>
        <name>Yap_HandleError__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="463" column="6" bodyfile="C/errors.c" bodystart="463" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga0196d82843c0109456fd62d076fd2e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Yap_SWIHandleError</definition>
        <argsstring>(const char *s,...)</argsstring>
        <name>Yap_SWIHandleError</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="512" column="5" bodyfile="C/errors.c" bodystart="512" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga9815ffe569887fe5afb78d7f503e1031" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void error_exit_yap</definition>
        <argsstring>(int value)</argsstring>
        <name>error_exit_yap</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="550" column="13" bodyfile="pl/errors.c" bodystart="550" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga9846c7fcad4c63a05d8718f59f5c2984" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>static Term mkerrort</definition>
        <argsstring>(yap_error_descriptor_t *e)</argsstring>
        <name>mkerrort</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="639" column="13" bodyfile="pl/errors.c" bodystart="639" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1gac51f64c5e17c150e6dd5a53b3a4d6d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
        <definition>yap_error_descriptor_t * Yap_pushErrorContext</definition>
        <argsstring>(bool link, yap_error_descriptor_t *new_error, yap_error_descriptor_t *old_error)</argsstring>
        <name>Yap_pushErrorContext</name>
        <param>
          <type>bool</type>
          <declname>link</declname>
        </param>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>new_error</declname>
        </param>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>old_error</declname>
        </param>
        <briefdescription>
<para>add a new error descriptor, either to the top of the stack, or as the top; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="669" column="1" bodyfile="C/errors.c" bodystart="669" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga12b8c0e921ee0e13a508b563a2bc9201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
        <definition>yap_error_descriptor_t * Yap_popErrorContext</definition>
        <argsstring>(bool mdnew, bool pass, yap_error_descriptor_t *old_error)</argsstring>
        <name>Yap_popErrorContext</name>
        <param>
          <type>bool</type>
          <declname>mdnew</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pass</declname>
        </param>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>old_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="687" column="24" bodyfile="C/errors.c" bodystart="687" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga8ae225428cf24b3bac9d00f529b57ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_ThrowError__</definition>
        <argsstring>(const char *file, const char *function, int lineno, yap_error_number type, Term where, const char *msg,...)</argsstring>
        <name>Yap_ThrowError__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>yap_error_number</type>
          <declname>type</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>where</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Thow an error directly to the error handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>where </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>who </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lineno</parametername>
</parameternamelist>
<parameterdescription>
<para>when </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>what, error code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>how, user information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="711" column="6" bodyfile="C/errors.c" bodystart="711" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga0be57669942cb7dba6a7d9cb07ed4872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_ThrowExistingError</definition>
        <argsstring>(void)</argsstring>
        <name>Yap_ThrowExistingError</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>complete delayed error </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="731" column="6" bodyfile="C/errors.c" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1gaa4a194e6bb9225accfdd809ebb2d3c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term MkSysError</definition>
        <argsstring>(yap_error_descriptor_t *i)</argsstring>
        <name>MkSysError</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Wrap the error descriptor as exception/2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="738" column="6" bodyfile="C/errors.c" bodystart="738" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga5b7fdf2dcdae40c3b6289ebd1f08ee11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void termToError</definition>
        <argsstring>(Term t1, Term user_info, yap_error_descriptor_t *i)</argsstring>
        <name>termToError</name>
        <param>
          <type>Term</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>user_info</declname>
        </param>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="738" column="1" bodyfile="pl/errors.c" bodystart="738" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga53c67c642a174bceb446f04ad2948645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_MkErrorRecord</definition>
        <argsstring>(yap_error_descriptor_t *r, const char *file, const char *function, int lineno, yap_error_number type, Term where, Term extra, const char *s)</argsstring>
        <name>Yap_MkErrorRecord</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>yap_error_number</type>
          <declname>type</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>where</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>extra</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="817" column="6" bodyfile="C/errors.c" bodystart="817" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga960be723836be8cdcae336bc1fe3ab80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term Yap_MkFullError</definition>
        <argsstring>(yap_error_descriptor_t *i, yap_error_number type)</argsstring>
        <name>Yap_MkFullError</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <param>
          <type>yap_error_number</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>convert a C-error to a Prolog term: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>fill text fields</para>
</listitem><listitem><para>wrap descriptor1240 </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="879" column="6" bodyfile="C/errors.c" bodystart="879" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga4cdaeb67310eb3ef5b801233af95ebcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structyami" kindref="compound">yamop</ref> *</type>
        <definition>yamop * Yap_Error__</definition>
        <argsstring>(bool throw, const char *file, const char *function, int lineno, yap_error_number type, Term where, const char *fmt,...)</argsstring>
        <name>Yap_Error__</name>
        <param>
          <type>bool</type>
          <declname>throw</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>yap_error_number</type>
          <declname>type</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>where</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Yap_Error() This function handles errors in the C code. </para>
        </briefdescription>
        <detaileddescription>
<para>Check <ref refid="errors_8yap" kindref="compound">errors.yap</ref> for the corresponding Prolog code</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>C source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>C function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lineno</parametername>
</parameternamelist>
<parameterdescription>
<para>C exact line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the error ID (in YAP this is a single integer) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>the culprit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>usually FAILCODE</para>
</simplesect>
In a good day, the error handler&apos;s job is to generate a throw This includes:<itemizedlist>
<listitem><para>constructing an ISO style error term;</para>
</listitem><listitem><para>constructing a list with all available info on the bug</para>
</listitem><listitem><para>generating the throw</para>
</listitem><listitem><para>forcing backtracking in order to restart</para>
</listitem></itemizedlist>
</para>
<para>In a bad day, it has to deal with OOM, abort, and errors within errorts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="930" column="7" bodyfile="C/errors.c" bodystart="930" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga8721f3648716186ad624ced99d12c011" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int close_error</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>close_error</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1134" column="12" bodyfile="pl/errors.c" bodystart="1134" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga50d283de0371f1a34e8c3237aa3260f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Yap_errorName</definition>
        <argsstring>(yap_error_number e)</argsstring>
        <name>Yap_errorName</name>
        <param>
          <type>yap_error_number</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1222" column="6" bodyfile="C/errors.c" bodystart="1222" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga73ee3d4af2a1b84ed818eeec7a08beaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Yap_errorName2</definition>
        <argsstring>(yap_error_number e)</argsstring>
        <name>Yap_errorName2</name>
        <param>
          <type>yap_error_number</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1228" column="7" bodyfile="C/errors.c" bodystart="1228" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1gaf0b9e9309f24fd43955da026af49afee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>yap_error_class_number</type>
        <definition>yap_error_class_number Yap_errorClass</definition>
        <argsstring>(yap_error_number e)</argsstring>
        <name>Yap_errorClass</name>
        <param>
          <type>yap_error_number</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1234" column="24" bodyfile="C/errors.c" bodystart="1234" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga6330ca965b1934e72431fcc2d5ae4c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>yap_error_class_number</type>
        <definition>yap_error_class_number Yap_errorClassNumber</definition>
        <argsstring>(const char *s)</argsstring>
        <name>Yap_errorClassNumber</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1238" column="24" bodyfile="C/errors.c" bodystart="1238" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1ga517895b4996f69dee232f0778eeb8f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Yap_errorClassName</definition>
        <argsstring>(yap_error_class_number e)</argsstring>
        <name>Yap_errorClassName</name>
        <param>
          <type>yap_error_class_number</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1247" column="6" bodyfile="C/errors.c" bodystart="1247" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga5f01232fe71e61058143ab6c4dd3594d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int reset_exception</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>reset_exception</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1242" column="12" bodyfile="pl/errors.c" bodystart="1242" bodyend="1242"/>
      </memberdef>
      <memberdef kind="function" id="group__YAPErrors_1gafb099b73b3f7c0f8fc7c03b6cfb63d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Term</type>
        <definition>Term Yap_MkErrorTerm</definition>
        <argsstring>(yap_error_descriptor_t *i)</argsstring>
        <name>Yap_MkErrorTerm</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="640" column="6" bodyfile="C/errors.c" bodystart="640" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="group__ExceptionDescriptors_1ga739b86419c074f47242d055446484a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
        <definition>yap_error_descriptor_t * Yap_PeekException</definition>
        <argsstring>(void)</argsstring>
        <name>Yap_PeekException</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>is an error active? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1274" column="24" bodyfile="C/errors.c" bodystart="1274" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="group__ExceptionDescriptors_1gaf9baf98fc19fcd8dc4911370e9e3d042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
        <definition>yap_error_descriptor_t * Yap_GetException</definition>
        <argsstring>(void)</argsstring>
        <name>Yap_GetException</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>clone Active Error </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1285" column="24" bodyfile="C/errors.c" bodystart="1285" bodyend="1291"/>
      </memberdef>
      <memberdef kind="function" id="group__ExceptionDescriptors_1ga5c48af7e0f0ebb396f1d5fac9823b90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_PrintException</definition>
        <argsstring>(yap_error_descriptor_t *i)</argsstring>
        <name>Yap_PrintException</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>print descriptor to user_output/stdout </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1296" column="6" bodyfile="C/errors.c" bodystart="1296" bodyend="1304"/>
      </memberdef>
      <memberdef kind="function" id="group__ExceptionDescriptors_1ga7cbc225536c6eca32cae2659c3fb1814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_RaiseException</definition>
        <argsstring>()</argsstring>
        <name>Yap_RaiseException</name>
        <briefdescription>
<para>let&apos;s go </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1309" column="6" bodyfile="C/errors.c" bodystart="1309" bodyend="1316"/>
      </memberdef>
      <memberdef kind="function" id="group__ExceptionDescriptors_1ga1de83e1bd9791cd7755cc1823e73995f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_ResetException</definition>
        <argsstring>(yap_error_descriptor_t *i)</argsstring>
        <name>Yap_ResetException</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>v * clean up (notice that the code ensures ActiveError exists on exit </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1321" column="6" bodyfile="C/errors.c" bodystart="1321" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="group__ExceptionDescriptors_1gac83dd1bf7cdf7db4aba4c50099dc3bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_RestartException</definition>
        <argsstring>(yap_error_descriptor_t *i)</argsstring>
        <name>Yap_RestartException</name>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>clean up (notice that the code ensures ActiveError exists on exit </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1334" column="6" bodyfile="C/errors.c" bodystart="1334" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga9d7a974b631fa96be213131fa475b670" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int read_exception</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>read_exception</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
<para>transform an exception into Prolog shape (dictionary or list) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1349" column="12" bodyfile="pl/errors.c" bodystart="1349" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gacbaac84074c315c57f6b1f76b0131eef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int print_exception</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>print_exception</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1364" column="12" bodyfile="pl/errors.c" bodystart="1364" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga20d46193fccccb0741f944e3576d3591" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int query_exception</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>query_exception</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1389" column="12" bodyfile="pl/errors.c" bodystart="1389" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga9dff473479147558289150943238cbb5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int set_exception</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>set_exception</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1409" column="12" bodyfile="pl/errors.c" bodystart="1409" bodyend="1426"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga8889074e877dd1dc5c297b7f5b808860" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int drop_exception</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>drop_exception</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1428" column="12" bodyfile="pl/errors.c" bodystart="1428" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga2f41cda50ed4179c215cea2e29a8ce92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int new_exception</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>new_exception</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1442" column="12" bodyfile="pl/errors.c" bodystart="1442" bodyend="1445"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gae2b1896a2bb302aa6852ee9b4a0c0bfc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int user_exception</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>user_exception</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1447" column="12" bodyfile="pl/errors.c" bodystart="1447" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="group__ExceptionDescriptors_1gada64d5e97531bdb364db168a12af2ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_get_exception</definition>
        <argsstring>(void)</argsstring>
        <name>Yap_get_exception</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1467" column="6" bodyfile="C/errors.c" bodystart="1467" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="group__ExceptionDescriptors_1ga73cfd0e0589f0e716f37508ab7db7194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>yap_error_number</type>
        <definition>yap_error_number Yap_errorNumber</definition>
        <argsstring>(yap_error_class_number c, const char *s, const char *s2)</argsstring>
        <name>Yap_errorNumber</name>
        <param>
          <type>yap_error_class_number</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>given a string(s, lookup for a corresponding error class r numbe </para>
        </briefdescription>
        <detaileddescription>
<para>given a string(s) and class context, lookup for a corresponding error number </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1478" column="18" bodyfile="C/errors.c" bodystart="1478" bodyend="1497"/>
      </memberdef>
      <memberdef kind="function" id="group__ExceptionDescriptors_1ga1f8c68bc74b8e666f2312f37875be34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
        <definition>yap_error_descriptor_t * event</definition>
        <argsstring>(Term t, yap_error_descriptor_t *i)</argsstring>
        <name>event</name>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="group__ErrorC_1ga9fefa1a193287bea38ba6df038670c2f" kindref="member">yap_error_descriptor_t</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1499" column="24" bodyfile="C/errors.c" bodystart="1499" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga7099067ea322b1a1eb72efa722e99d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>Int is_nonvar__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term t USES_REGS)</argsstring>
        <name>is_nonvar__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term t</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1516" column="5" bodyfile="C/errors.c" bodystart="1516" bodyend="1524"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga5aba440144b108fc37fc3597f8f27b01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int is_nonvar1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>is_nonvar1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1527" column="12" bodyfile="pl/errors.c" bodystart="1527" bodyend="1530"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga09f1bb4ff199c8527b4073272ba4bee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_boolean__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term t USES_REGS)</argsstring>
        <name>is_boolean__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term t</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1537" column="6" bodyfile="C/errors.c" bodystart="1537" bodyend="1545"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga97a1f95218b82e7165307b56a8f19be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_codes__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term t USES_REGS)</argsstring>
        <name>is_codes__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term t</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1547" column="6" bodyfile="C/errors.c" bodystart="1547" bodyend="1559"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gafdb743ad7185398410c3f9060b490079" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int is_boolean1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>is_boolean1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1556" column="12" bodyfile="pl/errors.c" bodystart="1556" bodyend="1559"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1gafea136d95da7cf0e0120d628d79ab014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool must_be_boolean__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term t USES_REGS)</argsstring>
        <name>must_be_boolean__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term t</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1566" column="6" bodyfile="C/errors.c" bodystart="1566" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga59d5a2af6496422d834aa1120d1c1c3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int must_be_boolean1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>must_be_boolean1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1576" column="12" bodyfile="pl/errors.c" bodystart="1576" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga7f10b006ab9ed4c2fba7762fdd5695c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_atom__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term t USES_REGS)</argsstring>
        <name>is_atom__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term t</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1586" column="6" bodyfile="C/errors.c" bodystart="1586" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga29ba2cdb21c0affd18415ed6b4f42a78" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int is_atom1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>is_atom1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1591" column="12" bodyfile="pl/errors.c" bodystart="1591" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga662e46cf5cc1e590eb8a28dfd25b30f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool must_be_atom__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term t USES_REGS)</argsstring>
        <name>must_be_atom__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term t</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1601" column="6" bodyfile="C/errors.c" bodystart="1601" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gadf83075b6d8c331261d4e6d305eb3657" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int must_be_atom1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>must_be_atom1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1611" column="12" bodyfile="pl/errors.c" bodystart="1611" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1gac7a5deed25c080c310d9ec48a7aac038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_list__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term list USES_REGS)</argsstring>
        <name>is_list__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term list</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1628" column="6" bodyfile="C/errors.c" bodystart="1628" bodyend="1639"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga0e883d9a4ef12a0454e0cdecef6d0f2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int is_list1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>is_list1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1636" column="12" bodyfile="pl/errors.c" bodystart="1636" bodyend="1639"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1gaae5638c6206e5fe2dc65f39785933544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool must_be_list__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term list USES_REGS)</argsstring>
        <name>must_be_list__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term list</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1646" column="6" bodyfile="C/errors.c" bodystart="1646" bodyend="1657"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gacc889b41755d9b8bcecde0db4d72b03d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int must_be_list1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>must_be_list1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1654" column="12" bodyfile="pl/errors.c" bodystart="1654" bodyend="1657"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga2dace63b81bc4637ab3b4bd41d334c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>Int callable</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>callable</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1671" column="5" bodyfile="C/errors.c" bodystart="1671" bodyend="1702"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga859a0db5a192245d5b5dec38c013d841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_callable__</definition>
        <argsstring>(const char *file, const char *function, int lineno, Term t USES_REGS)</argsstring>
        <name>is_callable__</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>Term t</type>
          <declname>USES_REGS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1711" column="6" bodyfile="C/errors.c" bodystart="1711" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga3a91a207cd07d3bdf325d5ad00be0092" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int is_callable1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>is_callable1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1742" column="12" bodyfile="pl/errors.c" bodystart="1742" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga6b1f8b666d8850d3d06a4205b46b97a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_callable</definition>
        <argsstring>(Term t)</argsstring>
        <name>Yap_callable</name>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1752" column="6" bodyfile="C/errors.c" bodystart="1752" bodyend="1778"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga49ee288dbd5edc520b74d29d85771a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Yap_must_be_callable</definition>
        <argsstring>(Term G, Term mod)</argsstring>
        <name>Yap_must_be_callable</name>
        <param>
          <type>Term</type>
          <declname>G</declname>
        </param>
        <param>
          <type>Term</type>
          <declname>mod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1780" column="6" bodyfile="C/errors.c" bodystart="1780" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gab5d22ecc80817e71415039c7f00e5fcd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int must_be_callable1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>must_be_callable1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1814" column="12" bodyfile="pl/errors.c" bodystart="1814" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga9fbfc6fc8608925ad7d7d28475581c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_must_be_list</definition>
        <argsstring>(Term t)</argsstring>
        <name>Yap_must_be_list</name>
        <param>
          <type>Term</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Dereferenced term t must start as a list: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput>[]</computeroutput></para>
</listitem><listitem><para><computeroutput>[_|_]</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>no effort is made to verify if a true list </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1830" column="6" bodyfile="C/errors.c" bodystart="1830" bodyend="1838"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1ga8365a0bbf5baf4aa8a709a41067f7f60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int must_be_bound1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>must_be_bound1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1839" column="12" bodyfile="pl/errors.c" bodystart="1839" bodyend="1845"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gab0cf0df35861954b17baf0cc680dc18d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int must_be_ground1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>must_be_ground1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1851" column="12" bodyfile="pl/errors.c" bodystart="1851" bodyend="1857"/>
      </memberdef>
      <memberdef kind="function" id="pl_2errors_8c_1gae8d3f28249def169ff2a40e51ca8f8a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int</type>
        <definition>static Int must_be_predicate_indicator1</definition>
        <argsstring>(USES_REGS1)</argsstring>
        <name>must_be_predicate_indicator1</name>
        <param>
          <type>USES_REGS1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pl/errors.c" line="1874" column="12" bodyfile="pl/errors.c" bodystart="1874" bodyend="1926"/>
      </memberdef>
      <memberdef kind="function" id="group__ErrorBuiltins_1ga59b4762f7ed2427d616f663c9821c94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Yap_InitErrorPreds</definition>
        <argsstring>(void)</argsstring>
        <name>Yap_InitErrorPreds</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C/errors.c" line="1936" column="6" bodyfile="C/errors.c" bodystart="1936" bodyend="1970"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>low-level error handling </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pl/errors.c"/>
  </compounddef>
</doxygen>
